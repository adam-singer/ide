// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.JSInvocationMirror = {
  "": function JSInvocationMirror(memberName, _internalName, _kind, _liblib1$_arguments, _namedArgumentNames, _namedIndices) {
    this.memberName = memberName;
    this._internalName = _internalName;
    this._kind = _kind;
    this._liblib1$_arguments = _liblib1$_arguments;
    this._namedArgumentNames = _namedArgumentNames;
    this._namedIndices = _namedIndices;
  },
  "super": "Object",
  get$isMethod: function() {
    return this._kind === 0;
  },
  get$isGetter: function() {
    return this._kind === 1;
  },
  get$isSetter: function() {
    return this._kind === 2;
  },
  get$isAccessor: function() {
    return !(this._kind === 0);
  },
  get$positionalArguments: function() {
    var list, t1, t3, t4, index;
    if ($.boolConversionCheck(this.get$isGetter()))
      return;
    list = [];
    t1 = this._liblib1$_arguments;
    if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
      return this.get$positionalArguments$bailout(1, list, t1);
    t3 = t1.length;
    t4 = $.length(this._namedArgumentNames);
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t4 = t3 - t4;
    for (index = 0; index < t4; ++index) {
      if (index >= t1.length)
        throw $.ioore(index);
      $.CONSTANT0.add$1(list, t1[index]);
    }
    return list;
  },
  get$positionalArguments$bailout: function(state0, list, t1, t4, t3) {
    switch (state0) {
      case 0:
        if ($.boolConversionCheck(this.get$isGetter()))
          return;
        list = [];
        t1 = this._liblib1$_arguments;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        t4 = $.$$sub(t3.get$length(t1), $.length(this._namedArgumentNames));
      case 2:
        var index;
        state0 = 0;
        for (index = 0; $.CONSTANT1.$lt(index, t4); ++index)
          $.CONSTANT0.add$1(list, t3.$index(t1, index));
        return list;
    }
  },
  get$namedArguments: function() {
    var map, t2, t3, namedArgumentCount, t5, namedArgumentsStartIndex, i, t1, t4;
    if ($.boolConversionCheck(this.get$isAccessor()))
      return;
    map = $.makeLiteralMap([]);
    if (typeof map !== "object" || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.$isJavaScriptIndexingBehavior())
      return this.get$namedArguments$bailout(1, map);
    t2 = this._namedArgumentNames;
    t3 = $.getInterceptor$JSStringJSArray(t2);
    namedArgumentCount = t3.get$length(t2);
    $.intTypeCheck(namedArgumentCount);
    if (namedArgumentCount !== (namedArgumentCount | 0))
      return this.get$namedArguments$bailout(2, map, t2, t3, namedArgumentCount);
    t5 = this._liblib1$_arguments;
    if (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior())
      return this.get$namedArguments$bailout(3, map, t2, t3, namedArgumentCount, t5);
    namedArgumentsStartIndex = t5.length - namedArgumentCount;
    for (i = 0; $.$$lt(i, namedArgumentCount); i = $.intTypeCheck(i + 1)) {
      t1 = t3.$index(t2, i);
      if (typeof i !== "number")
        throw $.iae(i);
      t4 = namedArgumentsStartIndex + i;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t5.length)
        throw $.ioore(t4);
      t4 = t5[t4];
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= map.length)
        throw $.ioore(t1);
      map[t1] = t4;
    }
    return $.callTypeCheck(map, "$isMap");
  },
  get$namedArguments$bailout: function(state0, map, t2, t3, namedArgumentCount, t5, t7, t8) {
    switch (state0) {
      case 0:
        if ($.boolConversionCheck(this.get$isAccessor()))
          return;
        map = $.makeLiteralMap([]);
      case 1:
        state0 = 0;
        t2 = this._namedArgumentNames;
        t3 = $.getInterceptor$JSStringJSArray(t2);
        namedArgumentCount = t3.get$length(t2);
        $.intTypeCheck(namedArgumentCount);
      case 2:
        state0 = 0;
        t5 = this._liblib1$_arguments;
      case 3:
        state0 = 0;
        t7 = $.getInterceptor$JSStringJSArray(t5);
        t8 = $.$$sub(t7.get$length(t5), namedArgumentCount);
        $.intTypeCheck(t8);
      case 4:
        var t1, t4, i, t6;
        state0 = 0;
        for (t1 = $.getInterceptor$JSNumber(t8), t4 = $.getInterceptor$JSArray(map), i = 0; t6 = $.getInterceptor$JSNumber(i), t6.$lt(i, namedArgumentCount); i = $.intTypeCheck(t6.$add(i, 1)))
          t4.$indexSet(map, t3.$index(t2, i), t7.$index(t5, t1.$add(t8, i)));
        return $.callTypeCheck(map, "$isMap");
    }
  }
};

$$.DartError = {
  "": function DartError() {
  },
  "super": "Object",
  get$stack: function() {
    return $.stringTypeCheck(this.stack);
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.stringTypeCheck($.toString(dartException));
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {
  "": function StackTrace(stack) {
    this.stack = stack;
  },
  "super": "Object",
  toString$0: function() {
    var t1 = this.stack;
    return $.stringTypeCheck(!(t1 == null) ? t1 : "");
  }
};

$$.Closure = {
  "": function Closure() {
  },
  "super": "Object",
  toString$0: function() {
    return "Closure";
  },
  $isFunction: true
};

$$.Dynamic_ = {
  "": function Dynamic_() {
  },
  "super": "Object",
  $isDynamic_: true
};

$$.Null = {
  "": function Null() {
  },
  "super": "Object"
};

$$.TypeErrorImplementation = {
  "": function TypeErrorImplementation(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function() {
    return this.message;
  }
};

$$.MetaInfo = {
  "": function MetaInfo(_tag, _tags, _set) {
    this._tag = _tag;
    this._tags = _tags;
    this._set = _set;
  },
  "super": "Object",
  get$_tag: function() {
    return this._tag;
  },
  get$_set: function() {
    return this._set;
  },
  $isMetaInfo: true
};

$$.JSSyntaxRegExp = {
  "": function JSSyntaxRegExp(_liblib1$_pattern, _isMultiLine, _isCaseSensitive) {
    this._liblib1$_pattern = _liblib1$_pattern;
    this._isMultiLine = _isMultiLine;
    this._isCaseSensitive = _isCaseSensitive;
  },
  "super": "Object",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    $.stringTypeCheck(str);
    m = $.listTypeCheck($.regExpExec(this, $.checkString(str)));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.length($.$$index(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString($.stringTypeCheck(str)));
  },
  allMatches$1: function(str) {
    $.stringTypeCheck(str);
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._liblib1$_pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true,
  $isRegExp: true,
  $isPattern: true
};

$$._MatchImplementation = {
  "": function _MatchImplementation(pattern, str, start, end, _groups) {
    this.pattern = pattern;
    this.str = str;
    this.start = start;
    this.end = end;
    this._groups = _groups;
  },
  "super": "Object",
  $index: function(index) {
    $.intTypeCheck(index);
    return $.stringTypeCheck($.$$index(this._groups, index));
  },
  $isMatch: true
};

$$._AllMatchesIterable = {
  "": function _AllMatchesIterable(_re, _str) {
    this._re = _re;
    this._str = _str;
  },
  "super": "Iterable",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {
  "": function _AllMatchesIterator(_re, _str, _liblib1$_current) {
    this._re = _re;
    this._str = _str;
    this._liblib1$_current = _liblib1$_current;
  },
  "super": "Object",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    this._liblib1$_current = $.propertyTypeCheck(this._re.firstMatch$1(this._str), "$isMatch");
    return !(this._liblib1$_current == null);
  },
  $isIterator: true
};

$$.StringMatch = {
  "": function StringMatch(start, str, pattern) {
    this.start = start;
    this.str = str;
    this.pattern = pattern;
  },
  "super": "Object",
  $index: function(g) {
    return $.stringTypeCheck(this.group$1($.intTypeCheck(g)));
  },
  group$1: function(group_) {
    if (!(group_ === 0))
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  },
  $isMatch: true
};

$$.JsStringBuffer = {
  "": function JsStringBuffer(_contents) {
    this._contents = _contents;
  },
  "super": "Object",
  get$length: function() {
    return $.intTypeCheck($.length(this._contents));
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(obj) {
    var t1, t2;
    if (typeof obj !== "string")
      return this.add$1$bailout(1, obj);
    t1 = this._contents;
    t2 = obj;
    this._contents = t1 + t2;
  },
  add$1$bailout: function(state0, obj) {
    var t1, t2;
    t1 = this._contents;
    t2 = typeof obj === "string" ? obj : $.S(obj);
    this._contents = t1 + t2;
  },
  addAll$1: function(objects) {
    var t1, t2, t3;
    for (t1 = $.iterator(objects); $.boolConversionCheck(t1.moveNext$0());) {
      t2 = t1.get$current();
      t3 = this._contents;
      t2 = typeof t2 === "string" ? t2 : $.S(t2);
      this._contents = t3 + t2;
    }
  },
  clear$0: function() {
    this._contents = "";
  },
  toString$0: function() {
    return this._contents;
  },
  $isStringBuffer: true
};

$$.Collection = {
  "": function Collection() {
  },
  "super": "Iterable",
  addAll$1: function(elements) {
    var t1;
    for (t1 = $.iterator(elements); $.boolConversionCheck(t1.moveNext$0());)
      this.add$1(t1.get$current());
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, $.functionTypeCheck(test));
  },
  clear$0: function() {
    $.IterableMixinWorkaround_removeMatching(this, new $.Collection_clear_anon());
  },
  $isCollection: function() {
    return true;
  }
};

$$.AssertionError = {
  "": function AssertionError() {
  },
  "super": "Object"
};

$$.NullThrownError = {
  "": function NullThrownError() {
  },
  "super": "Object",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {
  "": function ArgumentError(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {
  "": function RangeError(message) {
    this.message = message;
  },
  "super": "ArgumentError",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {
  "": function NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, _existingArgumentNames) {
    this._receiver = _receiver;
    this._memberName = _memberName;
    this._arguments = _arguments;
    this._namedArguments = _namedArguments;
    this._existingArgumentNames = _existingArgumentNames;
  },
  "super": "Object",
  toString$0: function() {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), "$isStringBuffer");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior())
      return this.toString$0$bailout(1, t1, t2);
    for (; $.boolConversionCheck($.$$lt(t1.i_1, t2.length)); t1.i_1 = $.intTypeCheck($.$$add(t1.i_1, 1))) {
      if ($.boolConversionCheck($.$$gt(t1.i_1, 0)))
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (!(t2 == null))
      t2.forEach$1(new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior())
      return this.toString$0$bailout(2, t1, t2);
    actualParameters = $.stringTypeCheck($.toString(t1.sb_0));
    t1.sb_0 = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), "$isStringBuffer");
    for (i = 0; t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, t2.length); ++i) {
      if (t3.$gt(i, 0))
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      $.add(t3, t2[i]);
    }
    formalParameters = $.stringTypeCheck($.toString(t1.sb_0));
    t2 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), "$isStringBuffer");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSStringJSArray(t2); $.boolConversionCheck($.$$lt(t1.i_1, t3.get$length(t2))); t1.i_1 = $.intTypeCheck($.$$add(t1.i_1, 1))) {
            if ($.boolConversionCheck($.$$gt(t1.i_1, 0)))
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (!(t2 == null))
          t2.forEach$1(new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, actualParameters, i, t4, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          actualParameters = $.stringTypeCheck($.toString(t1.sb_0));
          t1.sb_0 = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), "$isStringBuffer");
          for (t3 = $.getInterceptor$JSStringJSArray(t2), i = 0; t4 = $.getInterceptor$JSNumber(i), t4.$lt(i, t3.get$length(t2)); i = $.intTypeCheck(t4.$add(i, 1))) {
            if (t4.$gt(i, 0))
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, t3.$index(t2, i));
          }
          formalParameters = $.stringTypeCheck($.toString(t1.sb_0));
          t2 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {
  "": function UnsupportedError(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function() {
    return this.message;
  },
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.UnimplementedError = {
  "": function UnimplementedError(message) {
    this.message = message;
  },
  "super": "Object",
  get$message: function() {
    return this.message;
  },
  toString$0: function() {
    var t1 = this.message;
    return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {
  "": function StateError(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {
  "": function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  },
  "super": "Object",
  toString$0: function() {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {
  "": function StackOverflowError() {
  },
  "super": "Object",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {
  "": function RuntimeError(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {
  "": function _ExceptionImplementation(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {
  "": function FormatException(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function() {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.IllegalJSRegExpException = {
  "": function IllegalJSRegExpException(_pattern, _errmsg) {
    this._pattern = _pattern;
    this._errmsg = _errmsg;
  },
  "super": "Object",
  toString$0: function() {
    return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
  },
  $isException: true
};

$$.Iterable = {
  "": function Iterable() {
  },
  "super": "Object",
  mappedBy$1: function(f) {
    return $.MappedIterable$(this, $.functionTypeCheck(f), $.getRuntimeTypeInfo(this)[0], null);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f), $.getRuntimeTypeInfo(this)[0]);
  },
  contains$1: function(element) {
    var t1;
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      if ($.boolConversionCheck($.$$eq(t1.get$current(), element)))
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.getRuntimeTypeInfo(this)[0]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[0]]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.getRuntimeTypeInfo(this)[0]), "$isSet");
  },
  get$length: function() {
    var it, count;
    it = $.propertyTypeCheck($.iterator(this), "$isIterator");
    for (count = 0; $.boolConversionCheck(it.moveNext$0());)
      ++count;
    return count;
  },
  get$length$bailout: function(state0, t2, t1) {
    switch (state0) {
      case 0:
        t1 = $.iterator(this);
        $.propertyTypeCheck(t1, "$isIterator");
        count = 0;
      case 1:
        var count;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.boolConversionCheck(t1.moveNext$0()))
                  break L0;
                t2 = $.$$add(count, 1);
                $.intTypeCheck(t2);
              case 1:
                state0 = 0;
                count = t2;
            }
        return count;
    }
  },
  get$isEmpty: function() {
    return !$.boolConversionCheck($.iterator(this).moveNext$0());
  },
  get$last: function() {
    var it, result;
    it = $.propertyTypeCheck($.iterator(this), "$isIterator");
    if (!$.boolConversionCheck(it.moveNext$0()))
      throw $.$$throw($.StateError$("No elements"));
    do
      result = it.get$current();
    while ($.boolConversionCheck(it.moveNext$0()));
    return result;
  },
  $isIterable: function() {
    return true;
  }
};

$$.Iterator = {
  "": function Iterator() {
  },
  "super": "Object",
  $isIterator: true
};

$$.Object = {
  "": function Object() {
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return this === other;
  },
  get$hashCode: function() {
    return $.intTypeCheck($.Primitives_objectHashCode(this));
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  },
  noSuchMethod$1: function(invocation) {
    throw $.$$throw($.NoSuchMethodError$(this, invocation.memberName, invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
  },
  _onValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_onValue", "_onValue$1", 0, [$0], []));
  },
  floor$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("floor", "floor$0", 0, [], []));
  },
  _postMessage_2$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_postMessage_2", "_postMessage_2$1", 0, [$0], []));
  },
  allMatches$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
  },
  fail$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("fail", "fail$3", 0, [$0, $1, $2], []));
  },
  $$dom_addEventListener$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_addEventListener", "$$dom_addEventListener$3", 0, [$0, $1, $2], []));
  },
  $xor: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("^", "$xor", 0, [$0], []));
  },
  moveNext$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("moveNext", "moveNext$0", 0, [], []));
  },
  _probeForAdding$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_probeForAdding", "_probeForAdding$1", 0, [$0], []));
  },
  _deserializeMap$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_deserializeMap$1", 0, [$0], []));
  },
  _liblib5$_deserializeMap$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_liblib5$_deserializeMap$1", 0, [$0], []));
  },
  $sub: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("-", "$sub", 0, [$0], []));
  },
  concat$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("concat", "concat$1", 0, [$0], []));
  },
  _add_1$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_add_1", "_add_1$2", 0, [$0, $1], []));
  },
  where$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("where", "where$1", 0, [$0], []));
  },
  _transform$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_transform", "_transform$1", 0, [$0], []));
  },
  _handleDone$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_handleDone", "_handleDone$1", 0, [$0], []));
  },
  remove$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$0", 0, [], []));
  },
  remove$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$1", 0, [$0], []));
  },
  startsWith$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
  },
  _test$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_test", "_test$1", 0, [$0], []));
  },
  handleNumber$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("handleNumber", "handleNumber$1", 0, [$0], []));
  },
  callSync$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("callSync", "callSync$1", 0, [$0], []));
  },
  getRange$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("getRange", "getRange$2", 0, [$0, $1], []));
  },
  toLowerCase$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toLowerCase", "toLowerCase$0", 0, [], []));
  },
  $le: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("<=", "$le", 0, [$0], []));
  },
  _get_1$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_get_1", "_get_1$1", 0, [$0], []));
  },
  contains$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$1", 0, [$0], []));
  },
  unregister$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("unregister", "unregister$1", 0, [$0], []));
  },
  _addListener$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_addListener", "_addListener$1", 0, [$0], []));
  },
  add$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("add", "add$1", 0, [$0], []));
  },
  $mul: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("*", "$mul", 0, [$0], []));
  },
  _sendDone$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_sendDone", "_sendDone$0", 0, [], []));
  },
  addAll$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
  },
  get$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("get", "get$1", 0, [$0], []));
  },
  stringifyValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("stringifyValue", "stringifyValue$1", 0, [$0], []));
  },
  _sendError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_sendError", "_sendError$1", 0, [$0], []));
  },
  _onDone$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_onDone", "_onDone$0", 0, [], []));
  },
  register$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
  },
  _computeCurrentFromIndex$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("_computeCurrentFromIndex", "_computeCurrentFromIndex$3", 0, [$0, $1, $2], []));
  },
  complete$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("complete", "complete$1", 0, [$0], []));
  },
  completeError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("completeError", "completeError$1", 0, [$0], []));
  },
  completeError$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("completeError", "completeError$2", 0, [$0, $1], []));
  },
  toSendPort$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toSendPort", "toSendPort$0", 0, [], []));
  },
  enterScope$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("enterScope", "enterScope$0", 0, [], []));
  },
  $$dom_setAttribute$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_setAttribute", "$$dom_setAttribute$2", 0, [$0, $1], []));
  },
  _chain$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_chain", "_chain$1", 0, [$0], []));
  },
  _getPropertyValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_getPropertyValue", "_getPropertyValue$1", 0, [$0], []));
  },
  _writeOn$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_writeOn", "_writeOn$1", 0, [$0], []));
  },
  postMessage$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("postMessage", "postMessage$1", 0, [$0], []));
  },
  then$2$onError: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("then", "then$2$onError", 0, [$0, $1], ["onError"]));
  },
  then$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("then", "then$1", 0, [$0], []));
  },
  indexOf$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
  },
  $tdiv: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("~/", "$tdiv", 0, [$0], []));
  },
  $indexSet: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], []));
  },
  _link$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_link", "_link$2", 0, [$0, $1], []));
  },
  $shl: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("<<", "$shl", 0, [$0], []));
  },
  $lt: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("<", "$lt", 0, [$0], []));
  },
  runIteration$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("runIteration", "runIteration$0", 0, [], []));
  },
  invalidate$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("invalidate", "invalidate$1", 0, [$0], []));
  },
  $and: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("&", "$and", 0, [$0], []));
  },
  handleString$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("handleString", "handleString$1", 0, [$0], []));
  },
  send$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("send", "send$0", 0, [], []));
  },
  send$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("send", "send$1", 0, [$0], []));
  },
  send$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("send", "send$2", 0, [$0, $1], []));
  },
  call$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$0", 0, [], []));
  },
  call$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$1", 0, [$0], []));
  },
  call$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
  },
  call$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
  },
  call$4: function($0, $1, $2, $3) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], []));
  },
  call$2$onError: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
  },
  call$2$test: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$2$test", 0, [$0, $1], ["test"]));
  },
  call$4$onDone$onError$unsubscribeOnError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1($.createInvocationMirror("call", "call$4$onDone$onError$unsubscribeOnError", 0, [$0, $1, $2, $3], ["onDone", "onError", "unsubscribeOnError"]));
  },
  $$dom_removeChild$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_removeChild", "$$dom_removeChild$1", 0, [$0], []));
  },
  toJson$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toJson", "toJson$0", 0, [], []));
  },
  _sendData$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_sendData", "_sendData$1", 0, [$0], []));
  },
  replaceWith$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
  },
  $index: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("[]", "$index", 0, [$0], []));
  },
  _setGlobals$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_setGlobals", "_setGlobals$0", 0, [], []));
  },
  _handleError$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_handleError", "_handleError$2", 0, [$0, $1], []));
  },
  _setOrChainValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_setOrChainValue", "_setOrChainValue$1", 0, [$0], []));
  },
  _probeForLookup$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_probeForLookup", "_probeForLookup$1", 0, [$0], []));
  },
  $ge: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror(">=", "$ge", 0, [$0], []));
  },
  handleNull$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("handleNull", "handleNull$0", 0, [], []));
  },
  _sendValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_sendValue", "_sendValue$1", 0, [$0], []));
  },
  replaceAll$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
  },
  _liblib4$_onData$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_onData", "_liblib4$_onData$1", 0, [$0], []));
  },
  open$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("open", "open$2", 0, [$0, $1], []));
  },
  firstMatch$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("firstMatch", "firstMatch$1", 0, [$0], []));
  },
  beginObject$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("beginObject", "beginObject$0", 0, [], []));
  },
  removeAll$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("removeAll", "removeAll$1", 0, [$0], []));
  },
  endArray$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("endArray", "endArray$0", 0, [], []));
  },
  _nativeDetectEnvironment$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_nativeDetectEnvironment", "_nativeDetectEnvironment$0", 0, [], []));
  },
  _f$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_f", "_f$1", 0, [$0], []));
  },
  mappedBy$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("mappedBy", "mappedBy$1", 0, [$0], []));
  },
  truncate$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("truncate", "truncate$0", 0, [], []));
  },
  lookup$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
  },
  _handleValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_handleValue", "_handleValue$1", 0, [$0], []));
  },
  _asListener$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_asListener", "_asListener$0", 0, [], []));
  },
  $$dom_removeEventListener$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_removeEventListener", "$$dom_removeEventListener$3", 0, [$0, $1, $2], []));
  },
  cleanup$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("cleanup", "cleanup$0", 0, [], []));
  },
  _clearUnhandledError$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_clearUnhandledError", "_clearUnhandledError$0", 0, [], []));
  },
  nextEntry$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("nextEntry", "nextEntry$0", 0, [], []));
  },
  $$dom_removeAttribute$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_removeAttribute", "$$dom_removeAttribute$1", 0, [$0], []));
  },
  hasMatch$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("hasMatch", "hasMatch$1", 0, [$0], []));
  },
  _handleData$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_handleData", "_handleData$2", 0, [$0, $1], []));
  },
  previousEntry$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("previousEntry", "previousEntry$0", 0, [], []));
  },
  $$dom_getAttribute$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_getAttribute", "$$dom_getAttribute$1", 0, [$0], []));
  },
  run$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("run", "run$0", 0, [], []));
  },
  _removeListeners$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_removeListeners", "_removeListeners$0", 0, [], []));
  },
  close$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("close", "close$0", 0, [], []));
  },
  substring$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$1", 0, [$0], []));
  },
  substring$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
  },
  _dispatch$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_dispatch$1", 0, [$0], []));
  },
  _liblib5$_dispatch$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_liblib5$_dispatch$1", 0, [$0], []));
  },
  _onError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_onError", "_onError$1", 0, [$0], []));
  },
  $shr: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror(">>", "$shr", 0, [$0], []));
  },
  toList$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toList", "toList$0", 0, [], []));
  },
  charCodeAt$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("charCodeAt", "charCodeAt$1", 0, [$0], []));
  },
  _initialize$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_initialize", "_initialize$1", 0, [$0], []));
  },
  $$dom_replaceChild$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_replaceChild", "$$dom_replaceChild$2", 0, [$0, $1], []));
  },
  $$dom_hasAttribute$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_hasAttribute", "$$dom_hasAttribute$1", 0, [$0], []));
  },
  clear$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("clear", "clear$0", 0, [], []));
  },
  prepend$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("prepend", "prepend$1", 0, [$0], []));
  },
  addLast$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("addLast", "addLast$1", 0, [$0], []));
  },
  _setError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_setError", "_setError$1", 0, [$0], []));
  },
  listen$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("listen", "listen$1", 0, [$0], []));
  },
  listen$4$onDone$onError$unsubscribeOnError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1($.createInvocationMirror("listen", "listen$4$onDone$onError$unsubscribeOnError", 0, [$0, $1, $2, $3], ["onDone", "onError", "unsubscribeOnError"]));
  },
  _postMessage_1$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_postMessage_1", "_postMessage_1$2", 0, [$0, $1], []));
  },
  toSet$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("toSet", "toSet$0", 0, [], []));
  },
  $or: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("|", "$or", 0, [$0], []));
  },
  forEach$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
  },
  _deserializeHelper$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_deserializeHelper$1", 0, [$0], []));
  },
  _liblib5$_deserializeHelper$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_liblib5$_deserializeHelper$1", 0, [$0], []));
  },
  setRequestHeader$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("setRequestHeader", "setRequestHeader$2", 0, [$0, $1], []));
  },
  propertyValue$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("propertyValue", "propertyValue$0", 0, [], []));
  },
  getAuthToken$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("getAuthToken", "getAuthToken$0", 0, [], []));
  },
  removeMatching$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("removeMatching", "removeMatching$1", 0, [$0], []));
  },
  _deserializeList$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_deserializeList$1", 0, [$0], []));
  },
  _liblib5$_deserializeList$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_liblib5$_deserializeList$1", 0, [$0], []));
  },
  endsWith$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("endsWith", "endsWith$1", 0, [$0], []));
  },
  beginArray$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("beginArray", "beginArray$0", 0, [], []));
  },
  _asNonSentinelEntry$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_asNonSentinelEntry", "_asNonSentinelEntry$0", 0, [], []));
  },
  removeFirst$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("removeFirst", "removeFirst$0", 0, [], []));
  },
  _grow$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_grow", "_grow$1", 0, [$0], []));
  },
  _serializeList$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_serializeList$1", 0, [$0], []));
  },
  _liblib5$_serializeList$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_liblib5$_serializeList$1", 0, [$0], []));
  },
  globalize$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("globalize", "globalize$1", 0, [$0], []));
  },
  handleBool$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("handleBool", "handleBool$1", 0, [$0], []));
  },
  $add: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("+", "$add", 0, [$0], []));
  },
  collectionToString$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("collectionToString", "collectionToString$1", 0, [$0], []));
  },
  _nativeInitWorkerMessageHandler$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_nativeInitWorkerMessageHandler", "_nativeInitWorkerMessageHandler$0", 0, [], []));
  },
  _add_2$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_add_2", "_add_2$1", 0, [$0], []));
  },
  propertyName$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("propertyName", "propertyName$0", 0, [], []));
  },
  containsKey$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
  },
  _setValue$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_setValue", "_setValue$1", 0, [$0], []));
  },
  _ensureCapacity$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_ensureCapacity", "_ensureCapacity$0", 0, [], []));
  },
  removeRange$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("removeRange", "removeRange$2", 0, [$0, $1], []));
  },
  _runHelper$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_runHelper", "_runHelper$0", 0, [], []));
  },
  exitScope$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("exitScope", "exitScope$0", 0, [], []));
  },
  $gt: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror(">", "$gt", 0, [$0], []));
  },
  _checkReplyTo$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_checkReplyTo", "_checkReplyTo$1", 0, [$0], []));
  },
  _callback$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_callback", "_callback$1", 0, [$0], []));
  },
  _liblib5$_callback$2: function($0, $1) {
    return this.noSuchMethod$1($.createInvocationMirror("_callback", "_liblib5$_callback$2", 0, [$0, $1], []));
  },
  process$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("process", "process$0", 0, [], []));
  },
  _scheduleUnhandledError$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_scheduleUnhandledError", "_scheduleUnhandledError$0", 0, [], []));
  },
  enqueue$3: function($0, $1, $2) {
    return this.noSuchMethod$1($.createInvocationMirror("enqueue", "enqueue$3", 0, [$0, $1, $2], []));
  },
  endObject$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("endObject", "endObject$0", 0, [], []));
  },
  cancel$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("cancel", "cancel$0", 0, [], []));
  },
  lastEntry$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("lastEntry", "lastEntry$0", 0, [], []));
  },
  ceil$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("ceil", "ceil$0", 0, [], []));
  },
  _matches$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_matches", "_matches$1", 0, [$0], []));
  },
  _deserializeRef$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_deserializeRef$1", 0, [$0], []));
  },
  _liblib5$_deserializeRef$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_liblib5$_deserializeRef$1", 0, [$0], []));
  },
  terminate$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("terminate", "terminate$0", 0, [], []));
  },
  $$dom_appendChild$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_appendChild", "$$dom_appendChild$1", 0, [$0], []));
  },
  reset$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("reset", "reset$0", 0, [], []));
  },
  catchError$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("catchError", "catchError$1", 0, [$0], []));
  },
  eval$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("eval", "eval$1", 0, [$0], []));
  },
  arrayElement$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("arrayElement", "arrayElement$0", 0, [], []));
  },
  _get_2$1: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_get_2", "_get_2$1", 0, [$0], []));
  },
  _tryResume$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_tryResume", "_tryResume$0", 0, [], []));
  },
  removeLast$0: function() {
    return this.noSuchMethod$1($.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
  },
  get$_liblib2$_id: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_id", "get$_liblib2$_id", 1, [], []));
  },
  get$_liblib5$_id: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_id", "get$_liblib5$_id", 1, [], []));
  },
  get$_previous: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_previous", "get$_previous", 1, [], []));
  },
  get$_handleError: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_handleError", "get$_handleError", 1, [], []));
  },
  get$_hasUnhandledError: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_hasUnhandledError", "get$_hasUnhandledError", 1, [], []));
  },
  get$_values: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_values", "get$_values", 1, [], []));
  },
  get$isNaN: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isNaN", "get$isNaN", 1, [], []));
  },
  get$$$dom_attributes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_attributes", "get$$$dom_attributes", 1, [], []));
  },
  get$_set: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_set", "get$_set", 1, [], []));
  },
  get$_isComplete: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_isComplete", "get$_isComplete", 1, [], []));
  },
  get$last: function() {
    return this.noSuchMethod$1($.createInvocationMirror("last", "get$last", 1, [], []));
  },
  get$sb: function() {
    return this.noSuchMethod$1($.createInvocationMirror("sb", "get$sb", 1, [], []));
  },
  get$length: function() {
    return this.noSuchMethod$1($.createInvocationMirror("length", "get$length", 1, [], []));
  },
  get$isWorker: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isWorker", "get$isWorker", 1, [], []));
  },
  get$_handleDone: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_handleDone", "get$_handleDone", 1, [], []));
  },
  get$future: function() {
    return this.noSuchMethod$1($.createInvocationMirror("future", "get$future", 1, [], []));
  },
  get$iterator: function() {
    return this.noSuchMethod$1($.createInvocationMirror("iterator", "get$iterator", 1, [], []));
  },
  get$id: function() {
    return this.noSuchMethod$1($.createInvocationMirror("id", "get$id", 1, [], []));
  },
  get$parent: function() {
    return this.noSuchMethod$1($.createInvocationMirror("parent", "get$parent", 1, [], []));
  },
  get$value: function() {
    return this.noSuchMethod$1($.createInvocationMirror("value", "get$value", 1, [], []));
  },
  get$contains: function() {
    return this.noSuchMethod$1($.createInvocationMirror("contains", "get$contains", 1, [], []));
  },
  get$_handleData: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_handleData", "get$_handleData", 1, [], []));
  },
  get$status: function() {
    return this.noSuchMethod$1($.createInvocationMirror("status", "get$status", 1, [], []));
  },
  get$_resultOrListeners: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_resultOrListeners", "get$_resultOrListeners", 1, [], []));
  },
  get$onClick: function() {
    return this.noSuchMethod$1($.createInvocationMirror("onClick", "get$onClick", 1, [], []));
  },
  get$onLoad: function() {
    return this.noSuchMethod$1($.createInvocationMirror("onLoad", "get$onLoad", 1, [], []));
  },
  get$_filtered: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_filtered", "get$_filtered", 1, [], []));
  },
  get$_next: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_next", "get$_next", 1, [], []));
  },
  get$_hasError: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_hasError", "get$_hasError", 1, [], []));
  },
  get$sendPort: function() {
    return this.noSuchMethod$1($.createInvocationMirror("sendPort", "get$sendPort", 1, [], []));
  },
  get$_portId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_portId", "get$_portId", 1, [], []));
  },
  get$_hasValue: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_hasValue", "get$_hasValue", 1, [], []));
  },
  get$_futurePort: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_futurePort", "get$_futurePort", 1, [], []));
  },
  get$children: function() {
    return this.noSuchMethod$1($.createInvocationMirror("children", "get$children", 1, [], []));
  },
  get$OAuth: function() {
    return this.noSuchMethod$1($.createInvocationMirror("OAuth", "get$OAuth", 1, [], []));
  },
  get$_setError: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_setError", "get$_setError", 1, [], []));
  },
  get$responseText: function() {
    return this.noSuchMethod$1($.createInvocationMirror("responseText", "get$responseText", 1, [], []));
  },
  get$element: function() {
    return this.noSuchMethod$1($.createInvocationMirror("element", "get$element", 1, [], []));
  },
  get$_registry: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_registry", "get$_registry", 1, [], []));
  },
  get$attributes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("attributes", "get$attributes", 1, [], []));
  },
  get$result: function() {
    return this.noSuchMethod$1($.createInvocationMirror("result", "get$result", 1, [], []));
  },
  get$source: function() {
    return this.noSuchMethod$1($.createInvocationMirror("source", "get$source", 1, [], []));
  },
  get$_canceled: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_canceled", "get$_canceled", 1, [], []));
  },
  get$activeTimerCount: function() {
    return this.noSuchMethod$1($.createInvocationMirror("activeTimerCount", "get$activeTimerCount", 1, [], []));
  },
  get$topEventLoop: function() {
    return this.noSuchMethod$1($.createInvocationMirror("topEventLoop", "get$topEventLoop", 1, [], []));
  },
  get$error: function() {
    return this.noSuchMethod$1($.createInvocationMirror("error", "get$error", 1, [], []));
  },
  get$$$dom_localName: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_localName", "get$$$dom_localName", 1, [], []));
  },
  get$_scopeIndices: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_scopeIndices", "get$_scopeIndices", 1, [], []));
  },
  get$style: function() {
    return this.noSuchMethod$1($.createInvocationMirror("style", "get$style", 1, [], []));
  },
  get$_keys: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_keys", "get$_keys", 1, [], []));
  },
  get$documentElement: function() {
    return this.noSuchMethod$1($.createInvocationMirror("documentElement", "get$documentElement", 1, [], []));
  },
  get$$$dom_childNodes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_childNodes", "get$$$dom_childNodes", 1, [], []));
  },
  get$_listenerName: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_listenerName", "get$_listenerName", 1, [], []));
  },
  get$nextIsolateId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId", "get$nextIsolateId", 1, [], []));
  },
  get$_liblib5$_receivePort: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_receivePort", "get$_liblib5$_receivePort", 1, [], []));
  },
  get$isEmpty: function() {
    return this.noSuchMethod$1($.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
  },
  get$currentContext: function() {
    return this.noSuchMethod$1($.createInvocationMirror("currentContext", "get$currentContext", 1, [], []));
  },
  get$_setValue: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_setValue", "get$_setValue", 1, [], []));
  },
  get$$$dom_lastElementChild: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_lastElementChild", "get$$$dom_lastElementChild", 1, [], []));
  },
  get$_liblib5$_callback: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_callback", "get$_liblib5$_callback", 1, [], []));
  },
  get$statusText: function() {
    return this.noSuchMethod$1($.createInvocationMirror("statusText", "get$statusText", 1, [], []));
  },
  get$$$dom_body: function() {
    return this.noSuchMethod$1($.createInvocationMirror("$dom_body", "get$$$dom_body", 1, [], []));
  },
  get$_nextListener: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_nextListener", "get$_nextListener", 1, [], []));
  },
  get$ports: function() {
    return this.noSuchMethod$1($.createInvocationMirror("ports", "get$ports", 1, [], []));
  },
  get$_tag: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_tag", "get$_tag", 1, [], []));
  },
  get$nodes: function() {
    return this.noSuchMethod$1($.createInvocationMirror("nodes", "get$nodes", 1, [], []));
  },
  get$_paused: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_paused", "get$_paused", 1, [], []));
  },
  get$_liblib5$_isolateId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_isolateId", "get$_liblib5$_isolateId", 1, [], []));
  },
  get$current: function() {
    return this.noSuchMethod$1($.createInvocationMirror("current", "get$current", 1, [], []));
  },
  get$stackTrace: function() {
    return this.noSuchMethod$1($.createInvocationMirror("stackTrace", "get$stackTrace", 1, [], []));
  },
  get$_workerId: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_workerId", "get$_workerId", 1, [], []));
  },
  get$listener: function() {
    return this.noSuchMethod$1($.createInvocationMirror("listener", "get$listener", 1, [], []));
  },
  get$_serialized: function() {
    return this.noSuchMethod$1($.createInvocationMirror("_serialized", "get$_serialized", 1, [], []));
  },
  set$_previous: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_previous=", "set$_previous", 2, [$0], []));
  },
  set$marginLeft: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("marginLeft=", "set$marginLeft", 2, [$0], []));
  },
  set$display: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("display=", "set$display", 2, [$0], []));
  },
  set$_handle: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_handle=", "set$_handle", 2, [$0], []));
  },
  set$marginRight: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("marginRight=", "set$marginRight", 2, [$0], []));
  },
  set$value: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("value=", "set$value", 2, [$0], []));
  },
  set$src: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("src=", "set$src", 2, [$0], []));
  },
  set$_nextListener: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_nextListener=", "set$_nextListener", 2, [$0], []));
  },
  set$type: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("type=", "set$type", 2, [$0], []));
  },
  set$width: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("width=", "set$width", 2, [$0], []));
  },
  set$activeTimerCount: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("activeTimerCount=", "set$activeTimerCount", 2, [$0], []));
  },
  set$$float: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("float=", "set$$float", 2, [$0], []));
  },
  set$text: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("text=", "set$text", 2, [$0], []));
  },
  set$innerHtml: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("innerHtml=", "set$innerHtml", 2, [$0], []));
  },
  set$height: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("height=", "set$height", 2, [$0], []));
  },
  set$_next: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("_next=", "set$_next", 2, [$0], []));
  },
  set$onGetAuthToken: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("onGetAuthToken=", "set$onGetAuthToken", 2, [$0], []));
  },
  set$length: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("length=", "set$length", 2, [$0], []));
  },
  set$nextIsolateId: function($0) {
    return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId=", "set$nextIsolateId", 2, [$0], []));
  }
};

$$.ObjectInterceptor = {
  "": function ObjectInterceptor() {
  },
  "super": "Object",
  get$length: function(receiver) {
    return receiver.get$length();
  },
  $eq: function(receiver, a0) {
    return receiver.$eq(a0);
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  substring$2: function(receiver, a0, a1) {
    return receiver.substring$2(a0, a1);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  $index: function(receiver, a0) {
    return receiver.$index(a0);
  },
  $indexSet: function(receiver, a0, a1) {
    return receiver.$indexSet(a0, a1);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase$0();
  },
  $ge: function(receiver, a0) {
    return receiver.$ge(a0);
  },
  removeRange$2: function(receiver, a0, a1) {
    return receiver.removeRange$2(a0, a1);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  $lt: function(receiver, a0) {
    return receiver.$lt(a0);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  $mul: function(receiver, a0) {
    return receiver.$mul(a0);
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  concat$1: function(receiver, a0) {
    return receiver.concat$1(a0);
  },
  getRange$2: function(receiver, a0, a1) {
    return receiver.getRange$2(a0, a1);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  contains$1: function(receiver, a0) {
    return receiver.contains$1(a0);
  },
  get$isNaN: function(receiver) {
    return receiver.get$isNaN();
  },
  addAll$1: function(receiver, a0) {
    return receiver.addAll$1(a0);
  },
  removeAll$1: function(receiver, a0) {
    return receiver.removeAll$1(a0);
  },
  $shr: function(receiver, a0) {
    return receiver.$shr(a0);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  $add: function(receiver, a0) {
    return receiver.$add(a0);
  },
  get$last: function(receiver) {
    return receiver.get$last();
  },
  $tdiv: function(receiver, a0) {
    return receiver.$tdiv(a0);
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  $and: function(receiver, a0) {
    return receiver.$and(a0);
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  where$1: function(receiver, a0) {
    return receiver.where$1(a0);
  },
  $shl: function(receiver, a0) {
    return receiver.$shl(a0);
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  $sub: function(receiver, a0) {
    return receiver.$sub(a0);
  },
  startsWith$1: function(receiver, a0) {
    return receiver.startsWith$1(a0);
  },
  toSet$0: function(receiver) {
    return receiver.toSet$0();
  },
  $or: function(receiver, a0) {
    return receiver.$or(a0);
  },
  removeMatching$1: function(receiver, a0) {
    return receiver.removeMatching$1(a0);
  },
  $xor: function(receiver, a0) {
    return receiver.$xor(a0);
  },
  get$contains: function(receiver) {
    return receiver.get$contains();
  },
  $gt: function(receiver, a0) {
    return receiver.$gt(a0);
  },
  $le: function(receiver, a0) {
    return receiver.$le(a0);
  },
  mappedBy$1: function(receiver, a0) {
    return receiver.mappedBy$1(a0);
  }
};

$$.JSFunction = {
  "": function JSFunction() {
  },
  "super": "Object",
  toString$0: function(receiver) {
    return "Closure";
  },
  $isFunction: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {
  "": function JSBool() {
  },
  "super": "Object",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {
  "": function JSNull() {
  },
  "super": "Object",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {
  "": function JSArray() {
  },
  "super": "Object",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; $.$$lt(i, receiver.length); ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= receiver.length)
        throw $.ioore(i);
      if ($.boolConversionCheck($.$$eq(receiver[i], element))) {
        receiver.splice(i, 1);
        return;
      }
    }
  },
  removeAll$1: function(receiver, elements) {
    $.IterableMixinWorkaround_removeAllList(receiver, elements);
  },
  removeMatching$1: function(receiver, test) {
    $.IterableMixinWorkaround_removeMatchingList(receiver, $.functionTypeCheck(test));
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, $.functionTypeCheck(f));
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.iterator(collection); $.boolConversionCheck(t1.moveNext$0());)
      this.add$1(receiver, t1.get$current());
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = this.get$iterator(receiver); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(receiver, f) {
    return $.MappedList$(receiver, $.functionTypeCheck(f));
  },
  getRange$2: function(receiver, start, length) {
    var t1, end;
    if (0 === length)
      return [];
    $.checkNull(start);
    $.checkNull(length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof length === "number" && Math.floor(length) === length))
      throw $.$$throw($.ArgumentError$(length));
    t1 = length < 0;
    if (t1)
      throw $.$$throw($.ArgumentError$(length));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    end = start + length;
    if (end > receiver.length)
      throw $.$$throw($.RangeError$value(length));
    if (t1)
      throw $.$$throw($.ArgumentError$(length));
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, length) {
    var receiverLength, t1, t2;
    $.intTypeCheck(start);
    $.intTypeCheck(length);
    $.checkGrowable(receiver, "removeRange");
    if (length === 0)
      return;
    $.checkNull(start);
    $.checkNull(length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof length === "number" && Math.floor(length) === length))
      throw $.$$throw($.ArgumentError$(length));
    if (length < 0)
      throw $.$$throw($.ArgumentError$(length));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + length;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - length;
    $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  indexOf$2: function(receiver, element, start) {
    $.intTypeCheck(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.intTypeCheck($.Arrays_indexOf(receiver, element, start, receiver.length));
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; $.$$lt(i, receiver.length); ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= receiver.length)
        throw $.ioore(i);
      if ($.boolConversionCheck(t1.$eq(other, receiver[i])))
        return true;
    }
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure0(this, "contains$1", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.stringTypeCheck($.Collections_collectionToString(receiver));
  },
  toList$0: function(receiver) {
    var t1 = $.List_List$from(receiver, $.getRuntimeTypeInfo(receiver)[0]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(receiver)[0]]);
    return t1;
  },
  toSet$0: function(receiver) {
    return $.propertyTypeCheck($.Set_Set$from(receiver, $.getRuntimeTypeInfo(receiver)[0]), "$isSet");
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver, $.getRuntimeTypeInfo(receiver)[0]);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    $.intTypeCheck(newLength);
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    $.intTypeCheck(index);
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {
  "": function JSNumber() {
  },
  "super": "Object",
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  truncate$0: function(receiver) {
    return $.numTypeCheck(receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver));
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    $.numTypeCheck(other);
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    return $.numTypeCheck(this.truncate$0(receiver / other));
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    $.numTypeCheck(other);
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    $.numTypeCheck(other);
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    $.numTypeCheck(other);
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return $.boolTypeCheck(receiver < other);
  },
  $gt: function(receiver, other) {
    $.numTypeCheck(other);
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return $.boolTypeCheck(receiver > other);
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return $.boolTypeCheck(receiver <= other);
  },
  $ge: function(receiver, other) {
    $.numTypeCheck(other);
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return $.boolTypeCheck(receiver >= other);
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {
  "": function JSInt() {
  },
  "super": "JSNumber",
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {
  "": function JSDouble() {
  },
  "super": "JSNumber",
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {
  "": function JSString() {
  },
  "super": "Object",
  charCodeAt$1: function(receiver, index) {
    if (!(typeof index === "number"))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.stringTypeCheck(str);
    $.checkString(str);
    return $.listSuperNativeTypeCheck($.allMatchesInStringUnchecked(receiver, str), "$isIterable");
  },
  concat$1: function(receiver, other) {
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringTypeCheck($.stringReplaceAllUnchecked(receiver, from, to));
  },
  startsWith$1: function(receiver, other) {
    var otherLength;
    $.checkString(other);
    otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.intTypeCheck(startIndex);
    $.intTypeCheck(endIndex);
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$JSNumber(startIndex);
    if (t1.$lt(startIndex, 0))
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt(endIndex, receiver.length))
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  indexOf$2: function(receiver, other, start) {
    $.stringTypeCheck(other);
    $.intTypeCheck(start);
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  contains$2: function(receiver, other, startIndex) {
    $.stringTypeCheck(other);
    $.intTypeCheck(startIndex);
    $.checkNull(other);
    return $.boolTypeCheck($.stringContainsUnchecked(receiver, other, startIndex));
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure1(this, "contains$2", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var i, hash, t1, hash0, hash1;
    for (i = 0, hash = 0; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, receiver.length); i = $.intTypeCheck(t1.$add(i, 1)), hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    $.intTypeCheck(index);
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $isPattern: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$._HashMapImpl = {
  "": function _HashMapImpl(_keys, _values, _loadLimit, _numberOfEntries, _numberOfDeleted) {
    this._keys = _keys;
    this._values = _values;
    this._loadLimit = _loadLimit;
    this._numberOfEntries = _numberOfEntries;
    this._numberOfDeleted = _numberOfDeleted;
  },
  "super": "Object",
  get$_keys: function() {
    return this._keys;
  },
  get$_values: function() {
    return this._values;
  },
  _probeForAdding$1: function(key) {
    var t1, t3, hash, numberOfProbes, insertionIndex, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.hashCode(key);
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    t3 = $.length(this._keys);
    if (t3 !== (t3 | 0))
      return this._probeForAdding$1$bailout(2, key, t1, t3);
    hash = (t1 & t3 - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = $.$$index(this._keys, hash);
      if (t1 == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.boolConversionCheck($.$$eq(t1, key)))
        return hash;
      else if (insertionIndex < 0 && t1 === $.CONSTANT3)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.length(this._keys));
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(5, key, numberOfProbes0, null, hash, null, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, key, t1, t3, hash, numberOfProbes, insertionIndex) {
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.hashCode(key);
      case 1:
        state0 = 0;
        t3 = $.length(this._keys);
      case 2:
        state0 = 0;
        $.intTypeCheck(t1);
        $.intTypeCheck(t3);
        t1 = $.$$and(t1, $.$$sub(t3, 1));
        $.intTypeCheck(t1);
      case 3:
        state0 = 0;
        hash = t1;
        numberOfProbes = 1;
        insertionIndex = -1;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = $.$$index(this._keys, hash);
                if (t1 == null) {
                  if ($.$$lt(insertionIndex, 0))
                    return hash;
                  return insertionIndex;
                } else if ($.boolConversionCheck($.$$eq(t1, key)))
                  return hash;
                else if ($.$$lt(insertionIndex, 0) && t1 === $.CONSTANT3)
                  insertionIndex = hash;
                t1 = $.$$add(numberOfProbes, 1);
                $.intTypeCheck(t1);
              case 4:
                state0 = 0;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.length(this._keys));
              case 5:
                state0 = 0;
                numberOfProbes = t1;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var t1, t2, hash, numberOfProbes, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.hashCode(key);
    t2 = $.length(this._keys);
    $.intTypeCheck(t1);
    $.intTypeCheck(t2);
    hash = $.intTypeCheck($.$$and(t1, $.$$sub(t2, 1)));
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = $.$$index(this._keys, hash);
      if (t1 == null)
        return -1;
      if ($.boolConversionCheck($.$$eq(t1, key)))
        return hash;
      numberOfProbes0 = $.intTypeCheck($.$$add(numberOfProbes, 1));
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.length(this._keys));
    }
  },
  _ensureCapacity$0: function() {
    var newNumberOfEntries, numberOfFree;
    newNumberOfEntries = $.intTypeCheck($.$$add(this._numberOfEntries, 1));
    if ($.$$ge(newNumberOfEntries, this._loadLimit)) {
      this._grow$1($.$$mul($.length(this._keys), 2));
      return;
    }
    numberOfFree = $.intTypeCheck($.$$sub($.intTypeCheck($.$$sub($.intTypeCheck($.length(this._keys)), newNumberOfEntries)), this._numberOfDeleted));
    if ($.boolConversionCheck($.$$gt(this._numberOfDeleted, numberOfFree)))
      this._grow$1($.length(this._keys));
  },
  _grow$1: function(newCapacity) {
    var t1, capacity, oldKeys, oldValues, t2, i, t3, key, value, newIndex;
    $.intTypeCheck(newCapacity);
    t1 = $.getInterceptor$JSNumber(newCapacity);
    $.assertHelper($.boolTypeCheck($.$$eq(t1.$and(newCapacity, t1.$sub(newCapacity, 1)), 0)));
    capacity = $.intTypeCheck($.length(this._keys));
    this._loadLimit = $.intTypeCheck($.$$tdiv(t1.$mul(newCapacity, 3), 4));
    oldKeys = $.listTypeCheck(this._keys);
    oldValues = $.listTypeCheck(this._values);
    t2 = $.List_List$fixedLength(newCapacity, null);
    $.setRuntimeTypeInfo(t2, []);
    this._keys = t2;
    t2 = $.List_List$fixedLength(newCapacity, null, $.getRuntimeTypeInfo(this)[1]);
    $.setRuntimeTypeInfo(t2, [$.getRuntimeTypeInfo(this)[1]]);
    this._values = t2;
    for (t1 = $.getInterceptor$JSStringJSArray(oldKeys), t2 = $.getInterceptor$JSStringJSArray(oldValues), i = 0; t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, capacity); i = $.intTypeCheck(t3.$add(i, 1))) {
      key = t1.$index(oldKeys, i);
      if (key == null || key === $.CONSTANT3)
        continue;
      value = t2.$index(oldValues, i);
      newIndex = $.intTypeCheck(this._probeForAdding$1(key));
      $.$$indexSet(this._keys, newIndex, key);
      $.$$indexSet(this._values, newIndex, value);
    }
    this._numberOfDeleted = 0;
  },
  clear$0: function() {
    var length, i, t1;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    length = $.intTypeCheck($.length(this._keys));
    for (i = 0; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, length); i = $.intTypeCheck(t1.$add(i, 1))) {
      $.$$indexSet(this._keys, i, null);
      $.$$indexSet(this._values, i, null);
    }
  },
  $indexSet: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    $.intTypeCheck(index);
    if ($.$$index(this._keys, index) == null || $.$$index(this._keys, index) === $.CONSTANT3) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.$$indexSet$bailout(1, key, value, t1, index);
      this._numberOfEntries = $.intTypeCheck(t1 + 1);
    }
    $.$$indexSet(this._keys, index, key);
    $.$$indexSet(this._values, index, value);
  },
  $$indexSet$bailout: function(state0, key, value, t1, index) {
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        $.intTypeCheck(index);
      case 1:
        if (state0 === 1 || state0 === 0 && ($.$$index(this._keys, index) == null || $.$$index(this._keys, index) === $.CONSTANT3))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.intTypeCheck($.$$add(t1, 1));
          }
        $.$$indexSet(this._keys, index, key);
        $.$$indexSet(this._values, index, value);
    }
  },
  $index: function(key) {
    var index = $.intTypeCheck(this._probeForLookup$1(key));
    if ($.$$lt(index, 0))
      return;
    return $.$$index(this._values, index);
  },
  remove$1: function(key) {
    var index, t1, t3;
    index = this._probeForLookup$1(key);
    $.intTypeCheck(index);
    if ($.$$ge(index, 0)) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.remove$1$bailout(1, index, t1);
      this._numberOfEntries = $.intTypeCheck(t1 - 1);
      t1 = $.$$index(this._values, index);
      $.$$indexSet(this._values, index, null);
      $.$$indexSet(this._keys, index, $.CONSTANT3);
      t3 = this._numberOfDeleted;
      if (typeof t3 !== "number")
        return this.remove$1$bailout(2, null, t1, t3);
      this._numberOfDeleted = $.intTypeCheck(t3 + 1);
      return t1;
    }
    return;
  },
  remove$1$bailout: function(state0, index, t1, t3) {
    switch (state0) {
      case 0:
        index = this._probeForLookup$1(key);
        $.intTypeCheck(index);
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && $.$$ge(index, 0))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.intTypeCheck($.$$sub(t1, 1));
              t1 = $.$$index(this._values, index);
              $.$$indexSet(this._values, index, null);
              $.$$indexSet(this._keys, index, $.CONSTANT3);
              t3 = this._numberOfDeleted;
            case 2:
              state0 = 0;
              this._numberOfDeleted = $.intTypeCheck($.$$add(t3, 1));
              return t1;
          }
        return;
    }
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq(this._numberOfEntries, 0));
  },
  get$length: function() {
    return $.intTypeCheck(this._numberOfEntries);
  },
  forEach$1: function(f) {
    var it;
    $.functionTypeCheck(f);
    it = $._HashMapImplIndexIterator$(this);
    for (; $.boolConversionCheck(it.moveNext$0());)
      f.call$2($.$$index(this._keys, it.get$current()), $.$$index(this._values, it.get$current()));
  },
  get$keys: function() {
    return $._HashMapImplKeyIterable$(this, $.getRuntimeTypeInfo(this)[0]);
  },
  get$values: function() {
    return $._HashMapImplValueIterable$(this, $.getRuntimeTypeInfo(this)[1]);
  },
  containsKey$1: function(key) {
    return $.$$eq(this._probeForLookup$1(key), -1) !== true;
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $.intTypeCheck($._HashMapImpl__computeLoadLimit(8));
    var t1 = $.List_List$fixedLength(8, null);
    $.setRuntimeTypeInfo(t1, []);
    this._keys = t1;
    t1 = $.List_List$fixedLength(8, null, $.getRuntimeTypeInfo(this)[1]);
    $.setRuntimeTypeInfo(t1, [$.getRuntimeTypeInfo(this)[1]]);
    this._values = t1;
  },
  $is_HashMapImpl: true,
  $isHashMap: true,
  $isMap: function() {
    return true;
  }
};

$$._HashMapImplKeyIterable = {
  "": function _HashMapImplKeyIterable(_map) {
    this._map = _map;
  },
  "super": "Iterable",
  get$iterator: function() {
    return $._HashMapImplKeyIterator$(this._map, $.getRuntimeTypeInfo(this)[0]);
  }
};

$$._HashMapImplValueIterable = {
  "": function _HashMapImplValueIterable(_map) {
    this._map = _map;
  },
  "super": "Iterable",
  get$iterator: function() {
    return $._HashMapImplValueIterator$(this._map, $.getRuntimeTypeInfo(this)[0]);
  }
};

$$._HashMapImplIterator = {
  "": function _HashMapImplIterator() {
  },
  "super": "Object",
  moveNext$0: function() {
    var t1, t2, t3, newIndex;
    t1 = this._map;
    t2 = $.length(t1.get$_keys());
    $.intTypeCheck(t2);
    t3 = this._index;
    if (t3 !== (t3 | 0))
      return this.moveNext$0$bailout1(1, t2, t1, t3);
    newIndex = t3 + 1;
    for (; $.CONSTANT1.$lt(newIndex, t2);) {
      t3 = $.$$index(t1.get$_keys(), newIndex);
      if (!(t3 == null) && !(t3 === $.CONSTANT3)) {
        this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t1.get$_keys(), t1.get$_values());
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = t2;
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout1: function(state0, t2, t1, t3, newIndex) {
    switch (state0) {
      case 0:
        t1 = this._map;
        t2 = $.length(t1.get$_keys());
        $.intTypeCheck(t2);
        t3 = this._index;
      case 1:
        state0 = 0;
        t3 = $.$$add(t3, 1);
        $.intTypeCheck(t3);
      case 2:
        state0 = 0;
        newIndex = t3;
      case 3:
        var t4;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = $.getInterceptor$JSNumber(newIndex);
                if (!t3.$lt(newIndex, t2))
                  break L0;
                t4 = $.$$index(t1.get$_keys(), newIndex);
                if (!(t4 == null) && !(t4 === $.CONSTANT3)) {
                  this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t1.get$_keys(), t1.get$_values());
                  this._index = newIndex;
                  return true;
                }
                newIndex = t3.$add(newIndex, 1);
                $.intTypeCheck(newIndex);
              case 3:
                state0 = 0;
            }
        this._index = t2;
        this._liblib0$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib0$_current;
  },
  $isIterator: true
};

$$._HashMapImplKeyIterator = {
  "": function _HashMapImplKeyIterator(_map, _index, _liblib0$_current) {
    this._map = _map;
    this._index = _index;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "_HashMapImplIterator",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    $.listTypeCheck(keys);
    $.listTypeCheck(values);
    return $.$$index(keys, index);
  }
};

$$._HashMapImplValueIterator = {
  "": function _HashMapImplValueIterator(_map, _index, _liblib0$_current) {
    this._map = _map;
    this._index = _index;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "_HashMapImplIterator",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    $.listTypeCheck(keys);
    return $.$$index($.listTypeCheck(values), index);
  }
};

$$._HashMapImplIndexIterator = {
  "": function _HashMapImplIndexIterator(_map, _index, _liblib0$_current) {
    this._map = _map;
    this._index = _index;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "_HashMapImplIterator",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    $.listTypeCheck(keys);
    $.listTypeCheck(values);
    return index;
  }
};

$$._DeletedKeySentinel = {
  "": function _DeletedKeySentinel() {
  },
  "super": "Object"
};

$$._KeyValuePair = {
  "": function _KeyValuePair(key, value) {
    this.key = key;
    this.value = value;
  },
  "super": "Object",
  get$key: function() {
    return this.key;
  },
  get$value: function() {
    return this.value;
  },
  set$value: function(v) {
    this.value = v;
  },
  $is_KeyValuePair: true
};

$$._LinkedHashMapImpl = {
  "": function _LinkedHashMapImpl(_liblib0$_list, _map) {
    this._liblib0$_list = _liblib0$_list;
    this._map = _map;
  },
  "super": "Object",
  $indexSet: function(key, value) {
    var t1, t3;
    if ($.boolConversionCheck(this._map.containsKey$1(key))) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.$$indexSet$bailout0(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      $.addLast(this._liblib0$_list, $._KeyValuePair$(key, value, $.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[1]));
      t1 = this._map;
      t3 = this._liblib0$_list.lastEntry$0();
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
        return this.$$indexSet$bailout0(2, key, null, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  $$indexSet$bailout0: function(state0, key, value, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 1 || state0 === 0 && $.boolConversionCheck(this._map.containsKey$1(key)))
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.$$index(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              $.addLast(this._liblib0$_list, $._KeyValuePair$(key, value, $.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[1]));
              t1 = this._map;
            case 2:
              state0 = 0;
              $.$$indexSet(t1, key, this._liblib0$_list.lastEntry$0());
          }
    }
  },
  $index: function(key) {
    var t1, entry;
    t1 = this._map;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    entry = $.propertyTypeCheck(t1[key], "$isDoubleLinkedQueueEntry");
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  $$index$bailout: function(state0, key, t1) {
    var entry = $.propertyTypeCheck($.$$index(t1, key), "$isDoubleLinkedQueueEntry");
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  remove$1: function(key) {
    var entry = $.propertyTypeCheck($.remove(this._map, key), "$isDoubleLinkedQueueEntry");
    if (entry == null)
      return;
    entry.remove$0();
    return entry.get$element().get$value();
  },
  get$keys: function() {
    var t1, t2, t3;
    t1 = this._liblib0$_list;
    t2 = new $._LinkedHashMapImpl_keys_anon();
    t3 = $.getRuntimeTypeInfo(this);
    return $.MappedIterable$(t1, t2, [$._KeyValuePair, t3[0], t3[1]], $.getRuntimeTypeInfo(this)[0]);
  },
  get$values: function() {
    var t1, t2, t3;
    t1 = this._liblib0$_list;
    t2 = new $._LinkedHashMapImpl_values_anon();
    t3 = $.getRuntimeTypeInfo(this);
    return $.MappedIterable$(t1, t2, [$._KeyValuePair, t3[0], t3[1]], $.getRuntimeTypeInfo(this)[1]);
  },
  forEach$1: function(f) {
    $.functionTypeCheck(f);
    $.forEach(this._liblib0$_list, new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return $.boolTypeCheck(this._map.containsKey$1(key));
  },
  get$length: function() {
    return $.intTypeCheck($.length(this._map));
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  clear$0: function() {
    $.clear(this._map);
    $.clear(this._liblib0$_list);
  },
  toString$0: function() {
    return $.stringTypeCheck($.Maps_mapToString(this));
  },
  _LinkedHashMapImpl$0: function() {
    var t1, t2;
    t1 = $.getRuntimeTypeInfo(this)[0];
    t2 = $.getRuntimeTypeInfo(this);
    this._map = $.propertyTypeCheck($.HashMap_HashMap(t1, [$.DoubleLinkedQueueEntry, [$._KeyValuePair, t2[0], t2[1]]]), "$isHashMap");
    t1 = $.getRuntimeTypeInfo(this);
    this._liblib0$_list = $.DoubleLinkedQueue$([$._KeyValuePair, t1[0], t1[1]]);
  },
  $isHashMap: true,
  $isMap: function() {
    return true;
  }
};

$$.DoubleLinkedQueueEntry = {
  "": function DoubleLinkedQueueEntry(_previous, _next, _element) {
    this._previous = _previous;
    this._next = _next;
    this._element = _element;
  },
  "super": "Object",
  set$_previous: function(v) {
    this._previous = $.propertyTypeCheck(v, "$isDoubleLinkedQueueEntry");
  },
  get$_previous: function() {
    return this._previous;
  },
  set$_next: function(v) {
    this._next = $.propertyTypeCheck(v, "$isDoubleLinkedQueueEntry");
  },
  get$_next: function() {
    return this._next;
  },
  _link$2: function(p, n) {
    $.propertyTypeCheck(p, "$isDoubleLinkedQueueEntry");
    $.propertyTypeCheck(n, "$isDoubleLinkedQueueEntry");
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this)[0])._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return $.propertyTypeCheck(this._previous._asNonSentinelEntry$0(), "$isDoubleLinkedQueueEntry");
  },
  nextEntry$0: function() {
    return $.propertyTypeCheck(this._next._asNonSentinelEntry$0(), "$isDoubleLinkedQueueEntry");
  },
  get$element: function() {
    return this._element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._element = e;
  },
  $isDoubleLinkedQueueEntry: true
};

$$._DoubleLinkedQueueEntrySentinel = {
  "": function _DoubleLinkedQueueEntrySentinel(_previous, _next, _element) {
    this._previous = _previous;
    this._next = _next;
    this._element = _element;
  },
  "super": "DoubleLinkedQueueEntry",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  },
  $is_DoubleLinkedQueueEntrySentinel: true
};

$$.DoubleLinkedQueue = {
  "": function DoubleLinkedQueue(_sentinel) {
    this._sentinel = _sentinel;
  },
  "super": "Iterable",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.iterator(iterable); $.boolConversionCheck(t1.moveNext$0());) {
      t2 = t1.get$current();
      this._sentinel.prepend$1(t2);
    }
  },
  removeLast$0: function() {
    return this._sentinel.get$_previous().remove$0();
  },
  removeFirst$0: function() {
    return this._sentinel.get$_next().remove$0();
  },
  remove$1: function(o) {
    var entry, t1;
    entry = $.propertyTypeCheck(this._sentinel.nextEntry$0(), "$isDoubleLinkedQueueEntry");
    for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1);) {
      if ($.boolConversionCheck($.$$eq(entry.get$element(), o))) {
        entry.remove$0();
        return;
      }
      entry = $.propertyTypeCheck(entry.get$_next(), "$isDoubleLinkedQueueEntry");
    }
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAllList(this, elements);
  },
  removeMatching$1: function(test) {
    var entry, t1, next;
    $.functionTypeCheck(test);
    entry = $.propertyTypeCheck(this._sentinel.nextEntry$0(), "$isDoubleLinkedQueueEntry");
    for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1); entry = next) {
      next = $.propertyTypeCheck(entry.get$_next(), "$isDoubleLinkedQueueEntry");
      if ($.boolConversionCheck(test.call$1(entry.get$element())))
        entry.remove$0();
    }
  },
  get$last: function() {
    return this._sentinel.get$_previous().get$element();
  },
  lastEntry$0: function() {
    return $.propertyTypeCheck(this._sentinel.previousEntry$0(), "$isDoubleLinkedQueueEntry");
  },
  get$isEmpty: function() {
    var t1, t2;
    t1 = this._sentinel;
    t2 = t1.get$_next();
    return t2 == null ? t1 == null : t2 === t1;
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1.set$_next(t1);
    t1 = this._sentinel;
    t1.set$_previous(t1);
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel, $.getRuntimeTypeInfo(this)[0]);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$($.getRuntimeTypeInfo(this)[0]);
  },
  $isDoubleLinkedQueue: true,
  $isQueue: true,
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {
  "": function _DoubleLinkedQueueIterator(_sentinel, _currentEntry, _liblib0$_current) {
    this._sentinel = _sentinel;
    this._currentEntry = _currentEntry;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null) {
      $.assertHelper(this._liblib0$_current == null);
      return false;
    }
    this._currentEntry = $.propertyTypeCheck(t1.get$_next(), "$isDoubleLinkedQueueEntry");
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._liblib0$_current = null;
      this._sentinel = null;
      return false;
    }
    this._liblib0$_current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._liblib0$_current;
  },
  $isIterator: true
};

$$.HashSet = {
  "": function HashSet(_backingMap) {
    this._backingMap = _backingMap;
  },
  "super": "Collection",
  clear$0: function() {
    this._backingMap.clear$0();
  },
  add$1: function(value) {
    this._backingMap.$indexSet(value, value);
  },
  remove$1: function(value) {
    var t1, t2;
    t1 = this._backingMap;
    t2 = t1.containsKey$1(value);
    $.boolConversionCheck(t2);
    if (typeof t2 !== "boolean")
      return this.remove$1$bailout0(1, value, t1, t2);
    if (!t2)
      return false;
    t1.remove$1(value);
    return true;
  },
  remove$1$bailout0: function(state0, value, t1, t2) {
    if (!t2)
      return false;
    t1.remove$1(value);
    return true;
  },
  contains$1: function(value) {
    return $.boolTypeCheck(this._backingMap.containsKey$1(value));
  },
  get$contains: function() {
    return new $.BoundClosure2(this, "contains$1");
  },
  forEach$1: function(f) {
    $.functionTypeCheck(f);
    this._backingMap.forEach$1(new $.HashSet_forEach_anon(f));
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.isEmpty(this._backingMap));
  },
  get$length: function() {
    return $.intTypeCheck($.length(this._backingMap));
  },
  get$iterator: function() {
    return $._HashSetIterator$(this, $.getRuntimeTypeInfo(this)[0]);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  $isSet: true,
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._HashSetIterator = {
  "": function _HashSetIterator(_keysIterator) {
    this._keysIterator = _keysIterator;
  },
  "super": "Object",
  get$current: function() {
    var result = this._keysIterator.get$current();
    if (result === $.CONSTANT3)
      throw $.$$throw($.StateError$("Concurrent modification."));
    return result;
  },
  moveNext$0: function() {
    var t1, result, t2;
    t1 = this._keysIterator;
    do {
      result = $.boolTypeCheck(t1.moveNext$0());
      if (result)
        t2 = t1.get$current() == null || t1.get$current() === $.CONSTANT3;
      else
        t2 = false;
    } while (t2);
    return result;
  },
  $isIterator: true
};

$$.MappedIterable = {
  "": function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  },
  "super": "Iterable",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    return $.MappedIterator$($.iterator(this._iterable), this._f, $.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[1]);
  },
  get$length: function() {
    return $.intTypeCheck($.length(this._iterable));
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.isEmpty(this._iterable));
  }
};

$$.MappedIterator = {
  "": function MappedIterator(_liblib$_current, _iterator, _f) {
    this._liblib$_current = _liblib$_current;
    this._iterator = _iterator;
    this._f = _f;
  },
  "super": "Iterator",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if ($.boolConversionCheck(t1.moveNext$0())) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    } else {
      this._liblib$_current = null;
      return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.WhereIterable = {
  "": function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  },
  "super": "Iterable",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    return $.WhereIterator$($.iterator(this._iterable), this._f, $.getRuntimeTypeInfo(this)[0]);
  }
};

$$.WhereIterator = {
  "": function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  },
  "super": "Iterator",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; $.boolConversionCheck(t1.moveNext$0());)
      if ($.boolConversionCheck(this._f$1(t1.get$current())))
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.ListBase = {
  "": function ListBase() {
  },
  "super": "Collection",
  get$iterator: function() {
    return $.ListIterator$(this);
  },
  forEach$1: function(f) {
    var t1, i, t2;
    $.functionTypeCheck(f);
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = 0; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, t1.get$length(this)); i = $.intTypeCheck(t2.$add(i, 1)))
      f.call$1(this.$index(i));
  },
  contains$1: function(value) {
    var t1, i, t2;
    t1 = $.getInterceptor$JSStringJSArray(this);
    i = 0;
    while (true) {
      t2 = t1.get$length(this);
      if (typeof t2 !== "number")
        return this.contains$1$bailout(1, value, t2, i);
      if (!(i < t2))
        break;
      if ($.boolConversionCheck($.$$eq(this.$index(i), value)))
        return true;
      ++i;
    }
    return false;
  },
  contains$1$bailout: function(state0, value, t2, i, t1) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(this);
        i = 0;
      default:
        var t4;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(this);
              case 1:
                state0 = 0;
                t4 = $.getInterceptor$JSNumber(i);
                if (!t4.$lt(i, t2))
                  break L0;
                if ($.boolConversionCheck($.$$eq(this.$index(i), value)))
                  return true;
                i = t4.$add(i, 1);
                $.intTypeCheck(i);
              case 2:
                state0 = 0;
            }
        return false;
    }
  },
  get$contains: function() {
    return new $.BoundClosure3(this, "contains$1");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  indexOf$2: function(value, start) {
    var t1, i;
    $.intTypeCheck(start);
    if (start !== (start | 0))
      return this.indexOf$2$bailout(1, value, start);
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = start; $.CONSTANT1.$lt(i, t1.get$length(this)); ++i)
      if ($.boolConversionCheck($.$$eq(this.$index(i), value)))
        return i;
    return -1;
  },
  indexOf$2$bailout: function(state0, value, start, t1, i) {
    switch (state0) {
      case 0:
        $.intTypeCheck(start);
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(this);
        i = start;
      case 2:
        var t2;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = $.getInterceptor$JSNumber(i);
                if (!t2.$lt(i, t1.get$length(this)))
                  break L0;
                if ($.boolConversionCheck($.$$eq(this.$index(i), value)))
                  return i;
                i = t2.$add(i, 1);
                $.intTypeCheck(i);
              case 2:
                state0 = 0;
            }
        return -1;
    }
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return this.$index($.$$sub(t1.get$length(this), 1));
    throw $.$$throw($.StateError$("No elements"));
  },
  getRange$2: function(start, length) {
    var result, i;
    if (start !== (start | 0))
      return this.getRange$2$bailout(1, start, length);
    result = [];
    for (i = 0; $.$$lt(i, length); i = $.intTypeCheck(i + 1)) {
      if (typeof i !== "number")
        throw $.iae(i);
      $.CONSTANT0.add$1(result, this.$index(start + i));
    }
    return result;
  },
  getRange$2$bailout: function(state0, start, length) {
    var result, t1, i, t2;
    result = [];
    for (t1 = $.getInterceptor$JSNumber(start), i = 0; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, length); i = $.intTypeCheck(t2.$add(i, 1)))
      $.CONSTANT0.add$1(result, this.$index(t1.$add(start, i)));
    return result;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  toString$0: function() {
    return $.stringTypeCheck(this.get$Collections().collectionToString$1(this));
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$.UnmodifiableListBase = {
  "": function UnmodifiableListBase() {
  },
  "super": "ListBase",
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  set$length: function(newLength) {
    $.intTypeCheck(newLength);
    throw $.$$throw($.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear an unmodifiable list"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeRange$2: function(start, length) {
    $.intTypeCheck(start);
    $.intTypeCheck(length);
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  }
};

$$.ListIterator = {
  "": function ListIterator(_list, _liblib$_length, _liblib$_position, _liblib$_current) {
    this._list = _list;
    this._liblib$_length = _liblib$_length;
    this._liblib$_position = _liblib$_position;
    this._liblib$_current = _liblib$_current;
  },
  "super": "Object",
  moveNext$0: function() {
    var t1, t2, t3, t4, nextPosition;
    t1 = this._list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    t4 = this._liblib$_length;
    if ($.$$eq(t3, t4) !== true)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t3 = this._liblib$_position;
    if (t3 !== (t3 | 0))
      return this.moveNext$0$bailout0(1, t1, t4, t2, t3);
    nextPosition = t3 + 1;
    if ($.CONSTANT1.$lt(nextPosition, t4)) {
      this._liblib$_position = nextPosition;
      this._liblib$_current = t2.$index(t1, nextPosition);
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout0: function(state0, t1, t4, t2, t3) {
    var nextPosition = $.intTypeCheck($.$$add(t3, 1));
    if ($.$$lt(nextPosition, t4)) {
      this._liblib$_position = nextPosition;
      this._liblib$_current = t2.$index(t1, nextPosition);
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  },
  $isIterator: true
};

$$.MappedList = {
  "": function MappedList(_list, _f) {
    this._list = _list;
    this._f = _f;
  },
  "super": "UnmodifiableListBase",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  $index: function(index) {
    $.intTypeCheck(index);
    return this._f$1($.$$index(this._list, index));
  },
  get$length: function() {
    return $.intTypeCheck($.length(this._list));
  }
};

$$._Manager = {
  "": function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
  },
  "super": "Object",
  set$nextIsolateId: function(v) {
    this.nextIsolateId = $.intTypeCheck(v);
  },
  get$nextIsolateId: function() {
    return this.nextIsolateId;
  },
  set$currentManagerId: function(v) {
    this.currentManagerId = $.intTypeCheck(v);
  },
  get$currentManagerId: function() {
    return this.currentManagerId;
  },
  set$nextManagerId: function(v) {
    this.nextManagerId = $.intTypeCheck(v);
  },
  get$nextManagerId: function() {
    return this.nextManagerId;
  },
  set$currentContext: function(v) {
    this.currentContext = $.propertyTypeCheck(v, "$is_IsolateContext");
  },
  get$currentContext: function() {
    return this.currentContext;
  },
  set$rootContext: function(v) {
    this.rootContext = $.propertyTypeCheck(v, "$is_IsolateContext");
  },
  get$rootContext: function() {
    return this.rootContext;
  },
  get$topEventLoop: function() {
    return this.topEventLoop;
  },
  get$fromCommandLine: function() {
    return this.fromCommandLine;
  },
  get$isWorker: function() {
    return this.isWorker;
  },
  get$isolates: function() {
    return this.isolates;
  },
  get$mainManager: function() {
    return this.mainManager;
  },
  get$managers: function() {
    return this.managers;
  },
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return $.boolTypeCheck(this.get$useWorkers());
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.boolConversionCheck($.get$globalPostMessageDefined());
    if (!$.boolConversionCheck(this.isWorker))
      t2 = !($.get$globalWorker() == null) && !($.get$IsolateNatives_thisScript() == null);
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && !$.boolConversionCheck(this.isWorker);
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if ($.boolConversionCheck(this.isWorker))
      var t1 = $.boolConversionCheck($.boolConversionCheck($.isEmpty(this.isolates)) && $.boolConversionCheck($.$$eq(this.topEventLoop.get$activeTimerCount(), 0)));
    else
      t1 = false;
    if ($.boolConversionCheck(t1))
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.callTypeCheck($.Map_Map($.$int, $._IsolateContext), "$isMap");
    this.managers = $.callTypeCheck($.Map_Map($.$int, $._ManagerStub), "$isMap");
    if ($.boolConversionCheck(this.isWorker)) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  $is_Manager: true
};

$$._IsolateContext = {
  "": function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  },
  "super": "Object",
  get$id: function() {
    return this.id;
  },
  get$ports: function() {
    return this.ports;
  },
  eval$1: function(code) {
    var old, result;
    $.functionTypeCheck(code);
    old = $.propertyTypeCheck($globalState, "$is_Manager").get$currentContext();
    $.propertyTypeCheck($globalState, "$is_Manager").set$currentContext(this);
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      $.propertyTypeCheck($globalState, "$is_Manager").set$currentContext(old);
      if (!(old == null))
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    return $.propertyTypeCheck(this.ports.$index(portId), "$isReceivePort");
  },
  register$2: function(portId, port) {
    if ($.boolConversionCheck(this.ports.containsKey$1(portId)))
      throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
    this.ports.$indexSet(portId, port);
    $.$$indexSet($.propertyTypeCheck($globalState, "$is_Manager").get$isolates(), this.id, this);
  },
  unregister$1: function(portId) {
    this.ports.remove$1(portId);
    if ($.boolConversionCheck($.isEmpty(this.ports)))
      $.remove($.propertyTypeCheck($globalState, "$is_Manager").get$isolates(), this.id);
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$$add(t2, 1));
    this.id = $.intTypeCheck(t2);
    this.ports = $.callTypeCheck($.Map_Map($.$int, $.ReceivePort), "$isMap");
    this.isolateStatics = new Isolate;
  },
  $is_IsolateContext: true
};

$$._EventLoop = {
  "": function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  },
  "super": "Object",
  set$activeTimerCount: function(v) {
    this.activeTimerCount = $.intTypeCheck(v);
  },
  get$activeTimerCount: function() {
    return this.activeTimerCount;
  },
  enqueue$3: function(isolate, fn, msg) {
    this.events.addLast$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.boolConversionCheck($.isEmpty(t1)))
      return;
    return $.propertyTypeCheck(t1.removeFirst$0(), "$is_IsolateEvent");
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if (!($.propertyTypeCheck($globalState, "$is_Manager").get$rootContext() == null)) {
      if ($.boolConversionCheck($.propertyTypeCheck($globalState, "$is_Manager").get$isolates().containsKey$1($.propertyTypeCheck($globalState, "$is_Manager").get$rootContext().get$id())))
        var t1 = $.boolConversionCheck($.boolConversionCheck($.propertyTypeCheck($globalState, "$is_Manager").get$fromCommandLine()) && $.boolConversionCheck($.isEmpty($.propertyTypeCheck($globalState, "$is_Manager").get$rootContext().get$ports())));
      else
        t1 = false;
      $.boolConversionCheck(t1);
    } else
      t1 = false;
    if ($.boolConversionCheck(t1))
      throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var event = this.dequeue$0();
    if (event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $.propertyTypeCheck($globalState, "$is_Manager").maybeCloseWorker$0();
      return false;
    }
    event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if (!($.get$globalWindow() == null))
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; $.boolConversionCheck(this.runIteration$0());)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if (!$.boolConversionCheck($.propertyTypeCheck($globalState, "$is_Manager").get$isWorker()))
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $.propertyTypeCheck($globalState, "$is_Manager").get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  },
  $is_EventLoop: true
};

$$._IsolateEvent = {
  "": function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  },
  "super": "Object",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
};

$$._MainManagerStub = {
  "": function _MainManagerStub() {
  },
  "super": "Object",
  get$id: function() {
    return 0;
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  },
  $is_ManagerStub: function() {
    return true;
  }
};

$$._BaseSendPort = {
  "": function _BaseSendPort(_liblib5$_isolateId) {
    this._liblib5$_isolateId = _liblib5$_isolateId;
  },
  "super": "Object",
  get$_liblib5$_isolateId: function() {
    return this._liblib5$_isolateId;
  },
  _checkReplyTo$1: function(replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    if (!(replyTo == null) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_BufferingSendPort))
      throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $.Completer_Completer();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return $.propertyTypeCheck(completer.get$future(), "$isFuture");
  },
  $isFunction: true,
  $is_FutureOnError: true,
  $isSendPort: true
};

$$._NativeJsSendPort = {
  "": function _NativeJsSendPort(_liblib5$_receivePort, _liblib5$_isolateId) {
    this._liblib5$_receivePort = _liblib5$_receivePort;
    this._liblib5$_isolateId = _liblib5$_isolateId;
  },
  "super": "_BaseSendPort",
  get$_liblib5$_receivePort: function() {
    return this._liblib5$_receivePort;
  },
  send$2: function(message, replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.boolConversionCheck($.$$eq(this._liblib5$_receivePort, other._liblib5$_receivePort));
  },
  get$hashCode: function() {
    return $.intTypeCheck(this._liblib5$_receivePort.get$_liblib5$_id());
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort = {
  "": function _WorkerSendPort(_workerId, _receivePortId, _liblib5$_isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._liblib5$_isolateId = _liblib5$_isolateId;
  },
  "super": "_BaseSendPort",
  get$_workerId: function() {
    return this._workerId;
  },
  send$2: function(message, replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort) {
      t1 = this._workerId;
      t2 = other._workerId;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this._liblib5$_isolateId;
        t2 = other._liblib5$_isolateId;
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this._receivePortId;
          t2 = other._receivePortId;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    return $.intTypeCheck($.$$xor($.$$xor($.$$shl(this._workerId, 16), $.$$shl(this._liblib5$_isolateId, 8)), this._receivePortId));
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$.ReceivePortImpl = {
  "": function ReceivePortImpl(_liblib5$_id, _liblib5$_callback) {
    this._liblib5$_id = _liblib5$_id;
    this._liblib5$_callback = _liblib5$_callback;
  },
  "super": "Object",
  get$_liblib5$_id: function() {
    return this._liblib5$_id;
  },
  get$_liblib5$_callback: function() {
    return this._liblib5$_callback;
  },
  _liblib5$_callback$2: function(arg0, arg1) {
    return this._liblib5$_callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._liblib5$_callback = $.functionTypeCheck(onMessage);
  },
  close$0: function() {
    this._liblib5$_callback = null;
    $.propertyTypeCheck($globalState, "$is_Manager").get$currentContext().unregister$1(this._liblib5$_id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.propertyTypeCheck($globalState, "$is_Manager").get$currentContext().get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._liblib5$_id, this);
  },
  $isReceivePortImpl: true,
  $isReceivePort: true
};

$$._PendingSendPortFinder = {
  "": function _PendingSendPortFinder(ports, _liblib5$_visited) {
    this.ports = ports;
    this._liblib5$_visited = _liblib5$_visited;
  },
  "super": "_MessageTraverser",
  get$ports: function() {
    return this.ports;
  },
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    if (!($.$$index(this._liblib5$_visited, list) == null))
      return;
    $.$$indexSet(this._liblib5$_visited, list, true);
    $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    if (!($.$$index(this._liblib5$_visited, map) == null))
      return;
    $.$$indexSet(this._liblib5$_visited, map, true);
    $.forEach(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!port.$is_BufferingSendPort && port._liblib5$_port == null)
      $.CONSTANT0.add$1(this.ports, port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._liblib5$_visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer0 = {
  "": function _JsSerializer(_liblib5$_nextFreeRefId, _liblib5$_visited) {
    this._liblib5$_nextFreeRefId = _liblib5$_nextFreeRefId;
    this._liblib5$_visited = _liblib5$_visited;
  },
  "super": "_Serializer",
  visitSendPort$1: function(x) {
    $.propertyTypeCheck(x, "$isSendPort");
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._liblib5$_isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $.propertyTypeCheck($globalState, "$is_Manager").get$currentManagerId(), port._liblib5$_isolateId, port._liblib5$_receivePort.get$_liblib5$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._liblib5$_port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._liblib5$_visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {
  "": function _JsCopier(_liblib5$_visited) {
    this._liblib5$_visited = _liblib5$_visited;
  },
  "super": "_Copier",
  visitSendPort$1: function(x) {
    $.propertyTypeCheck(x, "$isSendPort");
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._liblib5$_receivePort, port._liblib5$_isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._liblib5$_isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._liblib5$_port;
    if (!(t1 == null))
      return $.propertyTypeCheck(this.visitSendPort$1(t1), "$isSendPort");
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._liblib5$_visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer0 = {
  "": function _JsDeserializer(_liblib5$_deserialized) {
    this._liblib5$_deserialized = _liblib5$_deserialized;
  },
  "super": "_Deserializer",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, receivePort;
    $.listTypeCheck(x);
    t1 = $.getInterceptor$JSStringJSArray(x);
    managerId = $.intTypeCheck(t1.$index(x, 1));
    isolateId = $.intTypeCheck(t1.$index(x, 2));
    receivePortId = $.intTypeCheck(t1.$index(x, 3));
    t1 = $.propertyTypeCheck($globalState, "$is_Manager").get$currentManagerId();
    if (managerId == null ? t1 == null : managerId === t1) {
      t1 = $.$$index($.propertyTypeCheck($globalState, "$is_Manager").get$isolates(), isolateId);
      if (t1 == null)
        return;
      receivePort = t1.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {
  "": function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  },
  "super": "Object",
  $index: function(object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(object, info) {
    $.add(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    $.assertHelper(this.tagged == null);
    var t1 = $.List_List(0);
    $.setRuntimeTypeInfo(t1, []);
    this.tagged = t1;
  },
  cleanup$0: function() {
    var length, i, t1;
    for (length = $.intTypeCheck($.length(this.tagged)), i = 0; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, length); i = $.intTypeCheck(t1.$add(i, 1)))
      $.$$index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  },
  $is_MessageTraverserVisitedMap0: true
};

$$._MessageTraverserVisitedMap0 = {
  "": function _MessageTraverserVisitedMap() {
  },
  "super": "Object",
  $index: function(object) {
    return;
  },
  $indexSet: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  },
  $is_MessageTraverserVisitedMap0: true
};

$$._MessageTraverser = {
  "": function _MessageTraverser() {
  },
  "super": "Object",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._liblib5$_visited.reset$0();
    result = null;
    try {
      result = this._liblib5$_dispatch$1(x);
    } finally {
      this._liblib5$_visited.cleanup$0();
    }
    return result;
  },
  _liblib5$_dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.$isMap())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {
  "": function _Copier() {
  },
  "super": "_MessageTraverser",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copy, t1, len, i, t2;
    copy = $.listTypeCheck($.$$index(this._liblib5$_visited, list));
    if (!(copy == null))
      return copy;
    t1 = $.getInterceptor$JSStringJSArray(list);
    len = t1.get$length(list);
    $.intTypeCheck(len);
    if (len !== (len | 0))
      return this.visitList$1$bailout(1, list, t1, len);
    copy = $.List_List(len);
    $.setRuntimeTypeInfo(copy, []);
    $.$$indexSet(this._liblib5$_visited, list, copy);
    for (i = 0; i < len; ++i) {
      t2 = this._liblib5$_dispatch$1(t1.$index(list, i));
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout: function(state0, list, t1, len) {
    var copy, i, t2;
    copy = $.List_List(len);
    $.setRuntimeTypeInfo(copy, []);
    $.$$indexSet(this._liblib5$_visited, list, copy);
    for (i = 0; $.$$lt(i, len); ++i) {
      t2 = this._liblib5$_dispatch$1(t1.$index(list, i));
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= copy.length)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t1.copy_0 = $.callTypeCheck($.$$index(this._liblib5$_visited, map), "$isMap");
    t2 = t1.copy_0;
    if (!(t2 == null))
      return $.callTypeCheck(t2, "$isMap");
    t1.copy_0 = $.callTypeCheck($.Map_Map(), "$isMap");
    $.$$indexSet(this._liblib5$_visited, map, t1.copy_0);
    map.forEach$1(new $._Copier_visitMap_anon(t1, this));
    return $.callTypeCheck(t1.copy_0, "$isMap");
  }
};

$$._Serializer = {
  "": function _Serializer() {
  },
  "super": "_MessageTraverser",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copyId, id;
    copyId = $.intTypeCheck($.$$index(this._liblib5$_visited, list));
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._liblib5$_nextFreeRefId;
    this._liblib5$_nextFreeRefId = $.intTypeCheck($.$$add(id, 1));
    $.$$indexSet(this._liblib5$_visited, list, id);
    return ["list", id, this._liblib5$_serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var copyId, id;
    copyId = $.intTypeCheck($.$$index(this._liblib5$_visited, map));
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._liblib5$_nextFreeRefId;
    this._liblib5$_nextFreeRefId = $.intTypeCheck($.$$add(id, 1));
    $.$$indexSet(this._liblib5$_visited, map, id);
    return ["map", id, this._liblib5$_serializeList$1($.toList(map.get$keys())), this._liblib5$_serializeList$1($.toList(map.get$values()))];
  },
  _liblib5$_serializeList$1: function(list) {
    var t1, len, result, i, t2;
    $.listTypeCheck(list);
    t1 = $.getInterceptor$JSStringJSArray(list);
    len = t1.get$length(list);
    $.intTypeCheck(len);
    if (len !== (len | 0))
      return this._liblib5$_serializeList$1$bailout(1, list, t1, len);
    result = $.List_List(len);
    $.setRuntimeTypeInfo(result, []);
    for (i = 0; i < len; ++i) {
      t2 = this._liblib5$_dispatch$1(t1.$index(list, i));
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _liblib5$_serializeList$1$bailout: function(state0, list, t1, len) {
    var result, i, t2;
    result = $.List_List(len);
    $.setRuntimeTypeInfo(result, []);
    for (i = 0; $.$$lt(i, len); ++i) {
      t2 = this._liblib5$_dispatch$1(t1.$index(list, i));
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= result.length)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  }
};

$$._Deserializer = {
  "": function _Deserializer() {
  },
  "super": "Object",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._liblib5$_deserialized = $.callTypeCheck($.HashMap_HashMap(), "$isMap");
    return this._liblib5$_deserializeHelper$1(x);
  },
  _liblib5$_deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    $.assertHelper(typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()));
    switch ($.$$index(x, 0)) {
      case "ref":
        return this._liblib5$_deserializeRef$1(x);
      case "list":
        return this._liblib5$_deserializeList$1(x);
      case "map":
        return this._liblib5$_deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _liblib5$_deserializeRef$1: function(x) {
    var id, result;
    id = $.intTypeCheck($.$$index($.listTypeCheck(x), 1));
    result = this._liblib5$_deserialized.$index(id);
    $.assertHelper(!(result == null));
    return result;
  },
  _liblib5$_deserializeList$1: function(x) {
    var t1, id, dartList, len, i, t2;
    $.listTypeCheck(x);
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = $.intTypeCheck(t1.$index(x, 1));
    dartList = $.listTypeCheck(t1.$index(x, 2));
    this._liblib5$_deserialized.$indexSet(id, dartList);
    t1 = $.getInterceptor$JSStringJSArray(dartList);
    len = $.intTypeCheck(t1.get$length(dartList));
    for (i = 0; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, len); i = $.intTypeCheck(t2.$add(i, 1)))
      t1.$indexSet(dartList, i, this._liblib5$_deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _liblib5$_deserializeMap$1: function(x) {
    var result, t1, id, keys, values, len, t2, t3, i;
    $.listTypeCheck(x);
    result = $.callTypeCheck($.Map_Map(), "$isMap");
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = $.intTypeCheck(t1.$index(x, 1));
    this._liblib5$_deserialized.$indexSet(id, result);
    keys = $.listTypeCheck(t1.$index(x, 2));
    values = $.listTypeCheck(t1.$index(x, 3));
    t1 = $.getInterceptor$JSStringJSArray(keys);
    len = $.intTypeCheck(t1.get$length(keys));
    t2 = $.getInterceptor$JSStringJSArray(values);
    t3 = t2.get$length(values);
    $.assertHelper(len == null ? t3 == null : len === t3);
    for (i = 0; t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, len); i = $.intTypeCheck(t3.$add(i, 1)))
      result.$indexSet(this._liblib5$_deserializeHelper$1(t1.$index(keys, i)), this._liblib5$_deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    $.listTypeCheck(x);
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {
  "": function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  },
  "super": "Object",
  set$_handle: function(v) {
    this._handle = $.intTypeCheck(v);
  },
  cancel$0: function() {
    if (!($.get$globalThis().setTimeout == null)) {
      if ($.boolConversionCheck(this._inEventLoop))
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $.propertyTypeCheck($globalState, "$is_Manager").get$topEventLoop();
      t1.set$activeTimerCount($.$$sub(t1.get$activeTimerCount(), 1));
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    $.intTypeCheck(milliseconds);
    $.functionTypeCheck(callback);
    if (milliseconds === 0)
      t1 = $.boolConversionCheck(!$.boolConversionCheck($.hasTimer()) || $.boolConversionCheck($._globalState().get$isWorker()));
    else
      t1 = false;
    if ($.boolConversionCheck(t1)) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), new $.anon0(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.boolConversionCheck($.hasTimer())) {
      t1 = $._globalState().get$topEventLoop();
      t1.set$activeTimerCount($.$$add(t1.get$activeTimerCount(), 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else {
      $.assertHelper($.$$gt(milliseconds, 0));
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
    }
  }
};

$$.AsyncError = {
  "": function AsyncError(error, stackTrace, cause) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.cause = cause;
  },
  "super": "Object",
  get$error: function() {
    return this.error;
  },
  get$stackTrace: function() {
    return this.stackTrace;
  },
  get$cause: function() {
    return this.cause;
  },
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.add$1("'");
    message = null;
    try {
      message = $.stringTypeCheck($.toString(this.error));
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.add$1(message);
    buffer.add$1("'\n");
    t1 = this.stackTrace;
    if (!(t1 == null)) {
      buffer.add$1("Stack trace:\n");
      buffer.add$1($.toString(t1));
      buffer.add$1("\n");
    }
  },
  toString$0: function() {
    var buffer, cause;
    buffer = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), "$isStringBuffer");
    buffer.add$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = $.propertyTypeCheck(this.cause, "$isAsyncError");
    for (; !(cause == null);) {
      buffer.add$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = $.propertyTypeCheck(cause.get$cause(), "$isAsyncError");
    }
    return $.stringTypeCheck(buffer.toString$0());
  },
  throwDelayed$0: function() {
    var reportError, exception;
    reportError = new $.AsyncError_throwDelayed_reportError(this);
    try {
      $.Timer_Timer(0, new $.AsyncError_throwDelayed_anon(this, reportError));
    } catch (exception) {
      $.unwrapException(exception);
      reportError.call$0();
    }

  },
  $isAsyncError: true
};

$$._CompleterImpl = {
  "": function _CompleterImpl(future, _isComplete) {
    this.future = future;
    this._isComplete = _isComplete;
  },
  "super": "Object",
  get$future: function() {
    return this.future;
  },
  get$_isComplete: function() {
    return this._isComplete;
  },
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  $isCompleter: true
};

$$._FutureListenerWrapper = {
  "": function _FutureListenerWrapper(future, _nextListener) {
    this.future = future;
    this._nextListener = _nextListener;
  },
  "super": "Object",
  get$future: function() {
    return this.future;
  },
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  get$_nextListener: function() {
    return this._nextListener;
  },
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    $.propertyTypeCheck(error, "$isAsyncError");
    this.future._setError$1(error);
  },
  $is_FutureListener: true
};

$$._FutureImpl = {
  "": function _FutureImpl(_state, _resultOrListeners) {
    this._state = _state;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "Object",
  get$_resultOrListeners: function() {
    return this._resultOrListeners;
  },
  get$_isComplete: function() {
    return $.$$eq(this._state, 0) !== true;
  },
  get$_hasValue: function() {
    return $.boolTypeCheck($.$$eq(this._state, 1));
  },
  get$_hasError: function() {
    return $.$$eq($.$$and(this._state, 2), 0) !== true;
  },
  get$_hasUnhandledError: function() {
    return $.$$eq($.$$and(this._state, 4), 0) !== true;
  },
  _clearUnhandledError$0: function() {
    this._state = $.intTypeCheck($.$$and(this._state, 4294967291));
  },
  then$2$onError: function(f, onError) {
    var t1;
    $.functionTypeCheck(f);
    $.functionTypeCheck(onError);
    if (!$.boolConversionCheck(this.get$_isComplete())) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if ($.boolConversionCheck(this.get$_hasError())) {
      if (!(onError == null))
        return $.propertyTypeCheck(this._handleError$2(onError, null), "$isFuture");
      return $._FutureWrapper$(this);
    } else {
      $.assertHelper(this.get$_hasValue());
      return $.propertyTypeCheck(this._handleValue$1(f), "$isFuture");
    }
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    $.functionTypeCheck(f);
    $.functionTypeCheck(test);
    if ($.boolConversionCheck(this.get$_hasValue()))
      return $._FutureWrapper$(this);
    t1 = this.get$_isComplete();
    $.boolConversionCheck(t1);
    if (typeof t1 !== "boolean")
      return this.catchError$2$test$bailout(1, f, test, t1);
    if (!t1) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return $.propertyTypeCheck(this._handleError$2(f, test), "$isFuture");
  },
  catchError$2$test$bailout: function(state0, f, test, t1) {
    if (!t1) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return $.propertyTypeCheck(this._handleError$2(f, test), "$isFuture");
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture;
    $.assertHelper(this.get$_hasValue());
    thenFuture = $._ThenFuture$(onValue);
    $.Timer_Timer(0, new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    $.functionTypeCheck(onError);
    $.functionTypeCheck(test);
    $.assertHelper(this.get$_hasError());
    this._clearUnhandledError$0();
    error = $.propertyTypeCheck(this._resultOrListeners, "$isAsyncError");
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_Timer(0, new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  get$_handleError: function() {
    return new $.BoundClosure4(this, "_handleError$2");
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if ($.boolConversionCheck(this.get$_isComplete()))
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = $.propertyTypeCheck(this._removeListeners$0(), "$is_FutureListener");
    this._state = 1;
    this._resultOrListeners = value;
    for (; !(listeners == null); listeners = listeners0) {
      listeners0 = $.propertyTypeCheck(listeners.get$_nextListener(), "$is_FutureListener");
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure5(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    $.propertyTypeCheck(error, "$isAsyncError");
    if ($.boolConversionCheck(this.get$_isComplete()))
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = $.propertyTypeCheck(this._removeListeners$0(), "$is_FutureListener");
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = $.propertyTypeCheck(listeners.get$_nextListener(), "$is_FutureListener");
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (!(listeners0 == null)) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure6(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = $.intTypeCheck($.$$or(this._state, 4));
    $.Timer_Timer(0, new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    $.propertyTypeCheck(listener, "$is_FutureListener");
    $.assertHelper(!$.boolConversionCheck(this.get$_isComplete()));
    $.assertHelper(listener.get$_nextListener() == null);
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    $.assertHelper(!$.boolConversionCheck(this.get$_isComplete()));
    current = $.propertyTypeCheck(this._resultOrListeners, "$is_FutureListener");
    this._resultOrListeners = null;
    for (prev = null; !(current == null); prev = current, current = next) {
      next = $.propertyTypeCheck(current.get$_nextListener(), "$is_FutureListener");
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (!$.boolConversionCheck(this.get$_isComplete()))
      this._addListener$1(future._asListener$0());
    else if ($.boolConversionCheck(this.get$_hasValue()))
      future._setValue$1(this._resultOrListeners);
    else {
      $.assertHelper(this.get$_hasError());
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  _asListener$0: function() {
    return $.propertyTypeCheck($._FutureListener__FutureListener$wrap(this), "$is_FutureListener");
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._TransformFuture = {
  "": function _TransformFuture(_nextListener) {
    this._nextListener = _nextListener;
  },
  "super": "_FutureImpl",
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  get$_nextListener: function() {
    return this._nextListener;
  },
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  $is_FutureListener: true
};

$$._ThenFuture = {
  "": function _ThenFuture(_onValue, _nextListener, _state, _resultOrListeners) {
    this._onValue = _onValue;
    this._nextListener = _nextListener;
    this._state = _state;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_TransformFuture",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    $.assertHelper(!(this._onValue == null));
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1($.propertyTypeCheck(error, "$isAsyncError"));
  }
};

$$._CatchErrorFuture = {
  "": function _CatchErrorFuture(_test, _onError, _nextListener, _state, _resultOrListeners) {
    this._test = _test;
    this._onError = _onError;
    this._nextListener = _nextListener;
    this._state = _state;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_TransformFuture",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    $.propertyTypeCheck(error, "$isAsyncError");
    $.assertHelper(!(this._onError == null));
    if (!(this._test == null)) {
      matchesTest = null;
      try {
        matchesTest = $.boolTypeCheck(this._test$1(error.get$error()));
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (!$.boolConversionCheck(matchesTest)) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._SubscribeFuture = {
  "": function _SubscribeFuture(_onError, _onValue, _nextListener, _state, _resultOrListeners) {
    this._onError = _onError;
    this._onValue = _onValue;
    this._nextListener = _nextListener;
    this._state = _state;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_ThenFuture",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    $.propertyTypeCheck(error, "$isAsyncError");
    $.assertHelper(!(this._onError == null));
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._FutureWrapper = {
  "": function _FutureWrapper(_future) {
    this._future = _future;
  },
  "super": "Object",
  then$2$onError: function($function, onError) {
    $.functionTypeCheck($function);
    $.functionTypeCheck(onError);
    return $.propertyTypeCheck(this._future.then$2$onError($function, onError), "$isFuture");
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    $.functionTypeCheck($function);
    $.functionTypeCheck(test);
    return $.propertyTypeCheck(this._future.catchError$2$test($function, test), "$isFuture");
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Stream = {
  "": function Stream() {
  },
  "super": "Object",
  where$1: function(test) {
    return $.WhereStream$(this, $.functionTypeCheck(test), $.getRuntimeTypeInfo(this)[0]);
  },
  mappedBy$1: function(convert) {
    return $.MapStream$(this, $.functionTypeCheck(convert), $.getRuntimeTypeInfo(this)[0], null);
  },
  contains$1: function(match) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_contains_anon(t1, match, future);
    t3 = future.get$_setError();
    t1.subscription_0 = $.propertyTypeCheck(this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_contains_anon0(future), t3, true), "$isStreamSubscription");
    return future;
  },
  get$contains: function() {
    return new $.BoundClosure5(this, "contains$1");
  },
  get$length: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.$int);
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = $.propertyTypeCheck(this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true), "$isStreamSubscription");
    return future;
  },
  toList$0: function() {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$([$.List, $.getRuntimeTypeInfo(this)[0]]);
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toList_anon0(result, future), t2, true);
    return future;
  },
  toSet$0: function() {
    var result, future, t1, t2;
    result = $.propertyTypeCheck($.Set_Set($.getRuntimeTypeInfo(this)[0]), "$isSet");
    future = $._FutureImpl$([$.Set, $.getRuntimeTypeInfo(this)[0]]);
    t1 = new $.Stream_toSet_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toSet_anon0(result, future), t2, true);
    return future;
  },
  get$last: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.getRuntimeTypeInfo(this)[0]);
    t1.result_0 = null;
    t1.foundResult_1 = false;
    t2 = new $.Stream_last_anon(t1);
    t3 = future.get$_setError();
    $.propertyTypeCheck(this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_last_anon0(t1, future), t3, true), "$isStreamSubscription");
    return future;
  },
  $isStream: true
};

$$.StreamSubscription = {
  "": function StreamSubscription() {
  },
  "super": "Object",
  $isStreamSubscription: true
};

$$._ForwardingStream = {
  "": function _ForwardingStream() {
  },
  "super": "Stream",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    $.functionTypeCheck(onData);
    $.functionTypeCheck(onDone);
    $.functionTypeCheck(onError);
    $.boolTypeCheck(unsubscribeOnError);
    if (onData == null)
      onData = $.functionTypeCheck($._nullDataHandler);
    if (onError == null)
      onError = $.functionTypeCheck($._nullErrorHandler);
    if (onDone == null)
      onDone = $.functionTypeCheck($._nullDoneHandler);
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === unsubscribeOnError, $.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[1]);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  _handleData$2: function(data, sink) {
    $.propertyTypeCheck(sink, "$is_StreamOutputSink")._sendData$1(data);
  },
  get$_handleData: function() {
    return new $.BoundClosure7(this, "_handleData$2");
  },
  _handleError$2: function(error, sink) {
    $.propertyTypeCheck(error, "$isAsyncError");
    $.propertyTypeCheck(sink, "$is_StreamOutputSink")._sendError$1(error);
  },
  get$_handleError: function() {
    return new $.BoundClosure8(this, "_handleError$2");
  },
  _handleDone$1: function(sink) {
    $.propertyTypeCheck(sink, "$is_StreamOutputSink")._sendDone$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure5(this, "_handleDone$1");
  },
  $is_ForwardingStream: true
};

$$._ForwardingStreamSubscription = {
  "": function _ForwardingStreamSubscription(_stream, _liblib4$_onData, _onError, _onDone, _subscription) {
    this._stream = _stream;
    this._liblib4$_onData = _liblib4$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._subscription = _subscription;
  },
  "super": "Object",
  _liblib4$_onData$1: function(arg0) {
    return this._liblib4$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      throw $.$$throw($.StateError$("Subscription has been unsubscribed"));
    t1.cancel$0();
    this._subscription = null;
  },
  _sendData$1: function(data) {
    this._liblib4$_onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1($.propertyTypeCheck(error, "$isAsyncError"));
  },
  _sendDone$0: function() {
    var t1 = this._subscription;
    if (!(t1 == null)) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure5(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    $.propertyTypeCheck(error, "$isAsyncError");
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure9(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.BoundClosure10(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, _onData, _onError, _onDone, unsubscribeOnError) {
    var t1, t2, t3;
    $.boolTypeCheck(unsubscribeOnError);
    t1 = this._stream._source;
    t2 = this.get$_handleData();
    t3 = this.get$_handleError();
    this._subscription = $.propertyTypeCheck(t1.listen$4$onDone$onError$unsubscribeOnError(t2, this.get$_handleDone(), t3, unsubscribeOnError), "$isStreamSubscription");
  },
  $is_StreamOutputSink: true,
  $isStreamSubscription: true
};

$$.WhereStream = {
  "": function WhereStream(_test, _source) {
    this._test = _test;
    this._source = _source;
  },
  "super": "_ForwardingStream",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    $.propertyTypeCheck(sink, "$is_StreamOutputSink");
    satisfies = null;
    try {
      satisfies = $.boolTypeCheck(this._test$1(inputEvent));
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    if ($.boolConversionCheck(satisfies))
      sink._sendData$1(inputEvent);
  },
  get$_handleData: function() {
    return new $.BoundClosure11(this, "_handleData$2");
  }
};

$$.MapStream = {
  "": function MapStream(_transform, _source) {
    this._transform = _transform;
    this._source = _source;
  },
  "super": "_ForwardingStream",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    $.propertyTypeCheck(sink, "$is_StreamOutputSink");
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    sink._sendData$1(outputEvent);
  },
  get$_handleData: function() {
    return new $.BoundClosure12(this, "_handleData$2");
  }
};

$$._ChildrenElementList = {
  "": function _ChildrenElementList(_liblib3$_element, _childElements) {
    this._liblib3$_element = _liblib3$_element;
    this._childElements = _childElements;
  },
  "super": "Object",
  toList$0: function() {
    var t1, t2, output, len, i;
    t1 = this._childElements;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    output = $.List_List$fixedLength(t2.get$length(t1), null, $.Element);
    $.setRuntimeTypeInfo(output, [$.Element]);
    len = t2.get$length(t1);
    $.intTypeCheck(len);
    if (len !== (len | 0))
      return this.toList$0$bailout(1, output, t1, len);
    i = 0;
    for (; i < len; ++i) {
      t2 = t1.$index(i);
      if (i >= output.length)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$0$bailout: function(state0, output, t1, len) {
    var i, t2;
    i = 0;
    for (; $.$$lt(i, len); ++i) {
      t2 = t1.$index(i);
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= output.length)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toSet$0: function() {
    var output, t1, len, t2, i, t3;
    output = $.Set_Set($.Element);
    for (t1 = this._childElements, len = $.intTypeCheck($.length(t1)), t2 = $.getInterceptor$JSArray(output), i = 0; t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, len); i = $.intTypeCheck(t3.$add(i, 1)))
      t2.add$1(output, t1.$index(i));
    return $.propertyTypeCheck(output, "$isSet");
  },
  contains$1: function(element) {
    $.callTypeCheck(element, "$isElement");
    return $.boolTypeCheck(this._childElements.contains$1(element));
  },
  get$contains: function() {
    return new $.BoundClosure17(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this._childElements); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  get$isEmpty: function() {
    return this._liblib3$_element.firstElementChild == null;
  },
  get$length: function() {
    return $.intTypeCheck($.length(this._childElements));
  },
  $index: function(index) {
    $.intTypeCheck(index);
    return $.callTypeCheck(this._childElements.$index(index), "$isElement");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isElement");
    this._liblib3$_element.$$dom_replaceChild$2(value, this._childElements.$index(index));
  },
  set$length: function(newLength) {
    $.intTypeCheck(newLength);
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isElement");
    this._liblib3$_element.$$dom_appendChild$1(value);
    return value;
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isElement");
    this._liblib3$_element.$$dom_appendChild$1(value);
    return value;
  },
  get$iterator: function() {
    return $.propertyTypeCheck($.iterator(this.toList$0()), "$isIterator");
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.iterator(iterable), t2 = this._liblib3$_element; $.boolConversionCheck(t1.moveNext$0());)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  remove$1: function(object) {
    if (typeof object === "object" && object !== null && object.$isElement())
      if (object.parentNode === this)
        this._liblib3$_element.$$dom_removeChild$1(object);
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, $.functionTypeCheck(test));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnimplementedError$(null));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, rangeLength, []));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isElement"), $.intTypeCheck(start), $.length(this));
  },
  clear$0: function() {
    this._liblib3$_element.textContent = "";
  },
  removeLast$0: function() {
    var t1 = $.last(this);
    if (!(t1 == null))
      this._liblib3$_element.$$dom_removeChild$1(t1);
    return $.callTypeCheck(t1, "$isElement");
  },
  get$last: function() {
    var result = $.callTypeCheck(this._liblib3$_element.lastElementChild, "$isElement");
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._FrozenElementList = {
  "": function _FrozenElementList(_nodeList) {
    this._nodeList = _nodeList;
  },
  "super": "Object",
  contains$1: function(element) {
    var t1;
    $.callTypeCheck(element, "$isElement");
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      if ($.boolConversionCheck($.$$eq(t1.get$current(), element)))
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure18(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Element), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.isEmpty(this._nodeList));
  },
  get$length: function() {
    return $.intTypeCheck($.length(this._nodeList));
  },
  $index: function(index) {
    $.intTypeCheck(index);
    return $.callTypeCheck($.$$index(this._nodeList, index), "$isElement");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isElement");
    throw $.$$throw($.UnsupportedError$(""));
  },
  set$length: function(newLength) {
    $.intTypeCheck(newLength);
    $.length0(this._nodeList, newLength);
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isElement");
    throw $.$$throw($.UnsupportedError$(""));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isElement");
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function() {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$(""));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
  },
  indexOf$2: function(element, start) {
    $.callTypeCheck(element, "$isElement");
    $.intTypeCheck(start);
    return $.intTypeCheck($.indexOf(this._nodeList, element, start));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$last: function() {
    return $.callTypeCheck($.last(this._nodeList), "$isElement");
  },
  $is_FrozenElementList: true,
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._FrozenElementListIterator = {
  "": function _FrozenElementListIterator(_liblib3$_list, _liblib3$_index, _current) {
    this._liblib3$_list = _liblib3$_list;
    this._liblib3$_index = _liblib3$_index;
    this._current = _current;
  },
  "super": "Object",
  moveNext$0: function() {
    var t1, nextIndex, t2;
    t1 = this._liblib3$_index;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout2(1, t1);
    nextIndex = t1 + 1;
    t1 = this._liblib3$_list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    if ($.CONSTANT1.$lt(nextIndex, t2.get$length(t1))) {
      this._current = $.callTypeCheck(t1.$index(nextIndex), "$isElement");
      this._liblib3$_index = nextIndex;
      return true;
    }
    this._liblib3$_index = $.intTypeCheck(t2.get$length(t1));
    this._current = null;
    return false;
  },
  moveNext$0$bailout2: function(state0, t1) {
    var nextIndex, t2;
    nextIndex = $.intTypeCheck($.$$add(t1, 1));
    t1 = this._liblib3$_list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    if ($.$$lt(nextIndex, t2.get$length(t1))) {
      this._current = $.callTypeCheck(t1.$index(nextIndex), "$isElement");
      this._liblib3$_index = nextIndex;
      return true;
    }
    this._liblib3$_index = $.intTypeCheck(t2.get$length(t1));
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $isIterator: true
};

$$.Events = {
  "": function Events(_ptr) {
    this._ptr = _ptr;
  },
  "super": "Object",
  $index: function(type) {
    $.stringTypeCheck(type);
    return $.EventListenerList$(this._ptr, type);
  }
};

$$.EventListenerList = {
  "": function EventListenerList(_ptr, _type) {
    this._ptr = _ptr;
    this._type = _type;
  },
  "super": "Object",
  add$2: function(listener, useCapture) {
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
    return this;
  },
  add$1: function(listener) {
    return this.add$2(listener, false);
  },
  remove$2: function(listener, useCapture) {
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
    return this;
  },
  remove$1: function(listener) {
    return this.remove$2(listener, false);
  },
  $isEventListenerList: true
};

$$._ChildNodeListLazy = {
  "": function _ChildNodeListLazy(_this) {
    this._this = _this;
  },
  "super": "Object",
  get$last: function() {
    var result = $.callTypeCheck(this._this.lastChild, "$isNode");
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    this._this.$$dom_appendChild$1(value);
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    this._this.$$dom_appendChild$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.iterator(iterable), t2 = this._this; $.boolConversionCheck(t1.moveNext$0());)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  removeLast$0: function() {
    var t1 = $.last(this);
    if (!(t1 == null))
      this._this.$$dom_removeChild$1(t1);
    return $.callTypeCheck(t1, "$isNode");
  },
  remove$1: function(object) {
    if (!(typeof object === "object" && object !== null && object.$isNode()))
      return;
    if (!(this === object.parentNode))
      return;
    this._this.$$dom_removeChild$1(object);
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, $.functionTypeCheck(test));
  },
  clear$0: function() {
    this._this.textContent = "";
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isNode");
    this._this.$$dom_replaceChild$2(value, this.$index(index));
  },
  get$iterator: function() {
    return $.propertyTypeCheck($.iterator(this._this.childNodes), "$isIterator");
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isNode"));
  },
  get$contains: function() {
    return new $.BoundClosure28(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Node), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isNode"), $.intTypeCheck(start), $.length(this));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  get$length: function() {
    return $.intTypeCheck($.length(this._this.childNodes));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(index) {
    $.intTypeCheck(index);
    return $.callTypeCheck($.$$index(this._this.childNodes, index), "$isNode");
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$.WindowEvents = {
  "": function WindowEvents(_ptr) {
    this._ptr = _ptr;
  },
  "super": "Events",
  get$error: function() {
    return $.propertyTypeCheck(this.$index("error"), "$isEventListenerList");
  },
  get$reset: function() {
    return $.propertyTypeCheck(this.$index("reset"), "$isEventListenerList");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  }
};

$$._AttributeMap = {
  "": function _AttributeMap() {
  },
  "super": "Object",
  clear$0: function() {
    for (var t1 = $.iterator(this.get$keys()); $.boolConversionCheck(t1.moveNext$0());)
      this.remove$1(t1.get$current());
  },
  forEach$1: function(f) {
    var t1, t2;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this.get$keys()); $.boolConversionCheck(t1.moveNext$0());) {
      t2 = t1.get$current();
      f.call$2(t2, this.$index(t2));
    }
  },
  get$keys: function() {
    var attributes, keys, t1, len, i, t2;
    attributes = this._liblib3$_element.attributes;
    keys = $.List_List(0, $.String);
    $.setRuntimeTypeInfo(keys, [$.String]);
    for (t1 = $.getInterceptor$JSStringJSArray(attributes), len = $.intTypeCheck(t1.get$length(attributes)), i = 0; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, len); i = $.intTypeCheck(t2.$add(i, 1)))
      if ($.boolConversionCheck(this._matches$1(t1.$index(attributes, i))))
        $.CONSTANT0.add$1(keys, t1.$index(attributes, i).get$$$dom_localName());
    return keys;
  },
  get$values: function() {
    var attributes, values, t1, len, i, t2;
    attributes = this._liblib3$_element.attributes;
    values = $.List_List(0, $.String);
    $.setRuntimeTypeInfo(values, [$.String]);
    for (t1 = $.getInterceptor$JSStringJSArray(attributes), len = $.intTypeCheck(t1.get$length(attributes)), i = 0; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, len); i = $.intTypeCheck(t2.$add(i, 1)))
      if ($.boolConversionCheck(this._matches$1(t1.$index(attributes, i))))
        $.CONSTANT0.add$1(values, t1.$index(attributes, i).get$value());
    return values;
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  $isMap: function() {
    return true;
  }
};

$$._ElementAttributeMap = {
  "": function _ElementAttributeMap(_liblib3$_element) {
    this._liblib3$_element = _liblib3$_element;
  },
  "super": "_AttributeMap",
  containsKey$1: function(key) {
    $.stringTypeCheck(key);
    return $.boolTypeCheck(this._liblib3$_element.$$dom_hasAttribute$1(key));
  },
  $index: function(key) {
    $.stringTypeCheck(key);
    return $.stringTypeCheck(this._liblib3$_element.$$dom_getAttribute$1(key));
  },
  $indexSet: function(key, value) {
    $.stringTypeCheck(key);
    this._liblib3$_element.$$dom_setAttribute$2(key, $.S(value));
  },
  remove$1: function(key) {
    var t1, value;
    $.stringTypeCheck(key);
    t1 = this._liblib3$_element;
    value = $.stringTypeCheck(t1.$$dom_getAttribute$1(key));
    t1.$$dom_removeAttribute$1(key);
    return value;
  },
  get$length: function() {
    return $.intTypeCheck($.length(this.get$keys()));
  },
  _matches$1: function(node) {
    return $.callTypeCheck(node, "$isNode").get$$$dom_namespaceUri() == null;
  }
};

$$._EventStream = {
  "": function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  },
  "super": "Stream",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    $.functionTypeCheck(onData);
    $.functionTypeCheck(onDone);
    $.functionTypeCheck(onError);
    $.boolTypeCheck(unsubscribeOnError);
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture, $.getRuntimeTypeInfo(this)[0]);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  }
};

$$._EventStreamSubscription = {
  "": function _EventStreamSubscription(_pauseCount, _target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  },
  "super": "StreamSubscription",
  cancel$0: function() {
    if ($.boolConversionCheck(this.get$_canceled()))
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._onData;
    if (!(t1 == null))
      this._target.$$dom_removeEventListener$3(this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    if (!(this._onData == null) && !$.boolConversionCheck(this.get$_paused()))
      this._target.$$dom_addEventListener$3(this._eventType, this._onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {
  "": function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  },
  "super": "Object",
  forTarget$2$useCapture: function(e, useCapture) {
    $.callTypeCheck(e, "$isEventTarget");
    $.boolTypeCheck(useCapture);
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._JsSerializer = {
  "": function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  },
  "super": "_Serializer0",
  visitSendPortSync$1: function(x) {
    if (!!x.$is_JsSendPortSync)
      return ["sendport", "nativejs", x._id];
    if (!!x.$is_LocalSendPortSync)
      return this.visitLocalSendPortSync$1(x);
    if (!!x.$is_RemoteSendPortSync)
      return ["sendport", "dart", x._isolateId, x._portId];
    throw $.$$throw("Unknown port type " + $.S(x));
  },
  visitLocalSendPortSync$1: function(x) {
    return ["sendport", "dart", $.ReceivePortSync__isolateId(), x._receivePort._portId];
  },
  visitSendPort$1: function(x) {
    throw $.$$throw($.UnimplementedError$("Asynchronous send port not yet implemented."));
  }
};

$$._JsDeserializer = {
  "": function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  },
  "super": "_Deserializer0",
  deserializeSendPort$1: function(x) {
    var t1, tag;
    $.listTypeCheck(x);
    t1 = $.getInterceptor$JSStringJSArray(x);
    tag = $.stringTypeCheck(t1.$index(x, 1));
    switch (tag) {
      case "nativejs":
        return $._JsSendPortSync$($.numTypeCheck(t1.$index(x, 2)));
      case "dart":
        return $.ReceivePortSync__lookup($.numTypeCheck(t1.$index(x, 2)), $.numTypeCheck(t1.$index(x, 3)));
      default:
        throw $.$$throw("Illegal SendPortSync type: " + $.S(tag));
    }
  }
};

$$._JsSendPortSync = {
  "": function _JsSendPortSync(_id) {
    this._id = _id;
  },
  "super": "Object",
  callSync$1: function(message) {
    var serialized, t1, result;
    serialized = $._JsSerializer$().traverse$1(message);
    t1 = this._id;
    $.intTypeCheck(t1);
    result = ReceivePortSync.dispatchCall(t1, serialized);
    return $._JsDeserializer$().deserialize$1(result);
  },
  $eq: function(other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_JsSendPortSync) {
      t1 = this._id;
      t2 = other._id;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    return $.intTypeCheck(this._id);
  },
  $is_JsSendPortSync: true,
  $isSendPortSync: true
};

$$._RemoteSendPortSync = {
  "": function _RemoteSendPortSync(_isolateId, _portId) {
    this._isolateId = _isolateId;
    this._portId = _portId;
  },
  "super": "Object",
  get$_portId: function() {
    return this._portId;
  },
  callSync$1: function(message) {
    var serialized, result;
    serialized = $._JsSerializer$().traverse$1(message);
    result = $._RemoteSendPortSync__call(this._isolateId, this._portId, serialized);
    return $._JsDeserializer$().deserialize$1(result);
  },
  $eq: function(other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_RemoteSendPortSync) {
      t1 = this._isolateId;
      t2 = other._isolateId;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this._portId;
        t2 = other._portId;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    var t1, t2;
    t1 = this._isolateId;
    t2 = this._portId;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return $.intTypeCheck($.$$shr(t1, 16 + t2));
  },
  $is_RemoteSendPortSync: true,
  $isSendPortSync: true
};

$$._LocalSendPortSync = {
  "": function _LocalSendPortSync(_receivePort) {
    this._receivePort = _receivePort;
  },
  "super": "Object",
  callSync$1: function(message) {
    var t1, copy, result;
    t1 = $._JsSerializer$().traverse$1(message);
    copy = $._JsDeserializer$().deserialize$1(t1);
    result = this._receivePort._callback$1(copy);
    t1 = $._JsSerializer$().traverse$1(result);
    return $._JsDeserializer$().deserialize$1(t1);
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_LocalSendPortSync && $.boolConversionCheck(this._receivePort.$eq(other._receivePort));
  },
  get$hashCode: function() {
    return $.intTypeCheck($.hashCode(this._receivePort));
  },
  $is_LocalSendPortSync: true,
  $isSendPortSync: true
};

$$.ReceivePortSync = {
  "": function ReceivePortSync(_portId, _callback, _listener) {
    this._portId = _portId;
    this._callback = _callback;
    this._listener = _listener;
  },
  "super": "Object",
  get$_portId: function() {
    return this._portId;
  },
  _callback$1: function(arg0) {
    return this._callback.call$1(arg0);
  },
  get$_listenerName: function() {
    return $.stringTypeCheck($.ReceivePortSync__getListenerName($.ReceivePortSync__isolateId(), this._portId));
  },
  receive$1: function(callback) {
    this._callback = $.functionTypeCheck(callback);
    if (this._listener == null) {
      this._listener = $.propertyTypeCheck(new $.ReceivePortSync_receive_anon(this), "$isEventListener");
      $.add($.$$index($.callTypeCheck(window, "$isWindow").get$on(), this.get$_listenerName()), this._listener);
    }
  },
  close$0: function() {
    $.remove($.ReceivePortSync__portMap, this._portId);
    if (!(this._listener == null))
      $.remove($.$$index($.callTypeCheck(window, "$isWindow").get$on(), this.get$_listenerName()), this._listener);
  },
  toSendPort$0: function() {
    return $._LocalSendPortSync$_internal(this);
  },
  ReceivePortSync$0: function() {
    if ($.ReceivePortSync__portIdCount == null) {
      $.ReceivePortSync__portIdCount = 0;
      $.ReceivePortSync__portMap = $.callTypeCheck($.Map_Map($.$int, $.ReceivePortSync), "$isMap");
    }
    var t1 = $.ReceivePortSync__portIdCount;
    $.ReceivePortSync__portIdCount = $.intTypeCheck($.$$add(t1, 1));
    this._portId = $.numTypeCheck(t1);
    $.$$indexSet($.ReceivePortSync__portMap, this._portId, this);
  },
  $isReceivePortSync: true
};

$$._MessageTraverserVisitedMap = {
  "": function _MessageTraverserVisitedMap() {
  },
  "super": "Object",
  $index: function(object) {
    return;
  },
  $indexSet: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  },
  $is_MessageTraverserVisitedMap: true
};

$$._MessageTraverser0 = {
  "": function _MessageTraverser() {
  },
  "super": "Object",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      t1.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.$isMap())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Serializer0 = {
  "": function _Serializer() {
  },
  "super": "_MessageTraverser0",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.intTypeCheck(t1.$index(list));
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = $.intTypeCheck($.$$add(id, 1));
    t1.$indexSet(list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.intTypeCheck(t1.$index(map));
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = $.intTypeCheck($.$$add(id, 1));
    t1.$indexSet(map, id);
    return ["map", id, this._serializeList$1($.toList(map.get$keys())), this._serializeList$1($.toList(map.get$values()))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, i, t2;
    $.listTypeCheck(list);
    t1 = $.getInterceptor$JSStringJSArray(list);
    len = t1.get$length(list);
    $.intTypeCheck(len);
    if (len !== (len | 0))
      return this._serializeList$1$bailout(1, list, t1, len);
    result = $.List_List$fixedLength(len, null);
    $.setRuntimeTypeInfo(result, []);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    var result, i, t2;
    result = $.List_List$fixedLength(len, null);
    $.setRuntimeTypeInfo(result, []);
    for (i = 0; $.$$lt(i, len); ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= result.length)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  }
};

$$._Deserializer0 = {
  "": function _Deserializer() {
  },
  "super": "Object",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.callTypeCheck($.HashMap_HashMap(), "$isMap");
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    $.assertHelper(typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()));
    switch ($.$$index(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, result;
    id = $.intTypeCheck($.$$index($.listTypeCheck(x), 1));
    result = this._deserialized.$index(id);
    $.assertHelper(!(result == null));
    return result;
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i, t2;
    $.listTypeCheck(x);
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = $.intTypeCheck(t1.$index(x, 1));
    dartList = $.listTypeCheck(t1.$index(x, 2));
    this._deserialized.$indexSet(id, dartList);
    t1 = $.getInterceptor$JSStringJSArray(dartList);
    len = $.intTypeCheck(t1.get$length(dartList));
    for (i = 0; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, len); i = $.intTypeCheck(t2.$add(i, 1)))
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, keys, values, len, t2, t3, i;
    $.listTypeCheck(x);
    result = $.callTypeCheck($.Map_Map(), "$isMap");
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = $.intTypeCheck(t1.$index(x, 1));
    this._deserialized.$indexSet(id, result);
    keys = $.listTypeCheck(t1.$index(x, 2));
    values = $.listTypeCheck(t1.$index(x, 3));
    t1 = $.getInterceptor$JSStringJSArray(keys);
    len = $.intTypeCheck(t1.get$length(keys));
    t2 = $.getInterceptor$JSStringJSArray(values);
    t3 = t2.get$length(values);
    $.assertHelper(len == null ? t3 == null : len === t3);
    for (i = 0; t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, len); i = $.intTypeCheck(t3.$add(i, 1)))
      result.$indexSet(this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    $.listTypeCheck(x);
    throw $.$$throw("Unexpected serialized object");
  }
};

$$._DOMWindowCrossFrame = {
  "": function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  },
  "super": "Object",
  get$parent: function() {
    return $.callTypeCheck($._DOMWindowCrossFrame__createSafe(this._window.parent), "$isWindowBase");
  },
  close$0: function() {
    return $.voidTypeCheck(this._window.close());
  },
  $isWindowBase: function() {
    return true;
  }
};

$$.FixedSizeListIterator = {
  "": function FixedSizeListIterator(_array, _length, _position, _current) {
    this._array = _array;
    this._length = _length;
    this._position = _position;
    this._current = _current;
  },
  "super": "Object",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if ($.CONSTANT1.$lt(nextPosition, t1)) {
      this._current = $.$$index(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1) {
    var nextPosition = $.intTypeCheck($.$$add(t1, 1));
    t1 = this._length;
    if ($.$$lt(nextPosition, t1)) {
      this._current = $.$$index(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $isIterator: true
};

$$.FilteredElementList = {
  "": function FilteredElementList(_node, _childNodes) {
    this._node = _node;
    this._childNodes = _childNodes;
  },
  "super": "Object",
  get$_filtered: function() {
    var t1 = $.List_List$from($.where(this._childNodes, new $.FilteredElementList__filtered_anon()), $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  forEach$1: function(f) {
    $.functionTypeCheck(f);
    $.forEach(this.get$_filtered(), f);
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isElement");
    this.$index(index).replaceWith$1(value);
  },
  set$length: function(newLength) {
    var t1, t2;
    $.intTypeCheck(newLength);
    t1 = $.length(this);
    t2 = $.getInterceptor$JSNumber(newLength);
    if (t2.$ge(newLength, t1))
      return;
    else if (t2.$lt(newLength, 0))
      throw $.$$throw($.ArgumentError$("Invalid list length"));
    this.removeRange$2(newLength, $.$$sub(t1, newLength));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isElement");
    $.add(this._childNodes, value);
  },
  addAll$1: function(iterable) {
    var t1, t2, t3, t4;
    for (t1 = $.iterator(iterable), t2 = this._childNodes, t3 = $.getInterceptor$JSArray(t2); $.boolConversionCheck(t1.moveNext$0());) {
      t4 = t1.get$current();
      $.callTypeCheck(t4, "$isElement");
      t3.add$1(t2, t4);
    }
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isElement");
    $.add(this._childNodes, value);
  },
  contains$1: function(element) {
    $.callTypeCheck(element, "$isElement");
    return typeof element === "object" && element !== null && element.$isElement() && $.boolConversionCheck($.contains(this._childNodes, element));
  },
  get$contains: function() {
    return new $.BoundClosure52(this, "contains$1");
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $.FilteredElementList_removeRange_anon());
  },
  clear$0: function() {
    $.clear(this._childNodes);
  },
  removeLast$0: function() {
    var t1 = $.last(this);
    if (!(t1 == null))
      t1.remove$0();
    return $.callTypeCheck(t1, "$isElement");
  },
  mappedBy$1: function(f) {
    $.functionTypeCheck(f);
    return $.listSuperNativeTypeCheck($.mappedBy(this.get$_filtered(), f), "$isIterable");
  },
  where$1: function(f) {
    $.functionTypeCheck(f);
    return $.listSuperNativeTypeCheck($.where(this.get$_filtered(), f), "$isIterable");
  },
  remove$1: function(element) {
    var t1, i, t2, indexElement;
    if (!(typeof element === "object" && element !== null && element.$isElement()))
      return;
    t1 = $.getInterceptor$JSStringJSArray(this);
    i = 0;
    while (true) {
      t2 = t1.get$length(this);
      if (typeof t2 !== "number")
        return this.remove$1$bailout1(1, element, t2, i);
      if (!(i < t2))
        break;
      indexElement = $.callTypeCheck(this.$index(i), "$isElement");
      if (indexElement === element) {
        indexElement.remove$0();
        return;
      }
      ++i;
    }
  },
  remove$1$bailout1: function(state0, element, t2, i, t1) {
    switch (state0) {
      case 0:
        if (!(typeof element === "object" && element !== null && element.$isElement()))
          return;
        t1 = $.getInterceptor$JSStringJSArray(this);
        i = 0;
      default:
        var t4, indexElement;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = t1.get$length(this);
              case 1:
                state0 = 0;
                t4 = $.getInterceptor$JSNumber(i);
                if (!t4.$lt(i, t2))
                  break L0;
                indexElement = $.callTypeCheck(this.$index(i), "$isElement");
                if (indexElement === element) {
                  indexElement.remove$0();
                  return;
                }
                i = t4.$add(i, 1);
                $.intTypeCheck(i);
              case 2:
                state0 = 0;
            }
    }
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, $.functionTypeCheck(test));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Element);
    $.setRuntimeTypeInfo(t1, [$.Element]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Element), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.isEmpty(this.get$_filtered()));
  },
  get$length: function() {
    return $.intTypeCheck($.length(this.get$_filtered()));
  },
  $index: function(index) {
    $.intTypeCheck(index);
    return $.callTypeCheck($.$$index(this.get$_filtered(), index), "$isElement");
  },
  get$iterator: function() {
    return $.propertyTypeCheck($.iterator(this.get$_filtered()), "$isIterator");
  },
  getRange$2: function(start, rangeLength) {
    return $.listTypeCheck($.getRange(this.get$_filtered(), start, rangeLength));
  },
  indexOf$2: function(element, start) {
    $.callTypeCheck(element, "$isElement");
    $.intTypeCheck(start);
    return $.intTypeCheck($.indexOf(this.get$_filtered(), element, start));
  },
  get$last: function() {
    return $.callTypeCheck($.last(this.get$_filtered()), "$isElement");
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$.JsonUnsupportedObjectError = {
  "": function JsonUnsupportedObjectError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
  },
  "super": "Object",
  toString$0: function() {
    if (!(this.cause == null))
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
};

$$.JsonListener = {
  "": function JsonListener() {
  },
  "super": "Object",
  handleString$1: function(value) {
    $.stringTypeCheck(value);
  },
  handleNumber$1: function(value) {
  },
  handleBool$1: function(value) {
  },
  handleNull$0: function() {
  },
  beginObject$0: function() {
  },
  propertyName$0: function() {
  },
  propertyValue$0: function() {
  },
  endObject$0: function() {
  },
  beginArray$0: function() {
  },
  arrayElement$0: function() {
  },
  endArray$0: function() {
  },
  fail$3: function(source, position, message) {
    $.stringTypeCheck(source);
  },
  $isJsonListener: true
};

$$.BuildJsonListener = {
  "": function BuildJsonListener(stack, currentContainer, key, value) {
    this.stack = stack;
    this.currentContainer = currentContainer;
    this.key = key;
    this.value = value;
  },
  "super": "JsonListener",
  get$value: function() {
    return this.value;
  },
  set$value: function(v) {
    this.value = v;
  },
  pushContainer$0: function() {
    var t1 = this.currentContainer;
    if (typeof t1 === "object" && t1 !== null && t1.$isMap())
      $.CONSTANT0.add$1(this.stack, this.key);
    $.CONSTANT0.add$1(this.stack, this.currentContainer);
  },
  popContainer$0: function() {
    var t1, t2;
    this.value = this.currentContainer;
    t1 = this.stack;
    if (0 >= t1.length)
      throw $.ioore(0);
    this.currentContainer = t1.pop();
    t2 = this.currentContainer;
    if (typeof t2 === "object" && t2 !== null && t2.$isMap()) {
      if (0 >= t1.length)
        throw $.ioore(0);
      this.key = $.stringTypeCheck(t1.pop());
    }
  },
  handleString$1: function(value) {
    this.value = $.stringTypeCheck(value);
  },
  handleNumber$1: function(value) {
    this.value = value;
  },
  handleBool$1: function(value) {
    this.value = value;
  },
  handleNull$0: function() {
    this.value = this.value;
  },
  beginObject$0: function() {
    this.pushContainer$0();
    this.currentContainer = $.makeLiteralMap([]);
  },
  propertyName$0: function() {
    this.key = $.stringTypeCheck(this.value);
    this.value = null;
  },
  propertyValue$0: function() {
    $.callTypeCheck(this.currentContainer, "$isMap").$indexSet(this.key, this.value);
    this.value = null;
    this.key = null;
  },
  endObject$0: function() {
    this.popContainer$0();
  },
  beginArray$0: function() {
    this.pushContainer$0();
    this.currentContainer = [];
  },
  arrayElement$0: function() {
    $.add($.listTypeCheck(this.currentContainer), this.value);
    this.value = null;
  },
  endArray$0: function() {
    this.popContainer$0();
  },
  get$result: function() {
    $.assertHelper(this.currentContainer == null);
    return this.value;
  }
};

$$.ReviverJsonListener = {
  "": function ReviverJsonListener(reviver, stack, currentContainer, key, value) {
    this.reviver = reviver;
    this.stack = stack;
    this.currentContainer = currentContainer;
    this.key = key;
    this.value = value;
  },
  "super": "BuildJsonListener",
  reviver$2: function(arg0, arg1) {
    return this.reviver.call$2(arg0, arg1);
  },
  arrayElement$0: function() {
    this.value = this.reviver$2($.length($.listTypeCheck(this.currentContainer)), this.value);
    $.BuildJsonListener.prototype.arrayElement$0.call(this);
  },
  propertyValue$0: function() {
    this.value = this.reviver$2(this.key, this.value);
    $.BuildJsonListener.prototype.propertyValue$0.call(this);
  },
  get$result: function() {
    return this.reviver$2("", this.value);
  }
};

$$.JsonParser = {
  "": function JsonParser(source, listener) {
    this.source = source;
    this.listener = listener;
  },
  "super": "Object",
  get$source: function() {
    return this.source;
  },
  get$listener: function() {
    return this.listener;
  },
  parse$0: function() {
    var states, t1, length, t2, t3, position, state, t4, $char, t5, position0;
    states = [];
    t1 = this.source;
    length = $.intTypeCheck($.length(t1));
    for (t2 = $.getInterceptor$JSString(t1), t3 = this.listener, position = 0, state = 0; t4 = $.getInterceptor$JSNumber(position), t4.$lt(position, length);) {
      $char = $.intTypeCheck(t2.charCodeAt$1(t1, position));
      switch ($char) {
        case 32:
        case 13:
        case 10:
        case 9:
          position = $.intTypeCheck(t4.$add(position, 1));
          break;
        case 34:
          t5 = $.getInterceptor$JSNumber(state);
          if ($.$$eq(t5.$and(state, 8), 0) !== true)
            this.fail$1(position);
          position0 = $.intTypeCheck(this.parseString$1(t4.$add(position, 1)));
          state = $.intTypeCheck(t5.$or(state, 28));
          position = position0;
          break;
        case 91:
          if ($.$$eq($.$$and(state, 4), 0) !== true)
            this.fail$1(position);
          t3.beginArray$0();
          $.CONSTANT0.add$1(states, state);
          position = $.intTypeCheck(t4.$add(position, 1));
          state = 1;
          break;
        case 123:
          if ($.$$eq($.$$and(state, 4), 0) !== true)
            this.fail$1(position);
          t3.beginObject$0();
          $.CONSTANT0.add$1(states, state);
          position = $.intTypeCheck(t4.$add(position, 1));
          state = 6;
          break;
        case 110:
          t4 = $.getInterceptor$JSNumber(state);
          if ($.$$eq(t4.$and(state, 4), 0) !== true)
            this.fail$1(position);
          position = $.intTypeCheck(this.parseNull$1(position));
          state = $.intTypeCheck(t4.$or(state, 28));
          break;
        case 102:
          t4 = $.getInterceptor$JSNumber(state);
          if ($.$$eq(t4.$and(state, 4), 0) !== true)
            this.fail$1(position);
          position = $.intTypeCheck(this.parseFalse$1(position));
          state = $.intTypeCheck(t4.$or(state, 28));
          break;
        case 116:
          t4 = $.getInterceptor$JSNumber(state);
          if ($.$$eq(t4.$and(state, 4), 0) !== true)
            this.fail$1(position);
          position = $.intTypeCheck(this.parseTrue$1(position));
          state = $.intTypeCheck(t4.$or(state, 28));
          break;
        case 58:
          if (!(state === 30))
            this.fail$1(position);
          t3.propertyName$0();
          position = $.intTypeCheck(t4.$add(position, 1));
          state = 19;
          break;
        case 44:
          if (state === 31) {
            t3.propertyValue$0();
            position = $.intTypeCheck(t4.$add(position, 1));
            state = 22;
          } else if (state === 29) {
            t3.arrayElement$0();
            position = $.intTypeCheck(t4.$add(position, 1));
            state = 17;
          } else
            this.fail$1(position);
          break;
        case 93:
          if (state === 1)
            t3.endArray$0();
          else if (state === 29) {
            t3.arrayElement$0();
            t3.endArray$0();
          } else
            this.fail$1(position);
          if (0 >= states.length)
            throw $.ioore(0);
          state = $.intTypeCheck($.$$or(states.pop(), 28));
          position = $.intTypeCheck(t4.$add(position, 1));
          break;
        case 125:
          if (state === 6)
            t3.endObject$0();
          else if (state === 31) {
            t3.propertyValue$0();
            t3.endObject$0();
          } else
            this.fail$1(position);
          if (0 >= states.length)
            throw $.ioore(0);
          state = $.intTypeCheck($.$$or(states.pop(), 28));
          position = $.intTypeCheck(t4.$add(position, 1));
          break;
        default:
          t4 = $.getInterceptor$JSNumber(state);
          if ($.$$eq(t4.$and(state, 4), 0) !== true)
            this.fail$1(position);
          position = $.intTypeCheck(this.parseNumber$2($char, position));
          state = $.intTypeCheck(t4.$or(state, 28));
          break;
      }
    }
    if (!(state === 28))
      this.fail$1(position);
  },
  parseTrue$1: function(position) {
    var t1, t2, t3, t5;
    if (position !== (position | 0))
      return this.parseTrue$1$bailout(1, position);
    t1 = this.source;
    t2 = $.getInterceptor$JSString(t1);
    t3 = t2.charCodeAt$1(t1, position);
    if (typeof t3 !== "number")
      return this.parseTrue$1$bailout(2, position, t1, t2, t3);
    $.assertHelper(t3 === 116);
    t3 = $.length(t1);
    t5 = position + 4;
    if (typeof t3 !== "number")
      return this.parseTrue$1$bailout(3, position, t1, t2, t3);
    if (t3 < t5)
      this.fail$2(position, "Unexpected identifier");
    t3 = t2.charCodeAt$1(t1, position + 1);
    if (typeof t3 !== "number")
      return this.parseTrue$1$bailout(4, position, t1, t2, t3, $.CONSTANT1);
    if (t3 === 114) {
      t3 = t2.charCodeAt$1(t1, position + 2);
      if (typeof t3 !== "number")
        return this.parseTrue$1$bailout(5, position, t1, t2, t3, $.CONSTANT1);
      if (t3 === 117) {
        t1 = t2.charCodeAt$1(t1, position + 3);
        if (typeof t1 !== "number")
          return this.parseTrue$1$bailout(6, position, t1, null, null, $.CONSTANT1);
        t3 = !(t1 === 101);
        t1 = t3;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      this.fail$1(position);
    this.listener.handleBool$1(true);
    return t5;
  },
  parseTrue$1$bailout: function(state0, position, t1, t2, t3, t5) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.source;
        t2 = $.getInterceptor$JSString(t1);
        t3 = t2.charCodeAt$1(t1, position);
      case 2:
        state0 = 0;
        $.assertHelper($.$$eq(t3, 116));
        t3 = $.length(t1);
      case 3:
        state0 = 0;
        t5 = $.getInterceptor$JSNumber(position);
        if ($.boolConversionCheck($.$$lt(t3, t5.$add(position, 4))))
          this.fail$2(position, "Unexpected identifier");
        t3 = t2.charCodeAt$1(t1, t5.$add(position, 1));
      case 4:
        state0 = 0;
      default:
        if (state0 === 6 || state0 === 5 || state0 === 0 && $.$$eq(t3, 114) === true)
          switch (state0) {
            case 0:
              t3 = t2.charCodeAt$1(t1, t5.$add(position, 2));
            case 5:
              state0 = 0;
            case 6:
              if (state0 === 6 || state0 === 0 && $.$$eq(t3, 117) === true)
                switch (state0) {
                  case 0:
                    t1 = t2.charCodeAt$1(t1, t5.$add(position, 3));
                  case 6:
                    state0 = 0;
                    t3 = $.$$eq(t1, 101) !== true;
                    t1 = t3;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          this.fail$1(position);
        this.listener.handleBool$1(true);
        return $.intTypeCheck(t5.$add(position, 4));
    }
  },
  parseFalse$1: function(position) {
    var t1, t2, t3, t5;
    if (position !== (position | 0))
      return this.parseFalse$1$bailout(1, position);
    t1 = this.source;
    t2 = $.getInterceptor$JSString(t1);
    t3 = t2.charCodeAt$1(t1, position);
    if (typeof t3 !== "number")
      return this.parseFalse$1$bailout(2, position, t1, t2, t3);
    $.assertHelper(t3 === 102);
    t3 = $.length(t1);
    t5 = position + 5;
    if (typeof t3 !== "number")
      return this.parseFalse$1$bailout(3, position, t1, t2, t3);
    if (t3 < t5)
      this.fail$2(position, "Unexpected identifier");
    t3 = t2.charCodeAt$1(t1, position + 1);
    if (typeof t3 !== "number")
      return this.parseFalse$1$bailout(4, position, t1, t2, t3, $.CONSTANT1);
    if (t3 === 97) {
      t3 = t2.charCodeAt$1(t1, position + 2);
      if (typeof t3 !== "number")
        return this.parseFalse$1$bailout(5, position, t1, t2, t3, $.CONSTANT1);
      if (t3 === 108) {
        t3 = t2.charCodeAt$1(t1, position + 3);
        if (typeof t3 !== "number")
          return this.parseFalse$1$bailout(6, position, t1, t2, t3, $.CONSTANT1);
        if (t3 === 115) {
          t1 = t2.charCodeAt$1(t1, position + 4);
          if (typeof t1 !== "number")
            return this.parseFalse$1$bailout(7, position, t1, null, null, $.CONSTANT1);
          t3 = !(t1 === 101);
          t1 = t3;
        } else
          t1 = true;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      this.fail$1(position);
    this.listener.handleBool$1(false);
    return t5;
  },
  parseFalse$1$bailout: function(state0, position, t1, t2, t3, t5) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.source;
        t2 = $.getInterceptor$JSString(t1);
        t3 = t2.charCodeAt$1(t1, position);
      case 2:
        state0 = 0;
        $.assertHelper($.$$eq(t3, 102));
        t3 = $.length(t1);
      case 3:
        state0 = 0;
        t5 = $.getInterceptor$JSNumber(position);
        if ($.boolConversionCheck($.$$lt(t3, t5.$add(position, 5))))
          this.fail$2(position, "Unexpected identifier");
        t3 = t2.charCodeAt$1(t1, t5.$add(position, 1));
      case 4:
        state0 = 0;
      default:
        if (state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && $.$$eq(t3, 97) === true)
          switch (state0) {
            case 0:
              t3 = t2.charCodeAt$1(t1, t5.$add(position, 2));
            case 5:
              state0 = 0;
            default:
              if (state0 === 7 || state0 === 6 || state0 === 0 && $.$$eq(t3, 108) === true)
                switch (state0) {
                  case 0:
                    t3 = t2.charCodeAt$1(t1, t5.$add(position, 3));
                  case 6:
                    state0 = 0;
                  case 7:
                    if (state0 === 7 || state0 === 0 && $.$$eq(t3, 115) === true)
                      switch (state0) {
                        case 0:
                          t1 = t2.charCodeAt$1(t1, t5.$add(position, 4));
                        case 7:
                          state0 = 0;
                          t3 = $.$$eq(t1, 101) !== true;
                          t1 = t3;
                      }
                    else
                      t1 = true;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          this.fail$1(position);
        this.listener.handleBool$1(false);
        return $.intTypeCheck(t5.$add(position, 5));
    }
  },
  parseNull$1: function(position) {
    var t1, t2, t3, t5;
    if (position !== (position | 0))
      return this.parseNull$1$bailout(1, position);
    t1 = this.source;
    t2 = $.getInterceptor$JSString(t1);
    t3 = t2.charCodeAt$1(t1, position);
    if (typeof t3 !== "number")
      return this.parseNull$1$bailout(2, position, t1, t2, t3);
    $.assertHelper(t3 === 110);
    t3 = $.length(t1);
    t5 = position + 4;
    if (typeof t3 !== "number")
      return this.parseNull$1$bailout(3, position, t1, t2, t3);
    if (t3 < t5)
      this.fail$2(position, "Unexpected identifier");
    t3 = t2.charCodeAt$1(t1, position + 1);
    if (typeof t3 !== "number")
      return this.parseNull$1$bailout(4, position, t1, t2, t3, $.CONSTANT1);
    if (t3 === 117) {
      t3 = t2.charCodeAt$1(t1, position + 2);
      if (typeof t3 !== "number")
        return this.parseNull$1$bailout(5, position, t1, t2, t3, $.CONSTANT1);
      if (t3 === 108) {
        t1 = t2.charCodeAt$1(t1, position + 3);
        if (typeof t1 !== "number")
          return this.parseNull$1$bailout(6, position, t1, null, null, $.CONSTANT1);
        t3 = !(t1 === 108);
        t1 = t3;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      this.fail$1(position);
    this.listener.handleNull$0();
    return t5;
  },
  parseNull$1$bailout: function(state0, position, t1, t2, t3, t5) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.source;
        t2 = $.getInterceptor$JSString(t1);
        t3 = t2.charCodeAt$1(t1, position);
      case 2:
        state0 = 0;
        $.assertHelper($.$$eq(t3, 110));
        t3 = $.length(t1);
      case 3:
        state0 = 0;
        t5 = $.getInterceptor$JSNumber(position);
        if ($.boolConversionCheck($.$$lt(t3, t5.$add(position, 4))))
          this.fail$2(position, "Unexpected identifier");
        t3 = t2.charCodeAt$1(t1, t5.$add(position, 1));
      case 4:
        state0 = 0;
      default:
        if (state0 === 6 || state0 === 5 || state0 === 0 && $.$$eq(t3, 117) === true)
          switch (state0) {
            case 0:
              t3 = t2.charCodeAt$1(t1, t5.$add(position, 2));
            case 5:
              state0 = 0;
            case 6:
              if (state0 === 6 || state0 === 0 && $.$$eq(t3, 108) === true)
                switch (state0) {
                  case 0:
                    t1 = t2.charCodeAt$1(t1, t5.$add(position, 3));
                  case 6:
                    state0 = 0;
                    t3 = $.$$eq(t1, 108) !== true;
                    t1 = t3;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          this.fail$1(position);
        this.listener.handleNull$0();
        return $.intTypeCheck(t5.$add(position, 4));
    }
  },
  parseString$1: function(position) {
    var t1, t2, t3, t4, position0, t5, t6, $char, firstEscape, chars, hexStart, value, i, value0, char0, result;
    $.intTypeCheck(position);
    t1 = this.source;
    t2 = $.getInterceptor$JSString(t1);
    t3 = $.getInterceptor$JSNumber(position);
    t4 = $.getInterceptor$JSStringJSArray(t1);
    position0 = position;
    do {
      t5 = t4.get$length(t1);
      t6 = $.getInterceptor(position0);
      if (position0 == null ? t5 == null : position0 === t5)
        this.fail$2(t3.$sub(position, 1), "Unterminated string");
      $char = $.intTypeCheck(t2.charCodeAt$1(t1, position0));
      if ($char === 34) {
        this.listener.handleString$1(t2.substring$2(t1, position, position0));
        return $.intTypeCheck(t6.$add(position0, 1));
      }
      if ($.$$lt($char, 32))
        this.fail$2(position0, "Control character in string");
      position0 = $.intTypeCheck(t6.$add(position0, 1));
    } while (!($char === 92));
    firstEscape = $.intTypeCheck($.$$sub(position0, 1));
    chars = [];
    for (; true;) {
      t5 = t4.get$length(t1);
      if (position0 == null ? t5 == null : position0 === t5)
        this.fail$2(t3.$sub(position, 1), "Unterminated string");
      $char = $.intTypeCheck(t2.charCodeAt$1(t1, position0));
      switch ($char) {
        case 98:
          $char = 8;
          break;
        case 102:
          $char = 12;
          break;
        case 110:
          $char = 10;
          break;
        case 114:
          $char = 13;
          break;
        case 116:
          $char = 9;
          break;
        case 47:
        case 92:
        case 34:
          break;
        case 117:
          hexStart = $.intTypeCheck($.$$sub(position0, 1));
          for (value = 0, i = 0; t5 = $.getInterceptor$JSNumber(i), t5.$lt(i, 4); i = $.intTypeCheck(t5.$add(i, 1))) {
            position0 = $.intTypeCheck($.$$add(position0, 1));
            t6 = t4.get$length(t1);
            if (position0 == null ? t6 == null : position0 === t6)
              this.fail$2(t3.$sub(position, 1), "Unterminated string");
            $char = $.intTypeCheck($.$$sub($.intTypeCheck(t2.charCodeAt$1(t1, position0)), 48));
            t6 = $.getInterceptor$JSNumber($char);
            if (t6.$lt($char, 0))
              this.fail$2(hexStart, "Invalid unicode escape");
            if (t6.$lt($char, 10)) {
              value0 = $.intTypeCheck($.$$add($.$$mul(value, 16), $char));
              value = value0;
            } else {
              char0 = $.intTypeCheck($.$$sub(t6.$or($char, 32), 49));
              t6 = $.getInterceptor$JSNumber(char0);
              if (t6.$lt(char0, 0) || t6.$gt(char0, 5))
                this.fail$2(hexStart, "Invalid unicode escape");
              value0 = $.intTypeCheck($.$$add($.$$add($.$$mul(value, 16), char0), 10));
              value = value0;
            }
          }
          $char = value;
          break;
        default:
          if ($.$$lt($char, 32))
            this.fail$2(position0, "Control character in string");
          this.fail$2(position0, "Unrecognized string escape");
      }
      do {
        $.CONSTANT0.add$1(chars, $char);
        position0 = $.intTypeCheck($.$$add(position0, 1));
        t5 = t4.get$length(t1);
        t6 = $.getInterceptor(position0);
        if (position0 == null ? t5 == null : position0 === t5)
          this.fail$2(t3.$sub(position, 1), "Unterminated string");
        $char = $.intTypeCheck(t2.charCodeAt$1(t1, position0));
        if ($char === 34) {
          result = $.stringTypeCheck($.String_String$fromCharCodes(chars));
          if (t3.$lt(position, firstEscape))
            result = $.S(t2.substring$2(t1, position, firstEscape)) + $.S(result);
          this.listener.handleString$1(result);
          return $.intTypeCheck(t6.$add(position0, 1));
        }
        if ($.$$lt($char, 32))
          this.fail$2(position0, "Control character in string");
      } while (!($char === 92));
      position0 = $.intTypeCheck(t6.$add(position0, 1));
    }
  },
  parseNumber$2: function($char, position) {
    var t1, t2, t3, position0, t4, t5;
    t1 = {};
    if ($char !== ($char | 0))
      return this.parseNumber$2$bailout(1, $char, position, t1);
    if (position !== (position | 0))
      return this.parseNumber$2$bailout(1, $char, position, t1);
    t2 = this.source;
    t3 = $.length(t2);
    $.intTypeCheck(t3);
    t1.isDouble_0 = false;
    if ($char === 45) {
      position0 = position + 1;
      if (position0 === t3)
        this.fail$2(position0, "Missing expected digit");
      t4 = $.charCodeAt(t2, position0);
      $.intTypeCheck(t4);
      if (t4 !== (t4 | 0))
        return this.parseNumber$2$bailout(3, null, position, t1, t2, t3, position0, t4);
      $char = t4;
    } else
      position0 = position;
    if ($char < 48 || $char > 57)
      this.fail$2(position0, "Missing expected digit");
    t4 = new $.JsonParser_parseNumber_handleLiteral(t1, this, position);
    if ($char === 48) {
      position = position0 + 1;
      if (position === t3)
        return $.intTypeCheck(t4.call$1(position));
      t5 = $.charCodeAt(t2, position);
      $.intTypeCheck(t5);
      if (t5 !== (t5 | 0))
        return this.parseNumber$2$bailout(5, null, null, t1, t2, t3, t4, position, t5);
      if (48 <= t5 && t5 <= 57)
        this.fail$1(position);
      $char = t5;
    } else {
      t5 = $.getInterceptor$JSString(t2);
      position = position0;
      do {
        ++position;
        if (position === t3)
          return $.intTypeCheck(t4.call$1(position));
        $char = t5.charCodeAt$1(t2, position);
        $.intTypeCheck($char);
        if ($char !== ($char | 0))
          return this.parseNumber$2$bailout(7, $char, null, t1, t2, t3, t4, t5, position);
      } while (48 <= $char && $char <= 57);
    }
    if ($char === 46) {
      t1.isDouble_0 = true;
      ++position;
      if (position === t3)
        this.fail$2(position, "Missing expected digit");
      t5 = $.getInterceptor$JSString(t2);
      $char = t5.charCodeAt$1(t2, position);
      $.intTypeCheck($char);
      if ($char !== ($char | 0))
        return this.parseNumber$2$bailout(9, $char, null, t1, t2, t3, t4, position, t5);
      if ($char < 48 || $char > 57)
        this.fail$1(position);
      do {
        ++position;
        if (position === t3)
          return $.intTypeCheck(t4.call$1(position));
        $char = t5.charCodeAt$1(t2, position);
        $.intTypeCheck($char);
        if ($char !== ($char | 0))
          return this.parseNumber$2$bailout(11, $char, null, t1, t2, t3, t4, position, t5);
      } while (48 <= $char && $char <= 57);
    }
    if ($char === 101 || $char === 69) {
      t1.isDouble_0 = true;
      ++position;
      if (position === t3)
        this.fail$2(position, "Missing expected digit");
      t1 = $.getInterceptor$JSString(t2);
      $char = t1.charCodeAt$1(t2, position);
      $.intTypeCheck($char);
      if ($char !== ($char | 0))
        return this.parseNumber$2$bailout(13, $char, null, position, t2, t3, t4, t1);
      if ($char === 43 || $char === 45) {
        ++position;
        if (position === t3)
          this.fail$2(position, "Missing expected digit");
        $char = t1.charCodeAt$1(t2, position);
        $.intTypeCheck($char);
        if ($char !== ($char | 0))
          return this.parseNumber$2$bailout(15, $char, null, position, t2, t3, t4, t1);
      }
      if ($char < 48 || $char > 57)
        this.fail$2(position, "Missing expected digit");
      do {
        ++position;
        if (position === t3)
          return $.intTypeCheck(t4.call$1(position));
        $char = t1.charCodeAt$1(t2, position);
        $.intTypeCheck($char);
        if ($char !== ($char | 0))
          return this.parseNumber$2$bailout(17, $char, null, position, t2, t3, t4, t1);
      } while (48 <= $char && $char <= 57);
    }
    return $.intTypeCheck(t4.call$1(position));
  },
  parseNumber$2$bailout: function(state0, $char, position, t1, t2, t3, t4, t5, t6) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        state0 = 0;
        t2 = this.source;
        t3 = $.length(t2);
        $.intTypeCheck(t3);
        t1.isDouble_0 = false;
      default:
        if (state0 === 3 || state0 === 2 || state0 === 0 && $char === 45)
          switch (state0) {
            case 0:
              t4 = $.$$add(position, 1);
              $.intTypeCheck(t4);
            case 2:
              state0 = 0;
              if (t4 == null ? t3 == null : t4 === t3)
                this.fail$2(t4, "Missing expected digit");
              t5 = $.charCodeAt(t2, t4);
              $.intTypeCheck(t5);
            case 3:
              state0 = 0;
              position0 = t4;
              $char = t5;
          }
        else
          position0 = position;
        t4 = $.getInterceptor$JSNumber($char);
        if (t4.$lt($char, 48) || t4.$gt($char, 57))
          this.fail$2(position0, "Missing expected digit");
        t4 = new $.JsonParser_parseNumber_handleLiteral(t1, this, position);
      case 4:
      case 5:
      case 6:
      case 7:
        if (state0 === 5 || state0 === 4 || state0 === 0 && $char === 48)
          switch (state0) {
            case 0:
              t5 = $.$$add(position0, 1);
              $.intTypeCheck(t5);
            case 4:
              state0 = 0;
              if (t5 == null ? t3 == null : t5 === t3)
                return $.intTypeCheck(t4.call$1(t5));
              t6 = $.charCodeAt(t2, t5);
              $.intTypeCheck(t6);
            case 5:
              state0 = 0;
              if ($.CONSTANT1.$le(48, t6) && $.$$le(t6, 57))
                this.fail$1(t5);
              position = t5;
              $char = t6;
          }
        else
          switch (state0) {
            case 0:
              t5 = $.getInterceptor$JSString(t2);
              position = position0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t6 = $.$$add(position, 1);
                      $.intTypeCheck(t6);
                    case 6:
                      state0 = 0;
                      if (t6 == null ? t3 == null : t6 === t3)
                        return $.intTypeCheck(t4.call$1(t6));
                      $char = t5.charCodeAt$1(t2, t6);
                      $.intTypeCheck($char);
                    case 7:
                      state0 = 0;
                      if (!($.CONSTANT1.$le(48, $char) && $.$$le($char, 57)))
                        break L0;
                  }
              position = t6;
          }
      case 8:
      case 9:
      case 10:
      case 11:
        if (state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 0 && $char === 46)
          switch (state0) {
            case 0:
              t1.isDouble_0 = true;
              t5 = $.$$add(position, 1);
              $.intTypeCheck(t5);
            case 8:
              state0 = 0;
              if (t5 == null ? t3 == null : t5 === t3)
                this.fail$2(t5, "Missing expected digit");
              t6 = $.getInterceptor$JSString(t2);
              $char = t6.charCodeAt$1(t2, t5);
              $.intTypeCheck($char);
            case 9:
              state0 = 0;
              t7 = $.getInterceptor$JSNumber($char);
              if (t7.$lt($char, 48) || t7.$gt($char, 57))
                this.fail$1(t5);
              position = t5;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      t5 = $.$$add(position, 1);
                      $.intTypeCheck(t5);
                    case 10:
                      state0 = 0;
                      if (t5 == null ? t3 == null : t5 === t3)
                        return $.intTypeCheck(t4.call$1(t5));
                      $char = t6.charCodeAt$1(t2, t5);
                      $.intTypeCheck($char);
                    case 11:
                      state0 = 0;
                      if (!($.CONSTANT1.$le(48, $char) && $.$$le($char, 57)))
                        break L1;
                  }
              position = t5;
          }
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
        var position0, t7;
        if (state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 0 && ($char === 101 || $char === 69))
          switch (state0) {
            case 0:
              t1.isDouble_0 = true;
              t1 = $.$$add(position, 1);
              $.intTypeCheck(t1);
            case 12:
              state0 = 0;
              if (t1 == null ? t3 == null : t1 === t3)
                this.fail$2(t1, "Missing expected digit");
              t5 = $.getInterceptor$JSString(t2);
              $char = t5.charCodeAt$1(t2, t1);
              $.intTypeCheck($char);
            case 13:
              state0 = 0;
            default:
              if (state0 === 15 || state0 === 14 || state0 === 0 && ($char === 43 || $char === 45))
                switch (state0) {
                  case 0:
                    t1 = $.$$add(t1, 1);
                    $.intTypeCheck(t1);
                  case 14:
                    state0 = 0;
                    if (t1 == null ? t3 == null : t1 === t3)
                      this.fail$2(t1, "Missing expected digit");
                    $char = t5.charCodeAt$1(t2, t1);
                    $.intTypeCheck($char);
                  case 15:
                    state0 = 0;
                    position = t1;
                }
              else
                position = t1;
              t1 = $.getInterceptor$JSNumber($char);
              if (t1.$lt($char, 48) || t1.$gt($char, 57))
                this.fail$2(position, "Missing expected digit");
            case 16:
            case 17:
              L2:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = $.$$add(position, 1);
                      $.intTypeCheck(t1);
                    case 16:
                      state0 = 0;
                      if (t1 == null ? t3 == null : t1 === t3)
                        return $.intTypeCheck(t4.call$1(t1));
                      $char = t5.charCodeAt$1(t2, t1);
                      $.intTypeCheck($char);
                    case 17:
                      state0 = 0;
                      if (!($.CONSTANT1.$le(48, $char) && $.$$le($char, 57)))
                        break L2;
                  }
              position = t1;
          }
        return $.intTypeCheck(t4.call$1(position));
    }
  },
  fail$2: function(position, message) {
    var t1, t2, sliceEnd, slice;
    $.intTypeCheck(position);
    if (position !== (position | 0))
      return this.fail$2$bailout(1, position, message);
    $.stringTypeCheck(message);
    if (message == null)
      message = "Unexpected character";
    t1 = this.listener;
    t2 = this.source;
    t1.fail$3(t2, position, message);
    sliceEnd = position + 20;
    t1 = $.getInterceptor$JSString(t2);
    slice = $.CONSTANT1.$gt(sliceEnd, $.length(t2)) ? "'" + $.S(t1.substring$1(t2, position)) + "'" : "'" + $.S(t1.substring$2(t2, position, sliceEnd)) + "...'";
    throw $.$$throw($.FormatException$("Unexpected character at " + $.S(position) + ": " + slice));
  },
  fail$2$bailout: function(state0, position, message) {
    var t1, t2, sliceEnd, slice;
    $.stringTypeCheck(message);
    if (message == null)
      message = "Unexpected character";
    t1 = this.listener;
    t2 = this.source;
    t1.fail$3(t2, position, message);
    sliceEnd = $.intTypeCheck($.$$add(position, 20));
    t1 = $.getInterceptor$JSString(t2);
    slice = $.$$gt(sliceEnd, $.length(t2)) ? "'" + $.S(t1.substring$1(t2, position)) + "'" : "'" + $.S(t1.substring$2(t2, position, sliceEnd)) + "...'";
    throw $.$$throw($.FormatException$("Unexpected character at " + $.S(position) + ": " + slice));
  },
  fail$1: function(position) {
    return this.fail$2(position, null);
  }
};

$$._JsonStringifier = {
  "": function _JsonStringifier(sb, seen) {
    this.sb = sb;
    this.seen = seen;
  },
  "super": "Object",
  get$sb: function() {
    return this.sb;
  },
  checkCycle$1: function(object) {
    var t1, i, t2;
    for (t1 = this.seen, i = 0; $.$$lt(i, t1.length); ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      if (t2 == null ? object == null : t2 === object)
        throw $.$$throw("Cyclic structure");
    }
    $.CONSTANT0.add$1(t1, object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!$.boolConversionCheck(this.stringifyJsonValue$1(object))) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!$.boolConversionCheck(this.stringifyJsonValue$1(customJson)))
          throw $.$$throw($.JsonUnsupportedObjectError$(object));
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.$$throw($.JsonUnsupportedObjectError$withCause(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i;
    t1 = {};
    if (typeof object === "number") {
      this.sb.add$1($.stringTypeCheck($.CONSTANT4.toString$0(object)));
      return true;
    } else if (object === true) {
      this.sb.add$1("true");
      return true;
    } else if (object === false) {
      this.sb.add$1("false");
      return true;
    } else if (object == null) {
      this.sb.add$1("null");
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t1.add$1("\"");
      $._JsonStringifier_escape(t1, object);
      t1.add$1("\"");
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || object.$isList())) {
      if (typeof object !== "object" || object === null || object.constructor !== Array && !object.$isJavaScriptIndexingBehavior())
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t2 = this.sb;
      t2.add$1("[");
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; $.$$lt(i, object.length); ++i) {
          t2.add$1(",");
          if (i !== (i | 0))
            throw $.iae(i);
          if (i < 0 || i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t2.add$1("]");
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && object.$isMap()) {
      this.checkCycle$1(object);
      t2 = this.sb;
      t2.add$1("{");
      t1.first_0 = true;
      object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
      t2.add$1("}");
      t2 = this.seen;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2.pop();
      return true;
    } else
      return false;
  },
  stringifyJsonValue$1$bailout: function(state0, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, i, t3;
        if (state0 === 0 && typeof object === "number") {
          this.sb.add$1($.stringTypeCheck($.CONSTANT4.toString$0(object)));
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                this.sb.add$1("true");
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      this.sb.add$1("false");
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            this.sb.add$1("null");
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t1.add$1("\"");
                                  $._JsonStringifier_escape(t1, object);
                                  t1.add$1("\"");
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || object.$isList()))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t2 = this.sb;
                                            t2.add$1("[");
                                            t1 = $.getInterceptor$JSStringJSArray(object);
                                            if ($.boolConversionCheck($.$$gt(t1.get$length(object), 0))) {
                                              this.stringifyValue$1(t1.$index(object, 0));
                                              for (i = 1; t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, t1.get$length(object)); i = $.intTypeCheck(t3.$add(i, 1))) {
                                                t2.add$1(",");
                                                this.stringifyValue$1(t1.$index(object, i));
                                              }
                                            }
                                            t2.add$1("]");
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && object.$isMap()) {
                                        this.checkCycle$1(object);
                                        t2 = this.sb;
                                        t2.add$1("{");
                                        t1.first_0 = true;
                                        object.forEach$1(new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
                                        t2.add$1("}");
                                        t2 = this.seen;
                                        if (0 >= t2.length)
                                          throw $.ioore(0);
                                        t2.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  }
};

$$.Callback = {
  "": function Callback(_manualDispose, _liblib2$_id, _liblib2$_callback) {
    this._manualDispose = _manualDispose;
    this._liblib2$_id = _liblib2$_id;
    this._liblib2$_callback = _liblib2$_callback;
  },
  "super": "Object",
  get$_liblib2$_id: function() {
    return this._liblib2$_id;
  },
  get$_serialized: function() {
    return ["funcref", this._liblib2$_id, $.get$_proxiedObjectTable().get$sendPort()];
  },
  _initialize$1: function(manualDispose) {
    this._manualDispose = manualDispose;
    this._liblib2$_id = $.add($.get$_proxiedObjectTable(), this._liblib2$_callback);
    $.get$_proxiedObjectTable().globalize$1(this._liblib2$_id);
  },
  Callback$once$1: function(f) {
    this._liblib2$_callback = new $.anon1(this, $.functionTypeCheck(f));
    this._initialize$1(false);
  },
  $isCallback: true
};

$$.Proxy = {
  "": function Proxy(_port, _liblib2$_id) {
    this._port = _port;
    this._liblib2$_id = _liblib2$_id;
  },
  "super": "Object",
  get$_liblib2$_id: function() {
    return this._liblib2$_id;
  },
  $index: function(arg) {
    return $.Proxy__forward(this, "[]", "method", [arg]);
  },
  $indexSet: function(key, value) {
    return $.Proxy__forward(this, "[]=", "method", [key, value]);
  },
  $eq: function(other) {
    var t1;
    $.propertyTypeCheck(other, "$isProxy");
    if (other == null)
      return false;
    if (this === other)
      t1 = true;
    else
      t1 = typeof other === "object" && other !== null && !!other.$isProxy && $.boolConversionCheck($._jsPortEquals.callSync$1([$._serialize(this), $._serialize(other)]));
    return t1;
  },
  noSuchMethod$1: function(invocation) {
    var member, args, t1, kind;
    member = invocation.memberName;
    args = $.listTypeCheck(invocation.get$positionalArguments());
    if (args == null)
      args = [];
    if ($.boolConversionCheck(invocation.get$isGetter())) {
      t1 = $.getInterceptor$JSString(member);
      if ($.boolConversionCheck(t1.startsWith$1(member, "get:")))
        member = $.stringTypeCheck(t1.substring$1(member, 4));
      kind = "get";
    } else if ($.boolConversionCheck(invocation.get$isSetter())) {
      t1 = $.getInterceptor$JSString(member);
      if ($.boolConversionCheck(t1.endsWith$1(member, "=")))
        member = $.stringTypeCheck(t1.substring$2(member, 0, $.$$sub(t1.get$length(member), 1)));
      t1 = $.getInterceptor$JSString(member);
      if ($.boolConversionCheck(t1.startsWith$1(member, "set:")))
        member = $.stringTypeCheck(t1.substring$1(member, 4));
      kind = "set";
    } else {
      t1 = $.getInterceptor$JSString(member);
      if ($.boolConversionCheck(t1.startsWith$1(member, "get:"))) {
        member = $.stringTypeCheck(t1.substring$1(member, 4));
        kind = "get";
      } else if ($.boolConversionCheck(t1.startsWith$1(member, "set:"))) {
        member = $.stringTypeCheck(t1.substring$1(member, 4));
        kind = "set";
      } else
        kind = "method";
    }
    return $.Proxy__forward(this, member, kind, args);
  },
  $isProxy: true
};

$$.FunctionProxy = {
  "": function FunctionProxy(_port, _liblib2$_id) {
    this._port = _port;
    this._liblib2$_id = _liblib2$_id;
  },
  "super": "Proxy",
  noSuchMethod$1: function(invocation) {
    var t1, t2, result;
    if ($.boolConversionCheck(invocation.get$isMethod()) && invocation.memberName === "call") {
      t1 = this._liblib2$_id;
      t2 = $.toList($.mappedBy(invocation.get$positionalArguments(), $._serialize));
      result = this._port.callSync$1([t1, "", "apply", t2]);
      t1 = $.getInterceptor$JSStringJSArray(result);
      if ($.boolConversionCheck($.$$eq(t1.$index(result, 0), "throws")))
        throw $.$$throw(t1.$index(result, 1));
      return $._deserialize(t1.$index(result, 1));
    } else
      return $.Proxy.prototype.noSuchMethod$1.call(this, invocation);
  },
  $isFunctionProxy: true
};

$$._ProxiedObjectTable = {
  "": function _ProxiedObjectTable(_name, _nextId, _deletedCount, _registry, _port, _globalIds, _handleStack, _scopeIndices) {
    this._name = _name;
    this._nextId = _nextId;
    this._deletedCount = _deletedCount;
    this._registry = _registry;
    this._port = _port;
    this._globalIds = _globalIds;
    this._handleStack = _handleStack;
    this._scopeIndices = _scopeIndices;
  },
  "super": "Object",
  get$_registry: function() {
    return this._registry;
  },
  get$_scopeIndices: function() {
    return this._scopeIndices;
  },
  enterScope$0: function() {
    $.CONSTANT0.addLast$1(this._scopeIndices, this._handleStack.length);
  },
  exitScope$0: function() {
    var t1, start, t2, t3, i, t4, t5;
    t1 = this._scopeIndices;
    if (0 >= t1.length)
      throw $.ioore(0);
    start = $.intTypeCheck(t1.pop());
    for (t1 = this._registry, t2 = this._handleStack, t3 = this._globalIds, i = start; t4 = $.$$lt(i, t2.length), t5 = t2.length, t4; ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t5)
        throw $.ioore(i);
      if (!$.boolConversionCheck(t3.contains$1($.stringTypeCheck(t2[i])))) {
        if (i >= t2.length)
          throw $.ioore(i);
        t1.remove$1(t2[i]);
        this._deletedCount = $.intTypeCheck($.$$add(this._deletedCount, 1));
      }
    }
    if (typeof start !== "number")
      throw $.iae(start);
    $.CONSTANT0.removeRange$2(t2, start, t5 - start);
  },
  globalize$1: function(id) {
    return this._globalIds.add$1(id);
  },
  invalidate$1: function(id) {
    var t1, old;
    t1 = this._registry;
    old = t1.$index(id);
    this._globalIds.remove$1(id);
    t1.remove$1(id);
    this._deletedCount = $.intTypeCheck($.$$add(this._deletedCount, 1));
    return old;
  },
  add$1: function(x) {
    var t1, t2, id;
    if (this._scopeIndices.length === 0)
      throw $.$$throw("Must be inside scope to allocate.");
    t1 = this._name + "-";
    t2 = this._nextId;
    if (t2 !== (t2 | 0))
      return this.add$1$bailout0(1, x, t2, t1);
    this._nextId = t2 + 1;
    id = t1 + $.S(t2);
    this._registry.$indexSet(id, x);
    $.CONSTANT0.addLast$1(this._handleStack, id);
    return id;
  },
  add$1$bailout0: function(state0, x, t2, t1) {
    var id;
    this._nextId = $.intTypeCheck($.$$add(t2, 1));
    id = t1 + $.S(t2);
    this._registry.$indexSet(id, x);
    $.CONSTANT0.addLast$1(this._handleStack, id);
    return id;
  },
  get$1: function(id) {
    $.stringTypeCheck(id);
    return this._registry.$index(id);
  },
  get$sendPort: function() {
    return this._port.toSendPort$0();
  },
  _ProxiedObjectTable$0: function() {
    this._port.receive$1(new $.anon(this));
  }
};

$$.initiateLogin_anon = {
  "": function initiateLogin_anon() {
  },
  "super": "Closure",
  call$0: function() {
    var t1 = $.Callback$once($.onGetAuthToken);
    $.context().set$onGetAuthToken(t1);
    $.Proxy_Proxy($.context().get$OAuth(), $, $, $, $).getAuthToken$0();
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.Maps__emitMap_anon = {
  "": function Maps__emitMap_anon(box_0, result_1, visiting_2) {
    this.box_0 = box_0;
    this.result_1 = result_1;
    this.visiting_2 = visiting_2;
  },
  "super": "Closure",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!$.boolConversionCheck(t1.first_0))
      $.add(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.Collections__emitObject(k, t1, t2);
    $.add(t1, ": ");
    $.Collections__emitObject(v, t1, t2);
  },
  $isFunction: true,
  $is_Reviver: true
};

$$._LinkedHashMapImpl_forEach_anon = {
  "": function _LinkedHashMapImpl_forEach_anon(f_0) {
    this.f_0 = f_0;
  },
  "super": "Closure",
  call$1: function(entry) {
    $.propertyTypeCheck(entry, "$is_KeyValuePair");
    this.f_0.call$2(entry.get$key(), entry.get$value());
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$.NoSuchMethodError_toString_anon = {
  "": function NoSuchMethodError_toString_anon(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    var t1;
    $.stringTypeCheck(key);
    t1 = this.box_0;
    if ($.boolConversionCheck($.$$gt(t1.i_1, 0)))
      $.add(t1.sb_0, ", ");
    $.add(t1.sb_0, key);
    $.add(t1.sb_0, ": ");
    $.add(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.intTypeCheck($.$$add(t1.i_1, 1));
  },
  $isFunction: true,
  $is_Reviver: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {
  "": function _convertDartToNative_PrepareForStructuredClone_findSlot(values_1, copies_2) {
    this.values_1 = values_1;
    this.copies_2 = copies_2;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1, t2, length, i, t3, t4;
    t1 = this.values_1;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    length = $.intTypeCheck(t2.get$length(t1));
    for (i = 0; t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, length); i = $.intTypeCheck(t3.$add(i, 1))) {
      t4 = t2.$index(t1, i);
      if (t4 == null ? value == null : t4 === value)
        return i;
    }
    $.add(t1, value);
    $.add(this.copies_2, null);
    return length;
  },
  $isFunction: true,
  $is_FutureOnError: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {
  "": function _convertDartToNative_PrepareForStructuredClone_readSlot(copies_3) {
    this.copies_3 = copies_3;
  },
  "super": "Closure",
  call$1: function(i) {
    $.intTypeCheck(i);
    return $.$$index(this.copies_3, i);
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {
  "": function _convertDartToNative_PrepareForStructuredClone_writeSlot(copies_4) {
    this.copies_4 = copies_4;
  },
  "super": "Closure",
  call$2: function(i, x) {
    $.intTypeCheck(i);
    $.$$indexSet(this.copies_4, i, x);
  },
  $isFunction: true,
  $is_Reviver: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {
  "": function _convertDartToNative_PrepareForStructuredClone_cleanupSlots() {
  },
  "super": "Closure",
  call$0: function() {
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {
  "": function _convertDartToNative_PrepareForStructuredClone_walk(findSlot_5, readSlot_6, writeSlot_7) {
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1, slot, t2, length, copy, t3, i, element, elementCopy, copy0, j;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!e.$isDateTime)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!e.$isRegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && e.$isFile())
      return e;
    if (typeof e === "object" && e !== null && e.$isBlob())
      return e;
    if (typeof e === "object" && e !== null && e.$isFileList())
      return e;
    if (typeof e === "object" && e !== null && e.$isImageData())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && e.$isMap()) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (!(t2 == null))
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || e.$isList())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      length = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (!(copy == null)) {
        if (true === copy) {
          copy = new Array(length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, length); ++i) {
          if (i !== (i | 0))
            throw $.iae(i);
          if (i < 0 || i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (!(elementCopy == null ? element == null : elementCopy === element)) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array(length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.$isJavaScriptIndexingBehavior())
              return this.call$1$bailout(3, e, $.CONSTANT0, length, t3, elementCopy, copy0, t2, i, slot, t1, copy);
            for (j = 0; t1 = $.$$lt(j, i), t2 = copy0.length, t1; ++j) {
              if (j !== (j | 0))
                throw $.iae(j);
              if (j < 0 || j >= e.length)
                throw $.ioore(j);
              t1 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t1;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array(length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (i !== (i | 0))
        return this.call$1$bailout(5, e, $.CONSTANT0, length, null, null, null, null, i, null, null, copy);
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(4, e, $.CONSTANT0, length, null, null, null, null, i, null, null, copy);
      for (; $.$$lt(i, length); ++i) {
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t2, length, t3, elementCopy, copy0, t4, i, slot, t1, copy) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!e.$isDateTime)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!e.$isRegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && e.$isFile())
          return e;
        if (typeof e === "object" && e !== null && e.$isBlob())
          return e;
        if (typeof e === "object" && e !== null && e.$isFileList())
          return e;
        if (typeof e === "object" && e !== null && e.$isImageData())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && e.$isMap()) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (!(t2 == null))
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var element, j, t5;
        if (state0 === 4 || state0 === 5 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || e.$isList()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$JSStringJSArray(e);
              length = t2.get$length(e);
              $.intTypeCheck(length);
            case 2:
              state0 = 0;
              slot = this.findSlot_5.call$1(e);
              t4 = this.readSlot_6;
              copy = t4.call$1(slot);
              if (!(copy == null)) {
                if (true === copy) {
                  copy = new Array(length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t3 = this.writeSlot_7;
            case 3:
              if (state0 === 3 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t3.call$2(slot, true);
                    i = 0;
                  case 3:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            t1 = $.getInterceptor$JSNumber(i);
                            if (!t1.$lt(i, length))
                              break L0;
                            element = t2.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 3:
                            if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                              switch (state0) {
                                case 0:
                                  copy0 = t4.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array(length);
                                    t3.call$2(slot, copy0);
                                  }
                                case 3:
                                  state0 = 0;
                                  for (t4 = $.getInterceptor$JSArray(copy0), j = 0; t5 = $.getInterceptor$JSNumber(j), t5.$lt(j, i); j = $.intTypeCheck(t5.$add(j, 1)))
                                    t4.$indexSet(copy0, j, t2.$index(e, j));
                                  t4.$indexSet(copy0, i, elementCopy);
                                  i = $.intTypeCheck(t1.$add(i, 1));
                                  copy = copy0;
                                  break L0;
                              }
                            i = $.intTypeCheck(t1.$add(i, 1));
                        }
                    if (copy == null) {
                      t3.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array(length);
                t3.call$2(slot, copy);
                i = 0;
              }
            case 5:
              state0 = 0;
            case 4:
              state0 = 0;
              for (t1 = $.getInterceptor$JSArray(copy); t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, length); i = $.intTypeCheck(t3.$add(i, 1)))
                t1.$indexSet(copy, i, this.call$1(t2.$index(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {
  "": function _convertDartToNative_PrepareForStructuredClone_walk_anon(box_0, walk_8) {
    this.box_0 = box_0;
    this.walk_8 = walk_8;
  },
  "super": "Closure",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $isFunction: true,
  $is_Reviver: true
};

$$.invokeClosure_anon = {
  "": function invokeClosure_anon(closure_0) {
    this.closure_0 = closure_0;
  },
  "super": "Closure",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.invokeClosure_anon0 = {
  "": function invokeClosure_anon(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  },
  "super": "Closure",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.invokeClosure_anon1 = {
  "": function invokeClosure_anon(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  },
  "super": "Closure",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.anon = {
  "": function anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(msg) {
    var receiver, method, args, result, e, exception, t1;
    try {
      receiver = $.$$index(this.this_0.get$_registry(), $.$$index(msg, 0));
      method = $.$$index(msg, 1);
      args = $.toList($.mappedBy($.$$index(msg, 2), $._deserialize));
      if ($.boolConversionCheck($.$$eq(method, "#call"))) {
        result = null;
        switch ($.length(args)) {
          case 0:
            result = $._serialize(receiver.call$0());
            break;
          case 1:
            result = $._serialize(receiver.call$1($.$$index(args, 0)));
            break;
          case 2:
            result = $._serialize(receiver.call$2($.$$index(args, 0), $.$$index(args, 1)));
            break;
          case 3:
            result = $._serialize(receiver.call$3($.$$index(args, 0), $.$$index(args, 1), $.$$index(args, 2)));
            break;
          case 4:
            result = $._serialize(receiver.call$4($.$$index(args, 0), $.$$index(args, 1), $.$$index(args, 2), $.$$index(args, 3)));
            break;
          default:
            throw $.$$throw("Unsupported number of arguments.");
        }
        return ["return", result];
      } else
        throw $.$$throw("Invocation unsupported on non-function Dart proxies");
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      return ["throws", $.S(e)];
    }

  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.HashSet_forEach_anon = {
  "": function HashSet_forEach_anon(f_0) {
    this.f_0 = f_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    this.f_0.call$1(key);
  },
  $isFunction: true,
  $is_Reviver: true
};

$$.ReceivePortSync_receive_anon = {
  "": function ReceivePortSync_receive_anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var data, t1, replyTo, message, result;
    $.callTypeCheck(e, "$isEvent");
    $.callTypeCheck(e, "$isCustomEvent");
    data = $.parse($.stringTypeCheck(e.get$detail()), null);
    t1 = $.getInterceptor$JSStringJSArray(data);
    replyTo = t1.$index(data, 0);
    t1 = t1.$index(data, 1);
    message = $._JsDeserializer$().deserialize$1(t1);
    result = this.this_0._callback$1(message);
    $._dispatchEvent(replyTo, $._JsSerializer$().traverse$1(result));
  },
  $isFunction: true,
  $isEventListener: true,
  $is_FutureErrorTest: true
};

$$.Storage_values_anon = {
  "": function Storage_values_anon(values_0) {
    this.values_0 = values_0;
  },
  "super": "Closure",
  call$2: function(k, v) {
    return $.add(this.values_0, v);
  },
  $isFunction: true,
  $is_Reviver: true
};

$$._LinkedHashMapImpl_values_anon = {
  "": function _LinkedHashMapImpl_values_anon() {
  },
  "super": "Closure",
  call$1: function(entry) {
    return $.propertyTypeCheck(entry, "$is_KeyValuePair").get$value();
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$.Storage_keys_anon = {
  "": function Storage_keys_anon(keys_0) {
    this.keys_0 = keys_0;
  },
  "super": "Closure",
  call$2: function(k, v) {
    return $.add(this.keys_0, k);
  },
  $isFunction: true,
  $is_Reviver: true
};

$$._LinkedHashMapImpl_keys_anon = {
  "": function _LinkedHashMapImpl_keys_anon() {
  },
  "super": "Closure",
  call$1: function(entry) {
    return $.propertyTypeCheck(entry, "$is_KeyValuePair").get$key();
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$._JsonStringifier_stringifyJsonValue_anon = {
  "": function _JsonStringifier_stringifyJsonValue_anon(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$2: function(key, value) {
    var t1, t2, t3;
    $.stringTypeCheck(key);
    t1 = this.box_0;
    t2 = $.boolConversionCheck(t1.first_0);
    t3 = this.this_1;
    if (!t2)
      $.add(t3.get$sb(), ",\"");
    else
      $.add(t3.get$sb(), "\"");
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    $.add(t2.get$sb(), "\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  },
  $isFunction: true,
  $is_Reviver: true
};

$$._RemoteSendPortSync__call_anon = {
  "": function _RemoteSendPortSync__call_anon(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var result;
    $.callTypeCheck(e, "$isEvent");
    $.callTypeCheck(e, "$isCustomEvent");
    result = $.parse($.stringTypeCheck(e.get$detail()), null);
    this.box_0.result_0 = result;
  },
  $isFunction: true,
  $isEventListener: true,
  $is_FutureErrorTest: true
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {
  "": function convertNativeToDart_AcceptStructuredClone_findSlot(values_0, copies_1) {
    this.values_0 = values_0;
    this.copies_1 = copies_1;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1, t2, length, i, t3, t4;
    t1 = this.values_0;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    length = $.intTypeCheck(t2.get$length(t1));
    for (i = 0; t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, length); i = $.intTypeCheck(t3.$add(i, 1))) {
      t4 = t2.$index(t1, i);
      if (t4 == null ? value == null : t4 === value)
        return i;
    }
    $.add(t1, value);
    $.add(this.copies_1, null);
    return length;
  },
  $isFunction: true,
  $is_FutureOnError: true
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {
  "": function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
    this.copies_2 = copies_2;
  },
  "super": "Closure",
  call$1: function(i) {
    $.intTypeCheck(i);
    return $.$$index(this.copies_2, i);
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {
  "": function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
    this.copies_3 = copies_3;
  },
  "super": "Closure",
  call$2: function(i, x) {
    $.intTypeCheck(i);
    $.$$indexSet(this.copies_3, i, x);
  },
  $isFunction: true,
  $is_Reviver: true
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {
  "": function convertNativeToDart_AcceptStructuredClone_walk(mustCopy_4, findSlot_5, readSlot_6, writeSlot_7) {
    this.mustCopy_4 = mustCopy_4;
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  },
  "super": "Closure",
  call$1: function(e) {
    var slot, copy, t1, t2, t3, length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
      return this.call$1$bailout0(1, e);
    if (e instanceof Date)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      copy = $.makeLiteralMap([]);
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout0(2, e, copy, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.CONSTANT0.get$iterator(Object.keys(e)); $.boolConversionCheck(t1.moveNext$0());) {
        t2 = t1.get$current();
        t3 = this.call$1(e[t2]);
        if (t2 !== (t2 | 0))
          throw $.iae(t2);
        if (t2 < 0 || t2 >= copy.length)
          throw $.ioore(t2);
        copy[t2] = t3;
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (!(copy == null))
        return copy;
      length = e.length;
      if ($.boolConversionCheck(this.mustCopy_4))
        copy = new Array(length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout0(4, e, copy, slot, length, $.CONSTANT0);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; $.$$lt(i, length); ++i) {
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout0: function(state0, e, copy, slot, length, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      case 2:
        if (state0 === 2 || state0 === 0 && Object.getPrototypeOf(e) === Object.prototype)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (!(copy == null))
                return copy;
              copy = $.makeLiteralMap([]);
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t1 = $.CONSTANT0.get$iterator(Object.keys(e)), t2 = $.getInterceptor$JSArray(copy); $.boolConversionCheck(t1.moveNext$0());) {
                t3 = t1.get$current();
                t2.$indexSet(copy, t3, this.call$1(e[t3]));
              }
              return copy;
          }
      default:
        var t2, t3, i;
        if (state0 === 4 || state0 === 3 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (!(copy == null))
                return copy;
              length = t1.get$length(e);
              $.intTypeCheck(length);
            case 3:
              state0 = 0;
              copy = $.boolConversionCheck(this.mustCopy_4) ? new Array(length) : e;
            case 4:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$JSArray(copy), i = 0; t3 = $.getInterceptor$JSNumber(i), t3.$lt(i, length); i = $.intTypeCheck(t3.$add(i, 1)))
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.JsonParser_parseNumber_handleLiteral = {
  "": function JsonParser_parseNumber_handleLiteral(box_0, this_1, start_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.start_2 = start_2;
  },
  "super": "Closure",
  call$1: function(position) {
    var t1, literal, value;
    t1 = this.this_1;
    literal = $.stringTypeCheck($.substring(t1.get$source(), this.start_2, position));
    value = $.numTypeCheck($.boolConversionCheck(this.box_0.isDouble_0) ? $.double_parse(literal, null) : $.int_parse(literal, null, null));
    t1.get$listener().handleNumber$1(value);
    return $.intTypeCheck(position);
  },
  $isFunction: true,
  $is_FutureOnError: true
};

$$.FilteredElementList__filtered_anon = {
  "": function FilteredElementList__filtered_anon() {
  },
  "super": "Closure",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.$isElement();
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.FilteredElementList_removeRange_anon = {
  "": function FilteredElementList_removeRange_anon() {
  },
  "super": "Closure",
  call$1: function(el) {
    return el.remove$0();
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._deserialize_deserializeFunction = {
  "": function _deserialize_deserializeFunction() {
  },
  "super": "Closure",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$JSStringJSArray(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.boolConversionCheck($.$$eq(port, $.get$_proxiedObjectTable().get$sendPort())))
      return $.get$_proxiedObjectTable().get$1(id);
    else
      return $.FunctionProxy$_internal(port, id);
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._deserialize_deserializeObject = {
  "": function _deserialize_deserializeObject() {
  },
  "super": "Closure",
  call$1: function(message) {
    var t1, id, port;
    t1 = $.getInterceptor$JSStringJSArray(message);
    id = t1.$index(message, 1);
    port = t1.$index(message, 2);
    if ($.boolConversionCheck($.$$eq(port, $.get$_proxiedObjectTable().get$sendPort())))
      return $.get$_proxiedObjectTable().get$1(id);
    else
      return $.Proxy$_internal(port, id);
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._initialize_anon = {
  "": function _initialize_anon() {
  },
  "super": "Closure",
  call$1: function(_) {
    return $._enterScope();
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._initialize_anon0 = {
  "": function _initialize_anon() {
  },
  "super": "Closure",
  call$1: function(args) {
    return $._exitScope($.$$index(args, 0));
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.Collection_clear_anon = {
  "": function Collection_clear_anon() {
  },
  "super": "Closure",
  call$1: function(e) {
    return true;
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$.loadUser_anon = {
  "": function loadUser_anon(request_0) {
    this.request_0 = request_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1, user_data, t2;
    $.callTypeCheck(e, "$isEvent");
    t1 = this.request_0;
    if ($.boolConversionCheck($.$$eq(t1.get$status(), 200))) {
      user_data = $.parse(t1.get$responseText(), null);
      t2 = $.getInterceptor$JSStringJSArray(user_data);
      $.setMugShot(t2.$index(user_data, "picture"));
      t2 = t2.$index(user_data, "name");
      $.stringTypeCheck(t2);
      $.get$nameDiv().set$text(t2);
      $.get$app().get$style().set$display("block");
    } else
      $.print("Error " + $.S(t1.get$status()) + ": " + $.S(t1.get$statusText()));
  },
  $isFunction: true,
  $isEventListener: true,
  $is_FutureErrorTest: true
};

$$.Stream_last_anon = {
  "": function Stream_last_anon(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1 = this.box_0;
    t1.foundResult_1 = true;
    t1.result_0 = value;
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$.Stream_last_anon0 = {
  "": function Stream_last_anon(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1 = this.box_0;
    if ($.boolConversionCheck(t1.foundResult_1)) {
      this.future_1._setValue$1(t1.result_0);
      return;
    }
    this.future_1._setError$1($.AsyncError$($.StateError$("No elements"), null));
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {
  "": function _FutureImpl__scheduleUnhandledError_anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1, error;
    t1 = this.this_0;
    if ($.boolConversionCheck(t1.get$_hasUnhandledError())) {
      t1._clearUnhandledError$0();
      error = $.propertyTypeCheck(t1.get$_resultOrListeners(), "$isAsyncError");
      $.print("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (!(t1 == null))
        $.print("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.anon0 = {
  "": function anon(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  },
  "super": "Closure",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.internalCallback = {
  "": function internalCallback(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2;
    t1 = this.callback_3;
    t2 = this.this_2;
    t1.call$1(t2);
    t2.set$_handle(null);
    t2 = $.propertyTypeCheck($globalState, "$is_Manager").get$topEventLoop();
    t2.set$activeTimerCount($.$$sub(t2.get$activeTimerCount(), 1));
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.Stream_toSet_anon = {
  "": function Stream_toSet_anon(result_0) {
    this.result_0 = result_0;
  },
  "super": "Closure",
  call$1: function(data) {
    $.add(this.result_0, data);
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$.Stream_toSet_anon0 = {
  "": function Stream_toSet_anon(result_1, future_2) {
    this.result_1 = result_1;
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.Stream_toList_anon = {
  "": function Stream_toList_anon(result_0) {
    this.result_0 = result_0;
  },
  "super": "Closure",
  call$1: function(data) {
    $.add(this.result_0, data);
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$.Stream_toList_anon0 = {
  "": function Stream_toList_anon(result_1, future_2) {
    this.result_1 = result_1;
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.Stream_length_anon = {
  "": function Stream_length_anon(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.intTypeCheck($.$$add(t1.count_0, 1));
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.Stream_length_anon0 = {
  "": function Stream_length_anon(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.Stream_contains_anon = {
  "": function Stream_contains_anon(box_0, match_1, future_2) {
    this.box_0 = box_0;
    this.match_1 = match_1;
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_contains__anon(this.match_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_contains__anon0(t2, t3, element), $._cancelAndError(t2.subscription_0, t3), null);
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$.Stream_contains__anon = {
  "": function Stream_contains__anon(match_3, element_4) {
    this.match_3 = match_3;
    this.element_4 = element_4;
  },
  "super": "Closure",
  call$0: function() {
    return this.match_3.call$1(this.element_4);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.Stream_contains__anon0 = {
  "": function Stream_contains__anon(box_0, future_5, element_6) {
    this.box_0 = box_0;
    this.future_5 = future_5;
    this.element_6 = element_6;
  },
  "super": "Closure",
  call$1: function(isMatch) {
    if ($.boolTypeCheck(isMatch)) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._setValue$1(this.element_6);
    }
  },
  $isFunction: true,
  $is_FutureErrorTest: true
};

$$.Stream_contains_anon0 = {
  "": function Stream_contains_anon(future_7) {
    this.future_7 = future_7;
  },
  "super": "Closure",
  call$0: function() {
    this.future_7._setValue$1(false);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$._cancelAndError_anon = {
  "": function _cancelAndError_anon(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$1: function(error) {
    $.propertyTypeCheck(error, "$isAsyncError");
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  },
  $isFunction: true,
  $is_ErrorHandler: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._FutureImpl__handleError_anon = {
  "": function _FutureImpl__handleError_anon(error_0, errorFuture_1) {
    this.error_0 = error_0;
    this.errorFuture_1 = errorFuture_1;
  },
  "super": "Closure",
  call$1: function(_) {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._FutureImpl__handleValue_anon = {
  "": function _FutureImpl__handleValue_anon(thenFuture_0, value_1) {
    this.thenFuture_0 = thenFuture_0;
    this.value_1 = value_1;
  },
  "super": "Closure",
  call$1: function(_) {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.AsyncError_throwDelayed_reportError = {
  "": function AsyncError_throwDelayed_reportError(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1 = this.this_0;
    $.print("Uncaught Error: " + $.S(t1.get$error()));
    t1 = t1.get$stackTrace();
    if (!(t1 == null))
      $.print("Stack Trace:\n" + $.S(t1) + "\n");
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.AsyncError_throwDelayed_anon = {
  "": function AsyncError_throwDelayed_anon(this_1, reportError_2) {
    this.this_1 = this_1;
    this.reportError_2 = reportError_2;
  },
  "super": "Closure",
  call$1: function(_) {
    this.reportError_2.call$0();
    throw $.$$throw(this.this_1.get$error());
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.setMugShot_anon = {
  "": function setMugShot_anon(image_0) {
    this.image_0 = image_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1;
    $.callTypeCheck(e, "$isEvent");
    t1 = this.image_0;
    t1.set$width(27);
    t1.set$height(27);
  },
  $isFunction: true,
  $isEventListener: true,
  $is_FutureErrorTest: true
};

$$.anon1 = {
  "": function anon(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  },
  "super": "Closure",
  call$4: function(arg1, arg2, arg3, arg4) {
    var arg1_check, arg2_check, arg3_check, arg4_check, t1, t2;
    t1 = $ === arg1;
    if (t1)
      arg1 = null;
    arg1_check = !t1;
    t2 = $ === arg2;
    if (t2)
      arg2 = null;
    arg2_check = !t2;
    t1 = $ === arg3;
    if (t1)
      arg3 = null;
    arg3_check = !t1;
    t2 = $ === arg4;
    if (t2)
      arg4 = null;
    arg4_check = !t2;
    try {
      if (!$.boolConversionCheck(arg1_check)) {
        t1 = this.f_1.call$0();
        return t1;
      } else if (!$.boolConversionCheck(arg2_check)) {
        t1 = this.f_1.call$1(arg1);
        return t1;
      } else if (!$.boolConversionCheck(arg3_check)) {
        t1 = this.f_1.call$2(arg1, arg2);
        return t1;
      } else {
        t1 = $.boolConversionCheck(arg4_check);
        t2 = this.f_1;
        if (!t1) {
          t1 = t2.call$3(arg1, arg2, arg3);
          return t1;
        } else {
          t1 = t2.call$4(arg1, arg2, arg3, arg4);
          return t1;
        }
      }
    } finally {
      $.get$_proxiedObjectTable().invalidate$1(this.this_0.get$_liblib2$_id());
    }
  },
  call$0: function() {
    return this.call$4($, $, $, $);
  },
  call$1: function(arg1) {
    return this.call$4(arg1, $, $, $);
  },
  call$2: function(arg1, arg2) {
    return this.call$4(arg1, arg2, $, $);
  },
  call$3: function(arg1, arg2, arg3) {
    return this.call$4(arg1, arg2, arg3, $);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$.handleUpdate_anon = {
  "": function handleUpdate_anon(request_0) {
    this.request_0 = request_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1;
    $.callTypeCheck(e, "$isEvent");
    t1 = this.request_0;
    if ($.boolConversionCheck($.$$eq(t1.get$status(), 200)))
      $.print(t1.get$responseText());
    else
      $.print("Error " + $.S(t1.get$status()) + ": " + $.S(t1.get$statusText()));
  },
  $isFunction: true,
  $isEventListener: true,
  $is_FutureErrorTest: true
};

$$.handleOpen_anon = {
  "": function handleOpen_anon(request_0) {
    this.request_0 = request_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var t1;
    $.callTypeCheck(e, "$isEvent");
    t1 = this.request_0;
    if ($.boolConversionCheck($.$$eq(t1.get$status(), 200)))
      $.print(t1.get$responseText());
    else
      $.print("Error " + $.S(t1.get$status()) + ": " + $.S(t1.get$statusText()));
  },
  $isFunction: true,
  $isEventListener: true,
  $is_FutureErrorTest: true
};

$$.IsolateNatives__processWorkerMessage_function = {
  "": function IsolateNatives__processWorkerMessage_function(entryPoint_0, replyTo_1) {
    this.entryPoint_0 = entryPoint_0;
    this.replyTo_1 = replyTo_1;
  },
  "super": "Closure",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$._BaseSendPort_call_anon = {
  "": function _BaseSendPort_call_anon(completer_0, port_1) {
    this.completer_0 = completer_0;
    this.port_1 = port_1;
  },
  "super": "Closure",
  call$2: function(value, ignoreReplyTo) {
    var t1;
    this.port_1.close$0();
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(value);
  },
  $isFunction: true,
  $is_Reviver: true
};

$$._WorkerSendPort_send_anon = {
  "": function _WorkerSendPort_send_anon(this_0, message_1, replyTo_2) {
    this.this_0 = this_0;
    this.message_1 = message_1;
    this.replyTo_2 = replyTo_2;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($.boolConversionCheck($.propertyTypeCheck($globalState, "$is_Manager").get$isWorker()))
      $.propertyTypeCheck($globalState, "$is_Manager").get$mainManager().postMessage$1(workerMessage);
    else {
      manager = $.callTypeCheck($.$$index($.propertyTypeCheck($globalState, "$is_Manager").get$managers(), t1.get$_workerId()), "$is_ManagerStub");
      if (!(manager == null))
        manager.postMessage$1(workerMessage);
    }
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$._waitForPendingPorts_anon = {
  "": function _waitForPendingPorts_anon(callback_0) {
    this.callback_0 = callback_0;
  },
  "super": "Closure",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._FutureImpl__FutureImpl$wait_anon = {
  "": function _FutureImpl__FutureImpl$wait_anon(box_0, completer_1, values_2, pos_3) {
    this.box_0 = box_0;
    this.completer_1 = completer_1;
    this.values_2 = values_2;
    this.pos_3 = pos_3;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1, t2, remaining;
    t1 = this.values_2;
    $.$$indexSet(t1, this.pos_3, value);
    t2 = this.box_0;
    remaining = $.intTypeCheck($.$$sub(t2.remaining_0, 1));
    t2.remaining_0 = remaining;
    if (remaining === 0)
      this.completer_1.complete$1(t1);
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._FutureImpl__FutureImpl$wait_anon0 = {
  "": function _FutureImpl__FutureImpl$wait_anon(box_0, completer_4) {
    this.box_0 = box_0;
    this.completer_4 = completer_4;
  },
  "super": "Closure",
  call$1: function(error) {
    var t1 = this.box_0;
    if (!$.boolConversionCheck(t1.completed_1))
      this.completer_4.completeError$2(error.get$error(), error.get$stackTrace());
    t1.completed_1 = true;
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.Stream_isEmpty_anon = {
  "": function Stream_isEmpty_anon(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.Stream_isEmpty_anon0 = {
  "": function Stream_isEmpty_anon(future_2) {
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$0: function() {
    this.future_2._setValue$1(true);
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$._PendingSendPortFinder_visitMap_anon = {
  "": function _PendingSendPortFinder_visitMap_anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    return this.this_0._liblib5$_dispatch$1(e);
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._PendingSendPortFinder_visitList_anon = {
  "": function _PendingSendPortFinder_visitList_anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    return this.this_0._liblib5$_dispatch$1(e);
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$._NativeJsSendPort_send_anon = {
  "": function _NativeJsSendPort_send_anon(this_1, message_2, replyTo_3) {
    this.this_1 = this_1;
    this.message_2 = message_2;
    this.replyTo_3 = replyTo_3;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, t3, t4, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $.$$index($.propertyTypeCheck($globalState, "$is_Manager").get$isolates(), t2.get$_liblib5$_isolateId());
    if (t4 == null)
      return;
    if (t2.get$_liblib5$_receivePort().get$_liblib5$_callback() == null)
      return;
    shouldSerialize = !($.propertyTypeCheck($globalState, "$is_Manager").get$currentContext() == null) && $.$$eq($.propertyTypeCheck($globalState, "$is_Manager").get$currentContext().get$id(), t2.get$_liblib5$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $.propertyTypeCheck($globalState, "$is_Manager").get$topEventLoop().enqueue$3(t4, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$._NativeJsSendPort_send__anon = {
  "": function _NativeJsSendPort_send__anon(box_0, this_4, shouldSerialize_5) {
    this.box_0 = box_0;
    this.this_4 = this_4;
    this.shouldSerialize_5 = shouldSerialize_5;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (!(t1.get$_liblib5$_receivePort().get$_liblib5$_callback() == null)) {
      if ($.boolConversionCheck(this.shouldSerialize_5)) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_liblib5$_receivePort();
      t2 = this.box_0;
      t1._liblib5$_callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$._Copier_visitMap_anon = {
  "": function _Copier_visitMap_anon(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$$indexSet(t1, t2._liblib5$_dispatch$1(key), t2._liblib5$_dispatch$1(val));
  },
  $isFunction: true,
  $is_Reviver: true
};

$$._EventLoop__runHelper_next = {
  "": function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    if (!$.boolConversionCheck(this.this_0.runIteration$0()))
      return;
    $.Timer_Timer(0, new $._EventLoop__runHelper_next_anon(this));
  },
  $isFunction: true,
  $isVoidCallback: true,
  $is_DoneHandler: true
};

$$._EventLoop__runHelper_next_anon = {
  "": function _EventLoop__runHelper_next_anon(next_1) {
    this.next_1 = next_1;
  },
  "super": "Closure",
  call$1: function(_) {
    return this.next_1.call$0();
  },
  $isFunction: true,
  $is_Predicate: true,
  $is_Transformation: true,
  $isErrorCallback: true,
  $is_ErrorHandler: true,
  $isEventListener: true,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.Closure = {
  "": function Closure() {
  },
  "super": "Object",
  toString$0: function() {
    return "Closure";
  },
  $isFunction: true
};

$$.BoundClosure = {
  "": function BoundClosure(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure0 = {
  "": function BoundClosure0(self, target, receiver) {
    this.self = self;
    this.target = target;
    this.receiver = receiver;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure1 = {
  "": function BoundClosure1(self, target, receiver) {
    this.self = self;
    this.target = target;
    this.receiver = receiver;
  },
  "super": "Closure",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function($receiver, other) {
    return this.call$2($receiver, other, 0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure2 = {
  "": function BoundClosure2(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure3 = {
  "": function BoundClosure3(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure4 = {
  "": function BoundClosure4(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  },
  $is_Reviver: true
};
$$.BoundClosure5 = {
  "": function BoundClosure5(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure6 = {
  "": function BoundClosure6(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_ErrorHandler: true,
  $is_FutureOnError: true
};
$$.BoundClosure7 = {
  "": function BoundClosure7(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  },
  $is_Reviver: true
};
$$.BoundClosure8 = {
  "": function BoundClosure8(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  },
  $is_Reviver: true
};
$$.BoundClosure9 = {
  "": function BoundClosure9(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_ErrorHandler: true,
  $is_FutureOnError: true
};
$$.BoundClosure10 = {
  "": function BoundClosure10(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$0: function() {
    return this.self[this.target]();
  },
  $isVoidCallback: true,
  $is_DoneHandler: true
};
$$.BoundClosure11 = {
  "": function BoundClosure11(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  },
  $is_Reviver: true
};
$$.BoundClosure12 = {
  "": function BoundClosure12(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  },
  $is_Reviver: true
};
$$.BoundClosure13 = {
  "": function BoundClosure13(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure14 = {
  "": function BoundClosure14(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure15 = {
  "": function BoundClosure15(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure16 = {
  "": function BoundClosure16(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure17 = {
  "": function BoundClosure17(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure18 = {
  "": function BoundClosure18(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure19 = {
  "": function BoundClosure19(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure20 = {
  "": function BoundClosure20(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure21 = {
  "": function BoundClosure21(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure22 = {
  "": function BoundClosure22(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure23 = {
  "": function BoundClosure23(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure24 = {
  "": function BoundClosure24(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure25 = {
  "": function BoundClosure25(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure26 = {
  "": function BoundClosure26(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure27 = {
  "": function BoundClosure27(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure28 = {
  "": function BoundClosure28(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure29 = {
  "": function BoundClosure29(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure30 = {
  "": function BoundClosure30(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure31 = {
  "": function BoundClosure31(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$0: function() {
    return this.self[this.target]();
  }
};
$$.BoundClosure32 = {
  "": function BoundClosure32(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure33 = {
  "": function BoundClosure33(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure34 = {
  "": function BoundClosure34(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure35 = {
  "": function BoundClosure35(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure36 = {
  "": function BoundClosure36(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure37 = {
  "": function BoundClosure37(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure38 = {
  "": function BoundClosure38(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure39 = {
  "": function BoundClosure39(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure40 = {
  "": function BoundClosure40(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure41 = {
  "": function BoundClosure41(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure42 = {
  "": function BoundClosure42(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure43 = {
  "": function BoundClosure43(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure44 = {
  "": function BoundClosure44(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure45 = {
  "": function BoundClosure45(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure46 = {
  "": function BoundClosure46(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure47 = {
  "": function BoundClosure47(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure48 = {
  "": function BoundClosure48(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure49 = {
  "": function BoundClosure49(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure50 = {
  "": function BoundClosure50(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure51 = {
  "": function BoundClosure51(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure52 = {
  "": function BoundClosure52(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure53 = {
  "": function BoundClosure53(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure54 = {
  "": function BoundClosure54(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure55 = {
  "": function BoundClosure55(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure56 = {
  "": function BoundClosure56(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure57 = {
  "": function BoundClosure57(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$$.BoundClosure58 = {
  "": function BoundClosure58(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureErrorTest: true
};
$._callInIsolate = function(isolate, $function) {
  $.propertyTypeCheck(isolate, "$is_IsolateContext").eval$1($.functionTypeCheck($function));
  $.propertyTypeCheck($globalState, "$is_Manager").get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $.propertyTypeCheck($.propertyTypeCheck($globalState, "$is_Manager").get$currentContext(), "$is_IsolateContext");
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($.boolConversionCheck($.propertyTypeCheck($globalState, "$is_Manager").get$isWorker()))
    return;
  rootContext = $._IsolateContext$();
  $.propertyTypeCheck($globalState, "$is_Manager").set$rootContext(rootContext);
  $.propertyTypeCheck($globalState, "$is_Manager").set$currentContext(rootContext);
  rootContext.eval$1(entry);
  $.propertyTypeCheck($globalState, "$is_Manager").get$topEventLoop().run$0();
};

$._globalState = function() {
  return $.propertyTypeCheck($globalState, "$is_Manager");
};

$._globalState0 = function(val) {
  $globalState = $.propertyTypeCheck(val, "$is_Manager");
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.propertyTypeCheck($.Queue_Queue($._IsolateEvent), "$isQueue"), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent($.propertyTypeCheck(isolate, "$is_IsolateContext"), $.functionTypeCheck(fn), message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var scripts, len, i, t1, script, src, t2;
  scripts = document.getElementsByTagName('script');
  for (len = scripts.length, i = 0; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, len); i = $.intTypeCheck(t1.$add(i, 1))) {
    script = scripts[i];
    src = script && script.src;
    t2 = $.getInterceptor(src);
    if (!(src == null) && !$.boolConversionCheck(t2.endsWith$1(src, "test_controller.js")) && !$.boolConversionCheck(t2.endsWith$1(src, "dart.js")))
      return $.stringTypeCheck(src);
  }
  return;
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$JSStringJSArray(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $.propertyTypeCheck($globalState, "$is_Manager").set$currentManagerId(t2);
      t2 = t1.$index(msg, "functionName");
      $.stringTypeCheck(t2);
      entryPoint = $.functionTypeCheck($[t2]);
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $.propertyTypeCheck($globalState, "$is_Manager").get$topEventLoop().enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $.propertyTypeCheck($globalState, "$is_Manager").set$currentContext(context);
      $.propertyTypeCheck($globalState, "$is_Manager").get$topEventLoop().run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (!($.propertyTypeCheck(t1.$index(msg, "port"), "$isSendPort") == null))
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $.propertyTypeCheck($globalState, "$is_Manager").get$topEventLoop().run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      $.remove($.propertyTypeCheck($globalState, "$is_Manager").get$managers(), sender.get$id());
      sender.terminate$0();
      $.propertyTypeCheck($globalState, "$is_Manager").get$topEventLoop().run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($.boolConversionCheck($.propertyTypeCheck($globalState, "$is_Manager").get$isWorker()))
        $.propertyTypeCheck($globalState, "$is_Manager").get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, exception;
  if ($.boolConversionCheck($.propertyTypeCheck($globalState, "$is_Manager").get$isWorker()))
    $.propertyTypeCheck($globalState, "$is_Manager").get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($.Exception_Exception(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.functionTypeCheck(topLevel);
  $.propertyTypeCheck(replyTo, "$isSendPort");
  $.lazyPort = $.propertyTypeCheck($.ReceivePort_ReceivePort(), "$isReceivePort");
  if ($.lazyPort == null)
    $.lazyPort = $.propertyTypeCheck($.ReceivePort_ReceivePort(), "$isReceivePort");
  replyTo.send$2("spawned", $.propertyTypeCheck($.lazyPort, "$isReceivePort").toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = $.callTypeCheck(new Worker(uri), "$is_WorkerStub");
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $.propertyTypeCheck($globalState, "$is_Manager");
  workerId = t1.get$nextManagerId();
  t1.set$nextManagerId($.$$add(workerId, 1));
  worker.set$id(workerId);
  $.$$indexSet($.propertyTypeCheck($globalState, "$is_Manager").get$managers(), workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  $.intTypeCheck(isolateId);
  return new $._NativeJsSendPort($.propertyTypeCheck(_receivePort, "$isReceivePortImpl"), isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  $.intTypeCheck(isolateId);
  return new $._WorkerSendPort($.intTypeCheck(_workerId), $.intTypeCheck(_receivePortId), isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1, t2;
  t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.intTypeCheck($.$$add(t1, 1));
  t2 = new $.ReceivePortImpl($.intTypeCheck(t1), null);
  t2.ReceivePortImpl$0();
  return t2;
};

$._waitForPendingPorts = function(message, callback) {
  var finder;
  $.functionTypeCheck(callback);
  finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.propertyTypeCheck($._FutureImpl__FutureImpl$wait(finder.ports, $.List), "$isFuture").then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$0());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($.boolConversionCheck($.propertyTypeCheck($globalState, "$is_Manager").get$needSerialization()))
    return $._JsSerializer$0().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($.boolConversionCheck($.propertyTypeCheck($globalState, "$is_Manager").get$needSerialization()))
    return $._JsDeserializer$0().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$0 = function() {
  var t1 = new $._JsSerializer0(0, $._MessageTraverserVisitedMap$0());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$0());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$0 = function() {
  return new $._JsDeserializer0(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$0 = function() {
  return new $._MessageTraverserVisitedMap0();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return !($.get$globalThis().setTimeout == null);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var t1;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && !(value === 0) || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  t1 = $.toString(value);
  if (!(typeof t1 === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return t1;
};

$.createInvocationMirror = function(name, internalName, type, arguments, argumentNames) {
  return $.JSInvocationMirror$(name, internalName, type, arguments, argumentNames);
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror($.stringTypeCheck(memberName), $.stringTypeCheck(_internalName), $.intTypeCheck(_kind), $.listTypeCheck(_arguments), $.listTypeCheck(_namedArgumentNames), null);
};

$.Primitives_objectHashCode = function(object) {
  var hash = $.intTypeCheck(object.$identityHash);
  if (hash == null) {
    hash = $.intTypeCheck($.$$add($.Primitives_hashCodeSeed, 1));
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  $.stringTypeCheck(string);
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$($.stringTypeCheck(string)));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i, t2;
  if (handleError == null)
    handleError = $.functionTypeCheck($.Primitives__throwFormatException);
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    t1 = $.getInterceptor(match);
    if (!(match == null)) {
      if (!(t1.$index(match, 2) == null))
        return $.intTypeCheck(parseInt(source, 16));
      if (!(t1.$index(match, 3) == null))
        return $.intTypeCheck(parseInt(source, 10));
      return $.intTypeCheck(handleError.call$1(source));
    }
    radix = 10;
  } else {
    if (!(typeof radix === "number" && Math.floor(radix) === radix))
      throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    t1 = $.getInterceptor(match);
    if (!(match == null)) {
      if (radix === 10 && !(t1.$index(match, 3) == null))
        return $.intTypeCheck(parseInt(source, 10));
      if (radix < 10 || t1.$index(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        digitsPart = $.stringTypeCheck($.toLowerCase(t1.$index(match, 1)));
        for (t1 = $.getInterceptor$JSStringJSArray(digitsPart), i = 0; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, t1.get$length(digitsPart)); i = $.intTypeCheck(t2.$add(i, 1)))
          if ($.boolConversionCheck($.$$gt(t1.charCodeAt$1(digitsPart, i), maxCharCode)))
            return $.intTypeCheck(handleError.call$1(source));
      }
    }
    radix = radix;
  }
  if (match == null)
    return $.intTypeCheck(handleError.call$1(source));
  return $.intTypeCheck(parseInt(source, radix));
};

$.Primitives_parseDouble = function(source, handleError) {
  var result;
  $.checkString(source);
  if (handleError == null)
    handleError = $.functionTypeCheck($.Primitives__throwFormatException);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(source))
    return $.doubleTypeCheck(handleError.call$1(source));
  result = parseFloat(source);
  if ($.boolConversionCheck($.CONSTANT4.get$isNaN(result)) && !(source === "NaN"))
    return $.doubleTypeCheck(handleError.call$1(source));
  return $.doubleTypeCheck(result);
};

$.Primitives_objectTypeName = function(object) {
  var name, decompiled, t1;
  name = $.stringTypeCheck($.constructorNameFallback(object));
  if (name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      name = decompiled;
  }
  t1 = $.getInterceptor$JSString(name);
  return t1.charCodeAt$1(name, 0) === 36 ? $.stringTypeCheck(t1.substring$1(name, 1)) : name;
};

$.Primitives_newFixedList = function(length) {
  var result = new Array(length);
  result.fixed$length = true;
  return result;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, i, result, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, i = 0, result = ""; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.CONSTANT0.get$iterator(codePoints); $.boolConversionCheck(t1.moveNext$0());) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      $.CONSTANT0.add$1(a, t2);
    else if (t2 <= 1114111) {
      $.CONSTANT0.add$1(a, 55296 + ($.CONSTANT1.$shr(t2 - 65536, 10) & 1023));
      $.CONSTANT0.add$1(a, 56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.CONSTANT0.get$iterator(charCodes); $.boolConversionCheck(t1.moveNext$0());) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.stringTypeCheck($.Primitives_stringFromCodePoints(charCodes));
  }
  return $.stringTypeCheck($.Primitives__fromCharCodeApply(charCodes));
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = $.stringTypeCheck(new Error().stack);
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString(this);
};

$.unwrapException = function(ex) {
  var message, type, name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name = ex.arguments ? ex.arguments[0] : "";
    $.stringTypeCheck(message);
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      if (!$.boolConversionCheck(t1.$eq(type, "property_not_function"))) {
        if (!$.boolConversionCheck(t1.$eq(type, "called_non_callable")))
          t1 = $.boolConversionCheck($.boolConversionCheck(t1.$eq(type, "non_object_property_call")) || $.boolConversionCheck(t1.$eq(type, "non_object_property_load")));
        else
          t1 = true;
        $.boolConversionCheck(t1);
      } else
        t1 = true;
      $.boolConversionCheck(t1);
    } else
      t1 = true;
    if ($.boolConversionCheck(t1))
      return $.NoSuchMethodError$(null, name, [], $.makeLiteralMap([]), null);
    else if ($.boolConversionCheck($.$$eq(type, "undefined_method")))
      return $.NoSuchMethodError$("", name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1) {
      if (!$.boolConversionCheck($.CONSTANT2.endsWith$1(message, "is null"))) {
        if (!$.boolConversionCheck($.CONSTANT2.endsWith$1(message, "is undefined"))) {
          if (!$.boolConversionCheck($.CONSTANT2.endsWith$1(message, "is null or undefined")))
            t2 = $.boolConversionCheck($.boolConversionCheck($.CONSTANT2.endsWith$1(message, "of undefined")) || $.boolConversionCheck($.CONSTANT2.endsWith$1(message, "of null")));
          else
            t2 = true;
          $.boolConversionCheck(t2);
        } else
          t2 = true;
        $.boolConversionCheck(t2);
      } else
        t2 = true;
      if ($.boolConversionCheck(t2))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    }
    return $.Exception_Exception(t1 ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.propertyTypeCheck($.CONSTANT0.get$iterator(keyValuePairs), "$isIterator");
  result = $.callTypeCheck($.LinkedHashMap_LinkedHashMap(), "$isMap");
  for (; $.boolConversionCheck(iterator.moveNext$0());) {
    key = $.stringTypeCheck(iterator.get$current());
    iterator.moveNext$0();
    result.$indexSet(key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  $.functionTypeCheck(closure);
  $.intTypeCheck(numberOfArguments);
  if (numberOfArguments === 0)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (numberOfArguments === 1)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (numberOfArguments === 2)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $._currentIsolate();
  $function = function($0, $1) { return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, $0, $1); };
  closure.$identity = $function;
  return $function;
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  var t1 = typeInfo.constructor === Array;
  $.assertHelper(t1);
  if (!(target == null))
    target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  var res;
  if (target == null)
    return;
  res = target.$builtinTypeInfo;
  return res == null ? {} : res;
};

$.boolConversionCheck = function(value) {
  $.boolTypeCheck(value);
  $.assertHelper(!(value == null));
  return value;
};

$.stringTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "string")
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "String"));
};

$.doubleTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "number")
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "double"));
};

$.numTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "number")
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "num"));
};

$.boolTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "boolean")
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "bool"));
};

$.functionTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "function" || typeof value === "object" && value !== null && !!value.$isFunction)
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "Function"));
};

$.intTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "number" && Math.floor(value) === value)
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "int"));
};

$.propertyTypeError = function(value, property) {
  var t1 = $.getInterceptor$JSStringJSArray(property);
  throw $.$$throw($.TypeErrorImplementation$(value, $.stringTypeCheck(t1.substring$2(property, 3, t1.get$length(property)))));
};

$.propertyTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (!!value[property])
    return value;
  $.propertyTypeError(value, property);
};

$.callTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === "object" && value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$.stringSuperTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === "string")
    return value;
  if (!!value[property])
    return value;
  $.propertyTypeError(value, property);
};

$.listTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()))
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "List"));
};

$.listSuperNativeTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === "object" && value !== null && (value.constructor === Array || value.$isList()))
    return value;
  if (value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$.voidTypeCheck = function(value) {
  if (value == null)
    return value;
  throw $.$$throw($.TypeErrorImplementation$(value, "void"));
};

$.TypeErrorImplementation$ = function(value, type) {
  return new $.TypeErrorImplementation("type '" + $.S($.Primitives_objectTypeName(value)) + "' is not a subtype " + "of type '" + $.S(type) + "'");
};

$.assertHelper = function(condition) {
  if (typeof condition === "function" || typeof condition === "object" && condition !== null && !!condition.$isFunction)
    condition = condition.call$0();
  if (!(typeof condition === "boolean"))
    throw $.$$throw($.TypeErrorImplementation$(condition, "bool"));
  if (!condition)
    throw $.$$throw($.AssertionError$());
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S($.stringTypeCheck(staticName))));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.stringTypeCheck($.typeNameInWebKitCommon($.constructorNameFallback(obj)));
};

$.typeNameInWebKitCommon = function(tag) {
  var name = tag;
  if (name === "Window")
    return "DOMWindow";
  if (name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name === "WebKitMutationObserver")
    return "MutationObserver";
  if (name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name === "AudioGainNode")
    return "GainNode";
  if (name === "AudioPannerNode")
    return "PannerNode";
  if (name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name === "Oscillator")
    return "OscillatorNode";
  if (name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name;
};

$.typeNameInOpera = function(obj) {
  var name = $.constructorNameFallback(obj);
  if (name === "Window")
    return "DOMWindow";
  if (name === "ApplicationCache")
    return "DOMApplicationCache";
  return name;
};

$.typeNameInFirefox = function(obj) {
  var name = $.constructorNameFallback(obj);
  if (name === "Window")
    return "DOMWindow";
  if (name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name === "DataTransfer")
    return "Clipboard";
  if (name === "DragEvent")
    return "MouseEvent";
  if (name === "GeoGeolocation")
    return "Geolocation";
  if (name === "MouseScrollEvent")
    return "WheelEvent";
  if (name === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name === "WorkerMessageEvent")
    return "MessageEvent";
  if (name === "XMLDocument")
    return "Document";
  return name;
};

$.typeNameInIE = function(obj) {
  var name = $.constructorNameFallback(obj);
  if (name === "Window")
    return "DOMWindow";
  if (name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name === "ApplicationCache")
    return "DOMApplicationCache";
  if (name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name === "DataTransfer")
    return "Clipboard";
  if (name === "DragEvent")
    return "MouseEvent";
  if (name === "HTMLDDElement")
    return "HTMLElement";
  if (name === "HTMLDTElement")
    return "HTMLElement";
  if (name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name === "HTMLPhraseElement")
    return "HTMLElement";
  if (name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name === "MouseWheelEvent")
    return "WheelEvent";
  if (name === "Position")
    return "Geoposition";
  if (name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return name;
};

$.constructorNameFallback = function(object) {
  var $constructor, name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    name = $constructor.name;
    if (typeof name === "string")
      t1 = !(name === "") && !(name === "Object") && !(name === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return $.stringTypeCheck(name);
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.functionTypeCheck($.typeNameInChrome);
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.functionTypeCheck($.typeNameInChrome);
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.functionTypeCheck($.typeNameInFirefox);
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.functionTypeCheck($.typeNameInIE);
  else if (userAgent.indexOf("Opera") !== -1)
    return $.functionTypeCheck($.typeNameInOpera);
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.functionTypeCheck($.typeNameInSafari);
  else
    return $.functionTypeCheck($.constructorNameFallback);
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.functionTypeCheck($.getFunctionForTypeNameOf());
  return $.stringTypeCheck($._getTypeNameOf.call$1(obj));
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, $.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name, methods, arguments) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  $.stringTypeCheck(name);
  $.listTypeCheck(arguments);
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.stringTypeCheck($.alternateTag(obj, tag));
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT7));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name + " is not a function");} else {return Object.prototype[name].apply(this, arguments);}};
  if (!$.boolConversionCheck($.callHasOwnProperty(hasOwnPropertyFunction, proto, name)))
    $.defineProperty(proto, name, method);
  return method.apply(obj, arguments);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, t1, t2, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; t1 = $._dynamicMetadata0(), $.listTypeCheck(t1), t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, t1.length); i = $.intTypeCheck(t2.$add(i, 1))) {
      t1 = $._dynamicMetadata0();
      $.listTypeCheck(t1);
      entry = $.propertyTypeCheck(t1[i], "$isMetaInfo");
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  $.stringTypeCheck(className);
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  $.stringTypeCheck(name);
  dartMethod = Object.getPrototypeOf($.CONSTANT7)[name];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $.listTypeCheck($dynamicMetadata);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = $.listTypeCheck(table);
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, t1, t2, tag, t3, tags, set, tagNames, j;
  result = [];
  for (i = 0; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, inputTable.length); i = $.intTypeCheck(t1.$add(i, 1))) {
    t2 = inputTable[i];
    $.listTypeCheck(t2);
    tag = t2[0];
    t3 = inputTable[i];
    $.listTypeCheck(t3);
    tags = t3[1];
    set = {};
    tagNames = $.listTypeCheck(tags.split("|"));
    for (j = 0; t2 = $.getInterceptor$JSNumber(j), t2.$lt(j, tagNames.length); j = $.intTypeCheck(t2.$add(j, 1))) {
      t3 = tagNames[j];
      $.stringTypeCheck(t3);
      set[t3] = true;
    }
    $.CONSTANT0.add$1(result, $.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata($.listTypeCheck(inputTable));
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, exception;
  $.propertyTypeCheck(regExp, "$isJSSyntaxRegExp");
  $.boolTypeCheck(global);
  pattern = $.stringTypeCheck(regExp.get$pattern());
  isMultiLine = $.boolTypeCheck(regExp.get$isMultiLine());
  isCaseSensitive = $.boolTypeCheck(regExp.get$isCaseSensitive());
  $.checkString(pattern);
  sb = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), "$isStringBuffer");
  if (isMultiLine)
    $.add(sb, "m");
  if (!isCaseSensitive)
    $.add(sb, "i");
  if (global)
    $.add(sb, "g");
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  $.stringTypeCheck(pattern);
  $.boolTypeCheck(caseSensitive);
  return new $.JSSyntaxRegExp(pattern, $.boolTypeCheck(multiLine), caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation($.stringTypeCheck(pattern), str, start, $.intTypeCheck(end), _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  $.propertyTypeCheck(re, "$isJSSyntaxRegExp");
  $.stringTypeCheck(_str);
  return new $._AllMatchesIterator($.propertyTypeCheck($.JSSyntaxRegExp__globalVersionOf(re), "$isRegExp"), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length, patternLength, startIndex, position, endIndex;
  result = $.List_List(0, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  length = $.intTypeCheck(t1.get$length(haystack));
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.intTypeCheck(t1.indexOf$2(haystack, needle, startIndex));
    if (position === -1)
      break;
    $.CONSTANT0.add$1(result, $.StringMatch$(position, haystack, needle));
    endIndex = $.intTypeCheck($.$$add(position, patternLength));
    if (endIndex == null ? length == null : endIndex === length)
      break;
    else
      startIndex = (position == null ? endIndex == null : position === endIndex) ? $.intTypeCheck($.$$add(startIndex, 1)) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.$$eq($.CONSTANT2.indexOf$2(receiver, other, startIndex), -1) !== true;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT2.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.CONSTANT2.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), "$isStringBuffer");
      length = receiver.length;
      result.add$1(to);
      for (i = 0; $.$$lt(i, length); ++i) {
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= receiver.length)
          throw $.ioore(i);
        result.add$1(receiver[i]);
        result.add$1(to);
      }
      return result.toString$0();
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.JsStringBuffer$ = function(content) {
  return new $.JsStringBuffer($.stringTypeCheck(typeof content === "string" ? content : $.S(content)));
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, $.propertyTypeCheck(cause, "$isAsyncError"));
};

$.Future_Future$immediate = function(value, T) {
  return $._FutureImpl$immediate(value, T);
};

$.Completer_Completer = function(T) {
  return $._CompleterImpl$(T);
};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$($.getRuntimeTypeInfo(this)[0]), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListener__FutureListener$wrap = function(future) {
  return $._FutureListenerWrapper$(future);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, completer, values, i, t3, i0;
  t1 = {};
  $.listSuperNativeTypeCheck(futures, "$isIterable");
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if ($.boolConversionCheck(t2.get$isEmpty(futures)))
    return $.Future_Future$immediate($.CONSTANT8, $.List);
  completer = $.propertyTypeCheck($.Completer_Completer($.List), "$isCompleter");
  t1.remaining_0 = $.intTypeCheck(t2.get$length(futures));
  values = $.List_List$fixedLength(t2.get$length(futures), null);
  $.setRuntimeTypeInfo(values, []);
  t1.completed_1 = false;
  for (t2 = t2.get$iterator(futures), i = 0; $.boolConversionCheck(t2.moveNext$0()); i = i0) {
    t3 = t2.get$current();
    i0 = $.intTypeCheck($.$$add(i, 1));
    t3.then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, completer, values, i)).catchError$1(new $._FutureImpl__FutureImpl$wait_anon0(t1, completer));
  }
  return completer.get$future();
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1 = new $._CatchErrorFuture($.propertyTypeCheck(_test, "$is_FutureErrorTest"), $.propertyTypeCheck(_onError, "$is_FutureOnError"), null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._FutureWrapper$ = function(_future, T) {
  var t1 = new $._FutureWrapper(_future);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  $.propertyTypeCheck(error, "$isAsyncError").throwDelayed$0();
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace, cause) {
  $.propertyTypeCheck(cause, "$isAsyncError");
  if (typeof error === "object" && error !== null && !!error.$isAsyncError)
    return error;
  if (cause == null)
    return $.AsyncError$(error, stackTrace);
  return $.AsyncError$withCause(error, stackTrace, cause);
};

$._runUserCode = function(userCode, onSuccess, onError, cause) {
  var result, e, e0, s, exception, t1;
  $.functionTypeCheck(userCode);
  $.functionTypeCheck(onSuccess);
  $.functionTypeCheck(onError);
  $.propertyTypeCheck(cause, "$isAsyncError");
  result = null;
  try {
    result = userCode.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
      e = t1;
      return onError.call$1(e);
    } else {
      e0 = t1;
      s = $.getTraceFromException(exception);
      if (cause == null)
        onError.call$1($.AsyncError$(e0, s));
      else
        onError.call$1($.AsyncError$withCause(e0, s, cause));
    }
  }

  onSuccess.call$1(result);
};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon($.propertyTypeCheck(subscription, "$isStreamSubscription"), $.propertyTypeCheck(future, "$is_FutureImpl"));
};

$._ForwardingStreamSubscription$ = function(_stream, _onData, _onError, _onDone, unsubscribeOnError, S, T) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _onData, _onError, _onDone, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  t1._ForwardingStreamSubscription$5(_stream, _onData, _onError, _onDone, unsubscribeOnError);
  return t1;
};

$.WhereStream$ = function(source, test, T) {
  var t1 = new $.WhereStream($.propertyTypeCheck(test, "$is_Predicate"), source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.MapStream$ = function(source, transform, S, T) {
  var t1 = new $.MapStream($.propertyTypeCheck(transform, "$is_Transformation"), source);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.Timer_Timer = function(milliseconds, callback) {
  return $.TimerImpl$(milliseconds, $.functionTypeCheck(callback));
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; $.$$ge(i, srcStart); --i, j = $.intTypeCheck($.$$sub(j, 1))) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.$indexSet(dst, j, src[i]);
    }
  else
    for (j = dstStart, i = srcStart; $.$$lt(i, srcStart + count); ++i, j = $.intTypeCheck($.$$add(j, 1))) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.$indexSet(dst, j, src[i]);
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; $.$$lt(i, endIndex); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.$$eq(a[i], element)))
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1, t2;
  for (t1 = $.iterator($.listSuperNativeTypeCheck(iterable, "$isIterable")), t2 = $.getInterceptor(element); $.boolConversionCheck(t1.moveNext$0());)
    if ($.boolConversionCheck(t2.$eq(element, t1.get$current())))
      return true;
  return false;
};

$.IterableMixinWorkaround_removeAll = function(collection, elementsToRemove) {
  var t1, t2;
  $.listSuperNativeTypeCheck(collection, "$isCollection");
  for (t1 = $.CONSTANT0.get$iterator(elementsToRemove), t2 = $.getInterceptor$JSArray(collection); $.boolConversionCheck(t1.moveNext$0());)
    t2.remove$1(collection, t1.get$current());
};

$.IterableMixinWorkaround_removeAllList = function(collection, elementsToRemove) {
  $.listSuperNativeTypeCheck(collection, "$isCollection");
  $.removeMatching(collection, $.contains0($.propertyTypeCheck($.CONSTANT0.toSet$0(elementsToRemove), "$isSet")));
};

$.IterableMixinWorkaround_removeMatching = function(collection, test) {
  var elementsToRemove, t1, t2, t3;
  $.listSuperNativeTypeCheck(collection, "$isCollection");
  $.functionTypeCheck(test);
  elementsToRemove = [];
  for (t1 = $.getInterceptor$JSArray(collection), t2 = t1.get$iterator(collection); $.boolConversionCheck(t2.moveNext$0());) {
    t3 = t2.get$current();
    if ($.boolConversionCheck(test.call$1(t3)))
      $.CONSTANT0.add$1(elementsToRemove, t3);
  }
  t1.removeAll$1(collection, elementsToRemove);
};

$.IterableMixinWorkaround_removeMatchingList = function(list, test) {
  var retained, length, i, element, t1, t2, t3;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !list.$isJavaScriptIndexingBehavior())
    return $.IterableMixinWorkaround_removeMatchingList$bailout(1, list, test);
  retained = [];
  length = list.length;
  for (i = 0; i < length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (!$.boolConversionCheck(test.call$1(element)))
      $.CONSTANT0.add$1(retained, element);
    if (length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === length)
    return;
  for (t2 = list.length, i = 0; i < t1; ++i) {
    t3 = retained[i];
    if (i >= t2)
      throw $.ioore(i);
    list[i] = t3;
  }
  $.CONSTANT0.set$length(list, t1);
};

$.IterableMixinWorkaround_removeMatchingList$bailout = function(state0, list, test) {
  var retained, length, i, element, t1, t2;
  retained = [];
  length = list.length;
  for (i = 0; $.$$lt(i, length); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (!$.boolConversionCheck(test.call$1(element)))
      $.CONSTANT0.add$1(retained, element);
    if (length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  if (retained.length === length)
    return;
  for (i = 0; t1 = $.$$lt(i, retained.length), t2 = retained.length, t1; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t2)
      throw $.ioore(i);
    $.CONSTANT0.$indexSet(list, i, retained[i]);
  }
  $.CONSTANT0.set$length(list, t2);
};

$.Collections_collectionToString = function(c) {
  var result, t1;
  $.listSuperNativeTypeCheck(c, "$isCollection");
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(0);
  $.setRuntimeTypeInfo(t1, []);
  $.Collections__emitCollection(c, result, t1);
  return $.stringTypeCheck($.toString(result));
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, first, t3;
  $.propertyTypeCheck(result, "$isStringBuffer");
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  result.add$1(isList ? "[" : "{");
  for (t2 = $.iterator(c), first = true; $.boolConversionCheck(t2.moveNext$0()); first = false) {
    t3 = t2.get$current();
    if (!first)
      result.add$1(", ");
    $.Collections__emitObject(t3, result, visiting);
  }
  result.add$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  $.propertyTypeCheck(result, "$isStringBuffer");
  $.listTypeCheck(visiting);
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.boolConversionCheck($.Collections__containsRef(visiting, o)))
      result.add$1(typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.$isMap())
    if ($.boolConversionCheck($.Collections__containsRef(visiting, o)))
      result.add$1("{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    result.add$1(o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); $.boolConversionCheck(t1.moveNext$0());) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.HashMap_HashMap = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.LinkedHashMap_LinkedHashMap = function(K, V) {
  return $._LinkedHashMapImpl$(K, V);
};

$._HashMapImpl$ = function(K, V) {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT1.$tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length) {
  $.intTypeCheck(length);
  return $.intTypeCheck($.$$and($.$$add(currentProbe, numberOfProbes), $.$$sub(length, 1)));
};

$._HashMapImplKeyIterable$ = function(_map, E) {
  var t1 = new $._HashMapImplKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._HashMapImplValueIterable$ = function(_map, E) {
  var t1 = new $._HashMapImplValueIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._HashMapImplKeyIterator$ = function(map, E) {
  var t1 = new $._HashMapImplKeyIterator($.propertyTypeCheck(map, "$is_HashMapImpl"), -1, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._HashMapImplValueIterator$ = function(map, E) {
  var t1 = new $._HashMapImplValueIterator($.propertyTypeCheck(map, "$is_HashMapImpl"), -1, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value, K, V) {
  var t1 = new $._KeyValuePair(key, value);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._LinkedHashMapImpl$ = function(K, V) {
  var t1 = new $._LinkedHashMapImpl(null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.Maps_mapToString = function(m) {
  var result, t1;
  $.callTypeCheck(m, "$isMap");
  result = $.StringBuffer_StringBuffer("");
  t1 = $.List_List(0);
  $.setRuntimeTypeInfo(t1, []);
  $.Maps__emitMap(m, result, t1);
  return $.stringTypeCheck($.toString(result));
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  $.callTypeCheck(m, "$isMap");
  $.propertyTypeCheck(result, "$isStringBuffer");
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  result.add$1("{");
  t1.first_0 = true;
  m.forEach$1(new $.Maps__emitMap_anon(t1, result, visiting));
  result.add$1("}");
  t2.removeLast$0(visiting);
};

$.Queue_Queue = function(E) {
  return $.DoubleLinkedQueue$(E);
};

$.DoubleLinkedQueueEntry$ = function(e, E) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function(E) {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel, E) {
  var t1;
  $.propertyTypeCheck(sentinel, "$is_DoubleLinkedQueueEntrySentinel");
  t1 = new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashSet$ = function(E) {
  var t1 = new $.HashSet($._HashMapImpl$($.getRuntimeTypeInfo(this)[0], $.getRuntimeTypeInfo(this)[0]));
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashSet_HashSet$from = function(other, E) {
  var set, t1;
  $.listSuperNativeTypeCheck(other, "$isIterable");
  set = $.HashSet$(E);
  for (t1 = $.iterator(other); $.boolConversionCheck(t1.moveNext$0());)
    set.add$1(t1.get$current());
  return set;
};

$._HashSetIterator$ = function(set, E) {
  var t1 = new $._HashSetIterator($.propertyTypeCheck($.iterator(set._backingMap._keys), "$isIterator"));
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable($.listSuperNativeTypeCheck(_iterable, "$isIterable"), _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f, S, T) {
  var t1 = new $.MappedIterator(null, $.propertyTypeCheck(_iterator, "$isIterator"), _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable($.listSuperNativeTypeCheck(_iterable, "$isIterable"), _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f, E) {
  var t1 = new $.WhereIterator($.propertyTypeCheck(_iterator, "$isIterator"), _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ListIterator$ = function(list, E) {
  var t1;
  $.listTypeCheck(list);
  t1 = new $.ListIterator(list, $.intTypeCheck($.length(list)), -1, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.MappedList$ = function(_list, _f, S, T) {
  var t1 = new $.MappedList($.listTypeCheck(_list), _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.double_parse = function(source, handleError) {
  return $.doubleTypeCheck($.Primitives_parseDouble($.stringTypeCheck(source), $.functionTypeCheck(handleError)));
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.stringTypeCheck($.toString(object));
  if (typeof object === "string")
    return "\"" + $.S($.stringTypeCheck($.replaceAll($.replaceAll($.replaceAll($.CONSTANT2.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\""))) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.AssertionError$ = function() {
  return new $.AssertionError();
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S($.numTypeCheck(value)));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, $.stringTypeCheck(_memberName), $.listTypeCheck(_arguments), $.callTypeCheck(_namedArguments, "$isMap"), $.listTypeCheck(existingArgumentNames));
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError($.stringTypeCheck(message));
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException($.stringTypeCheck(message));
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException($.stringTypeCheck(_pattern), _errmsg);
};

$.int_parse = function(source, onError, radix) {
  $.stringTypeCheck(source);
  $.functionTypeCheck(onError);
  return $.intTypeCheck($.Primitives_parseInt(source, $.intTypeCheck(radix), onError));
};

$.List_List = function(length) {
  $.intTypeCheck(length);
  if (!(typeof length === "number" && Math.floor(length) === length) || length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length) + "."));
  return new Array(length);
};

$.List_List$fixedLength = function(length, fill) {
  var result, i;
  $.intTypeCheck(length);
  if (!(typeof length === "number" && Math.floor(length) === length) || length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length) + "."));
  result = $.Primitives_newFixedList(length);
  $.listTypeCheck(result);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.$isJavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, length, fill, result);
  if (!(length === 0) && !(fill == null))
    for (i = 0; $.$$lt(i, result.length); ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= result.length)
        throw $.ioore(i);
      result[i] = fill;
    }
  return result;
};

$.List_List$fixedLength$bailout = function(state0, length, fill, result) {
  var t1, i, t2;
  if (!(length === 0) && !(fill == null))
    for (t1 = $.getInterceptor$JSStringJSArray(result), i = 0; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, t1.get$length(result)); i = $.intTypeCheck(t2.$add(i, 1)))
      t1.$indexSet(result, i, fill);
  return result;
};

$.List_List$from = function(other, E) {
  var list, t1;
  $.listSuperNativeTypeCheck(other, "$isIterable");
  list = $.List_List(0, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.iterator(other); $.boolConversionCheck(t1.moveNext$0());)
    $.CONSTANT0.add$1(list, t1.get$current());
  return list;
};

$.Map_Map = function(K, V) {
  return $.HashMap_HashMap(K, V);
};

$.print = function(object) {
  if (typeof object === "string")
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.toString(object));
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$($.stringTypeCheck(pattern), $.boolTypeCheck(caseSensitive), $.boolTypeCheck(multiLine));
};

$.Set_Set = function(E) {
  return $.HashSet$(E);
};

$.Set_Set$from = function(other, E) {
  return $.HashSet_HashSet$from($.listSuperNativeTypeCheck(other, "$isIterable"), E);
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!charCodes.constructor === Array) {
    charCodes = $.List_List$from(charCodes);
    $.setRuntimeTypeInfo(charCodes, []);
  }
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.StringBuffer_StringBuffer = function(content) {
  return $.JsStringBuffer$(content);
};

$.document = function() {
  return $.callTypeCheck(document, "$isHtmlDocument");
};

$.query = function(selector) {
  return $.callTypeCheck($.callTypeCheck(document, "$isHtmlDocument").query$1(selector), "$isElement");
};

$._getNewIsolateId = function() {
  if (!window.$dart$isolate$counter)
    window.$dart$isolate$counter = 1;
  return window.$dart$isolate$counter++;
};

$.ButtonElement_ButtonElement = function() {
  return $.callTypeCheck(document, "$isHtmlDocument").$$dom_createElement$1("button");
};

$.CustomEvent_CustomEvent = function(type, canBubble, cancelable, detail) {
  var e;
  $.stringTypeCheck(type);
  $.boolTypeCheck(canBubble);
  $.boolTypeCheck(cancelable);
  e = $.callTypeCheck($.callTypeCheck(document, "$isHtmlDocument").$$dom_createEvent$1("CustomEvent"), "$isCustomEvent");
  e.$$dom_initCustomEvent$4(type, canBubble, cancelable, detail);
  return e;
};

$.DivElement_DivElement = function() {
  return $.callTypeCheck(document, "$isHtmlDocument").$$dom_createElement$1("div");
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.callTypeCheck(element.get$$$dom_children(), "$isHtmlCollection"));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList($.listTypeCheck(_nodeList));
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList($.callTypeCheck(_ptr, "$isEventTarget"), _type);
};

$.HttpRequest_HttpRequest = function() {
  return $.callTypeCheck(new XMLHttpRequest(), "$isHttpRequest");
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e;
  $.intTypeCheck(height);
  $.stringTypeCheck(src);
  $.intTypeCheck(width);
  e = $.callTypeCheck(document, "$isHtmlDocument").$$dom_createElement$1("img");
  if (!(src == null))
    e.set$src(src);
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.ScriptElement_ScriptElement = function() {
  return $.callTypeCheck(document, "$isHtmlDocument").$$dom_createElement$1("script");
};

$.WindowEvents$ = function(_ptr) {
  return new $.WindowEvents(_ptr);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, $.stringTypeCheck(_eventType), _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture, T) {
  var t1 = new $._EventStreamSubscription(0, $.callTypeCheck(_target, "$isEventTarget"), $.stringTypeCheck(_eventType), _onData, $.boolTypeCheck(_useCapture));
  $.setRuntimeTypeInfo(t1, [T]);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$._JsSerializer$ = function() {
  return new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsSendPortSync$ = function(_id) {
  return new $._JsSendPortSync(_id);
};

$._RemoteSendPortSync$ = function(_isolateId, _portId) {
  return new $._RemoteSendPortSync(_isolateId, _portId);
};

$._RemoteSendPortSync__call = function(isolateId, portId, message) {
  var t1, target, source, listener;
  t1 = {};
  $.intTypeCheck(isolateId);
  $.intTypeCheck(portId);
  target = "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
  source = target + "-result";
  t1.result_0 = null;
  listener = new $._RemoteSendPortSync__call_anon(t1);
  $.add($.$$index($.callTypeCheck(window, "$isWindow").get$on(), source), listener);
  $._dispatchEvent(target, [source, message]);
  $.remove($.$$index($.callTypeCheck(window, "$isWindow").get$on(), source), listener);
  return t1.result_0;
};

$._LocalSendPortSync$_internal = function(_receivePort) {
  return new $._LocalSendPortSync(_receivePort);
};

$.ReceivePortSync$ = function() {
  var t1 = new $.ReceivePortSync(null, null, null);
  t1.ReceivePortSync$0();
  return t1;
};

$.ReceivePortSync__isolateId = function() {
  if ($.ReceivePortSync__cachedIsolateId == null)
    $.ReceivePortSync__cachedIsolateId = $.intTypeCheck($._getNewIsolateId());
  return $.intTypeCheck($.ReceivePortSync__cachedIsolateId);
};

$.ReceivePortSync__getListenerName = function(isolateId, portId) {
  return "dart-port-" + $.S(isolateId) + "-" + $.S(portId);
};

$.ReceivePortSync__lookup = function(isolateId, portId) {
  var t1;
  $.intTypeCheck(isolateId);
  $.intTypeCheck(portId);
  t1 = $.ReceivePortSync__isolateId();
  if (isolateId == null ? t1 == null : isolateId === t1)
    return $.propertyTypeCheck($.$$index($.ReceivePortSync__portMap, portId).toSendPort$0(), "$isSendPortSync");
  else
    return $._RemoteSendPortSync$(isolateId, portId);
};

$._dispatchEvent = function(receiver, message) {
  var event = $.CustomEvent_CustomEvent($.stringTypeCheck(receiver), false, false, $.stringTypeCheck($._JsonStringifier_stringify(message)));
  $.callTypeCheck(window, "$isWindow").dispatchEvent$1(event);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._convertNativeToDart_Window = function(win) {
  return $.callTypeCheck($._DOMWindowCrossFrame__createSafe(win), "$isWindowBase");
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.callTypeCheck(window, "$isWindow");
  if (w == null ? t1 == null : w === t1)
    return $.callTypeCheck(w, "$isWindowBase");
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1;
  $.listTypeCheck(array);
  t1 = new $.FixedSizeListIterator(array, $.intTypeCheck($.length(array)), -1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, t1, t2, t3, t4, copy;
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.FilteredElementList$ = function(node) {
  $.callTypeCheck(node, "$isNode");
  return new $.FilteredElementList(node, $.listTypeCheck(node.get$nodes()));
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex !== (startIndex | 0))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  $.listTypeCheck(a);
  if (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior())
    return $.Lists_indexOf$bailout(2, a, element, startIndex, endIndex);
  $.intTypeCheck(endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; $.$$lt(i, endIndex); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.$$eq(a[i], element)))
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.listTypeCheck(a);
    case 2:
      var t1, t2, i;
      state0 = 0;
      $.intTypeCheck(endIndex);
      t1 = $.getInterceptor$JSStringJSArray(a);
      t2 = $.getInterceptor$JSNumber(startIndex);
      if (t2.$ge(startIndex, t1.get$length(a)))
        return -1;
      if (t2.$lt(startIndex, 0))
        startIndex = 0;
      for (i = startIndex; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, endIndex); i = $.intTypeCheck(t2.$add(i, 1)))
        if ($.boolConversionCheck($.$$eq(t1.$index(a, i), element)))
          return i;
      return -1;
  }
};

$.Lists_getRange = function(a, start, length, accumulator) {
  var end, t1, i, t2;
  if (start !== (start | 0))
    return $.Lists_getRange$bailout(1, a, start, length, accumulator);
  $.listTypeCheck(a);
  if ($.$$lt(length, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length !== "number")
    throw $.iae(length);
  end = start + length;
  $.intTypeCheck(end);
  if (end !== (end | 0))
    return $.Lists_getRange$bailout(2, a, start, null, accumulator, end);
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.CONSTANT1.$gt(end, t1.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, end); i = $.intTypeCheck(t2.$add(i, 1)))
    $.CONSTANT0.add$1(accumulator, t1.$index(a, i));
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, length, accumulator, end) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.listTypeCheck(a);
      if ($.$$lt(length, 0))
        throw $.$$throw($.ArgumentError$("length"));
      t1 = $.getInterceptor$JSNumber(start);
      if (t1.$lt(start, 0))
        throw $.$$throw($.RangeError$value(start));
      end = t1.$add(start, length);
      $.intTypeCheck(end);
    case 2:
      var t1, i, t2;
      state0 = 0;
      t1 = $.getInterceptor$JSStringJSArray(a);
      if ($.$$gt(end, t1.get$length(a)))
        throw $.$$throw($.RangeError$value(end));
      for (i = start; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, end); i = $.intTypeCheck(t2.$add(i, 1)))
        $.CONSTANT0.add$1(accumulator, t1.$index(a, i));
      return accumulator;
  }
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, null);
};

$.JsonUnsupportedObjectError$withCause = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.parse = function(json, reviver) {
  var listener;
  $.stringTypeCheck(json);
  $.functionTypeCheck(reviver);
  listener = reviver == null ? $.BuildJsonListener$() : $.ReviverJsonListener$(reviver);
  $.JsonParser$(json, listener).parse$0();
  return listener.get$result();
};

$.BuildJsonListener$ = function() {
  return new $.BuildJsonListener([], null, null, null);
};

$.ReviverJsonListener$ = function(reviver) {
  return new $.ReviverJsonListener(reviver, [], null, null, null);
};

$.JsonParser$ = function(source, listener) {
  return new $.JsonParser(source, $.propertyTypeCheck(listener, "$isJsonListener"));
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_stringify = function(object) {
  var output = $.propertyTypeCheck($.StringBuffer_StringBuffer(""), "$isStringBuffer");
  $._JsonStringifier$(output).stringifyValue$1(object);
  return $.stringTypeCheck($.toString(output));
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, length, charCodes, needsEscape, i, t2, charCode, t3, t4, t5;
  $.propertyTypeCheck(sb, "$isStringBuffer");
  t1 = $.getInterceptor$JSStringJSArray(s);
  length = $.intTypeCheck(t1.get$length(s));
  charCodes = $.List_List(0, $.$int);
  $.setRuntimeTypeInfo(charCodes, [$.$int]);
  for (needsEscape = false, i = 0; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, length); i = $.intTypeCheck(t2.$add(i, 1))) {
    charCode = $.intTypeCheck(t1.charCodeAt$1(s, i));
    t3 = $.getInterceptor$JSNumber(charCode);
    if (t3.$lt(charCode, 32)) {
      $.CONSTANT0.add$1(charCodes, 92);
      switch (charCode) {
        case 8:
          $.CONSTANT0.add$1(charCodes, 98);
          break;
        case 9:
          $.CONSTANT0.add$1(charCodes, 116);
          break;
        case 10:
          $.CONSTANT0.add$1(charCodes, 110);
          break;
        case 12:
          $.CONSTANT0.add$1(charCodes, 102);
          break;
        case 13:
          $.CONSTANT0.add$1(charCodes, 114);
          break;
        default:
          $.CONSTANT0.add$1(charCodes, 117);
          t4 = $.$$and(t3.$shr(charCode, 12), 15);
          $.intTypeCheck(t4);
          if ($.boolConversionCheck($.$$lt(t4, 10))) {
            if (typeof t4 !== "number")
              throw $.iae(t4);
            t4 = 48 + t4;
          } else {
            if (typeof t4 !== "number")
              throw $.iae(t4);
            t4 = 87 + t4;
          }
          $.CONSTANT0.add$1(charCodes, $.intTypeCheck(t4));
          t5 = $.$$and(t3.$shr(charCode, 8), 15);
          $.intTypeCheck(t5);
          if ($.boolConversionCheck($.$$lt(t5, 10))) {
            if (typeof t5 !== "number")
              throw $.iae(t5);
            t4 = 48 + t5;
          } else {
            if (typeof t5 !== "number")
              throw $.iae(t5);
            t4 = 87 + t5;
          }
          $.CONSTANT0.add$1(charCodes, $.intTypeCheck(t4));
          t5 = $.$$and(t3.$shr(charCode, 4), 15);
          $.intTypeCheck(t5);
          if ($.boolConversionCheck($.$$lt(t5, 10))) {
            if (typeof t5 !== "number")
              throw $.iae(t5);
            t4 = 48 + t5;
          } else {
            if (typeof t5 !== "number")
              throw $.iae(t5);
            t4 = 87 + t5;
          }
          $.CONSTANT0.add$1(charCodes, $.intTypeCheck(t4));
          t3 = t3.$and(charCode, 15);
          $.intTypeCheck(t3);
          if ($.boolConversionCheck($.$$lt(t3, 10))) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          $.CONSTANT0.add$1(charCodes, $.intTypeCheck(t3));
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      $.CONSTANT0.add$1(charCodes, 92);
      $.CONSTANT0.add$1(charCodes, charCode);
      needsEscape = true;
    } else
      $.CONSTANT0.add$1(charCodes, charCode);
  }
  sb.add$1(needsEscape ? $.String_String$fromCharCodes(charCodes) : s);
};

$.main = function() {
  $.buildHeader();
  $.buildToolbar();
  $.initiateLogin();
};

$.buildHeader = function() {
  var t1 = $.get$nameDiv().get$style();
  t1.set$marginLeft("0.5em");
  t1.set$marginRight("0.5em");
  t1.set$display("inline");
  t1.set$$float("right");
  $.add($.get$header().get$children(), $.get$nameDiv());
  t1 = $.get$mugshot().get$style();
  t1.set$marginLeft("0.5em");
  t1.set$marginRight("0.5em");
  t1.set$display("inline");
  t1.set$$float("right");
  $.add($.get$header().get$children(), $.get$mugshot());
};

$.loadUser = function() {
  var request = $.HttpRequest_HttpRequest();
  request.get$onLoad().listen$1(new $.loadUser_anon(request));
  request.open$2("GET", "https://www.googleapis.com/oauth2/v1/userinfo?alt=json");
  request.setRequestHeader$2("Authorization", "Bearer " + $.S($._token));
  request.send$0();
};

$.setMugShot = function(url) {
  var image;
  $.stringTypeCheck(url);
  image = $.callTypeCheck($.ImageElement_ImageElement(null, null, null), "$isImageElement");
  image.set$src(url);
  image.get$onLoad().listen$1(new $.setMugShot_anon(image));
  $.clear($.get$mugshot().get$children());
  $.add($.get$mugshot().get$children(), image);
};

$.initiateLogin = function() {
  $.get$app().get$style().set$display("none");
  $.scoped(new $.initiateLogin_anon());
};

$.onGetAuthToken = function(auth_token) {
  $._token = $.stringTypeCheck(auth_token);
  $.loadUser();
};

$.buildToolbar = function() {
  $.get$open().get$onClick().listen$1($.handleOpen);
  $.get$open().set$text("o");
  $.add($.get$toolbar().get$children(), $.get$open());
  $.get$update().get$onClick().listen$1($.handleUpdate);
  $.get$update().set$text("u");
  $.add($.get$toolbar().get$children(), $.get$update());
};

$.handleOpen = function(e) {
  var request;
  $.callTypeCheck(e, "$isEvent");
  request = $.HttpRequest_HttpRequest();
  request.get$onLoad().listen$1(new $.handleOpen_anon(request));
  request.open$2("GET", "https://www.googleapis.com/drive/v2/files/0B315YrNkj-ZxZGZoVENDMFdIbmc?key=AIzaSyA0ivauoDqNLjHoQF8Q2jehEEyxVB_ZSX0");
  request.setRequestHeader$2("Authorization", "Bearer " + $.S($._token));
  request.send$0();
};

$.handleUpdate = function(e) {
  var request, metadata, data;
  $.callTypeCheck(e, "$isEvent");
  request = $.HttpRequest_HttpRequest();
  request.get$onLoad().listen$1(new $.handleUpdate_anon(request));
  request.open$2("PUT", "https://www.googleapis.com/upload/drive/v2/files/0B315YrNkj-ZxZGZoVENDMFdIbmc?key=AIzaSyA0ivauoDqNLjHoQF8Q2jehEEyxVB_ZSX0&alt=json");
  metadata = $.makeLiteralMap(["title", "hellodart2.dart", "mimeType", "text/plain"]);
  $.callTypeCheck(window, "$isWindow").btoa$1("a");
  data = $.makeLiteralMap(["body", "\r\n---------314159265358979323846\r\nContent-Type: application/json\r\n\r\n" + $.S($._JsonStringifier_stringify(metadata)) + "\r\n---------314159265358979323846\r\n" + "Content-Type: " + "text/plain" + "\r\n" + "\r\n---------314159265358979323846--"]);
  request.setRequestHeader$2("Content-Type", "multipart/mixed; boundary=\"-------314159265358979323846\"");
  request.setRequestHeader$2("Authorization", "Bearer " + $.S($._token));
  request.send$1(data);
};

$._inject = function(code) {
  var script = $.ScriptElement_ScriptElement();
  script.set$type("text/javascript");
  script.set$innerHtml(code);
  $.add($.callTypeCheck(document, "$isHtmlDocument").get$body().get$nodes(), script);
};

$._initialize = function() {
  var t1, exception;
  if (!($._jsPortSync == null))
    return;
  try {
    t1 = $.callTypeCheck(window, "$isWindow");
    $._jsPortSync = $.propertyTypeCheck(t1.lookupPort$1("dart-js-context"), "$isSendPortSync");
  } catch (exception) {
    $.unwrapException(exception);
  }

  if ($._jsPortSync == null) {
    $._inject("(function() {\n  // Proxy support for js.dart.\n\n  var globalContext = window;\n\n  // Table for local objects and functions that are proxied.\n  function ProxiedObjectTable() {\n    // Name for debugging.\n    this.name = 'js-ref';\n\n    // Table from IDs to JS objects.\n    this.map = {};\n\n    // Generator for new IDs.\n    this._nextId = 0;\n\n    // Counter for deleted proxies.\n    this._deletedCount = 0;\n\n    // Flag for one-time initialization.\n    this._initialized = false;\n\n    // Ports for managing communication to proxies.\n    this.port = new ReceivePortSync();\n    this.sendPort = this.port.toSendPort();\n\n    // Set of IDs that are global.\n    // These will not be freed on an exitScope().\n    this.globalIds = {};\n\n    // Stack of scoped handles.\n    this.handleStack = [];\n\n    // Stack of active scopes where each value is represented by the size of\n    // the handleStack at the beginning of the scope.  When an active scope\n    // is popped, the handleStack is restored to where it was when the\n    // scope was entered.\n    this.scopeIndices = [];\n  }\n\n  // Number of valid IDs.  This is the number of objects (global and local)\n  // kept alive by this table.\n  ProxiedObjectTable.prototype.count = function () {\n    return Object.keys(this.map).length;\n  }\n\n  // Number of total IDs ever allocated.\n  ProxiedObjectTable.prototype.total = function () {\n    return this.count() + this._deletedCount;\n  }\n\n  // Adds an object to the table and return an ID for serialization.\n  ProxiedObjectTable.prototype.add = function (obj) {\n    if (this.scopeIndices.length == 0) {\n      throw \"Cannot allocate a proxy outside of a scope.\";\n    }\n    // TODO(vsm): Cache refs for each obj?\n    var ref = this.name + '-' + this._nextId++;\n    this.handleStack.push(ref);\n    this.map[ref] = obj;\n    return ref;\n  }\n\n  ProxiedObjectTable.prototype._initializeOnce = function () {\n    if (!this._initialized) {\n      this._initialize();\n      this._initialized = true;\n    }\n  }\n\n  // Enters a new scope for this table.\n  ProxiedObjectTable.prototype.enterScope = function() {\n    this._initializeOnce();\n    this.scopeIndices.push(this.handleStack.length);\n  }\n\n  // Invalidates all non-global IDs in the current scope and\n  // exit the current scope.\n  ProxiedObjectTable.prototype.exitScope = function() {\n    var start = this.scopeIndices.pop();\n    for (var i = start; i < this.handleStack.length; ++i) {\n      var key = this.handleStack[i];\n      if (!this.globalIds.hasOwnProperty(key)) {\n        delete this.map[this.handleStack[i]];\n        this._deletedCount++;\n      }\n    }\n    this.handleStack = this.handleStack.splice(0, start);\n  }\n\n  // Makes this ID globally scope.  It must be explicitly invalidated.\n  ProxiedObjectTable.prototype.globalize = function(id) {\n    this.globalIds[id] = true;\n  }\n\n  // Invalidates this ID, potentially freeing its corresponding object.\n  ProxiedObjectTable.prototype.invalidate = function(id) {\n    var old = this.get(id);\n    delete this.globalIds[id];\n    delete this.map[id];\n    this._deletedCount++;\n    return old;\n  }\n\n  // Gets the object or function corresponding to this ID.\n  ProxiedObjectTable.prototype.get = function (id) {\n    if (!this.map.hasOwnProperty(id)) {\n      throw 'Proxy ' + id + ' has been invalidated.'\n    }\n    return this.map[id];\n  }\n\n  ProxiedObjectTable.prototype._initialize = function () {\n    // Configure this table's port to forward methods, getters, and setters\n    // from the remote proxy to the local object.\n    var table = this;\n\n    this.port.receive(function (message) {\n      // TODO(vsm): Support a mechanism to register a handler here.\n      try {\n        var receiver = table.get(message[0]);\n        var member = message[1];\n        var kind = message[2];\n        var args = message[3].map(deserialize);\n        if (kind == 'get') {\n          // Getter.\n          var field = member;\n          if (field in receiver && args.length == 0) {\n            return [ 'return', serialize(receiver[field]) ];\n          }\n        } else if (kind == 'set') {\n          // Setter.\n          var field = member;\n          if (args.length == 1) {\n            return [ 'return', serialize(receiver[field] = args[0]) ];\n          }\n        } else if (kind == 'apply') {\n          // Direct function invocation.\n          // TODO(vsm): Should we capture _this_ automatically?\n          return [ 'return', serialize(receiver.apply(null, args)) ];\n        } else if (member == '[]' && args.length == 1) {\n          // Index getter.\n          return [ 'return', serialize(receiver[args[0]]) ];\n        } else if (member == '[]=' && args.length == 2) {\n          // Index setter.\n          return [ 'return', serialize(receiver[args[0]] = args[1]) ];\n        } else {\n          var f = receiver[member];\n          if (f) {\n            var result = f.apply(receiver, args);\n            return [ 'return', serialize(result) ];\n          }\n        }\n        return [ 'none' ];\n      } catch (e) {\n        return [ 'throws', e.toString() ];\n      }\n    });\n  }\n\n  // Singleton for local proxied objects.\n  var proxiedObjectTable = new ProxiedObjectTable();\n\n  // DOM element serialization code.\n  var _localNextElementId = 0;\n  var _DART_ID = 'data-dart_id';\n  var _DART_TEMPORARY_ATTACHED = 'data-dart_temporary_attached';\n\n  function serializeElement(e) {\n    // TODO(vsm): Use an isolate-specific id.\n    var id;\n    if (e.hasAttribute(_DART_ID)) {\n      id = e.getAttribute(_DART_ID);\n    } else {\n      id = (_localNextElementId++).toString();\n      e.setAttribute(_DART_ID, id);\n    }\n    if (e !== document.documentElement) {\n      // Element must be attached to DOM to be retrieve in js part.\n      // Attach top unattached parent to avoid detaching parent of \"e\" when\n      // appending \"e\" directly to document. We keep count of elements\n      // temporarily attached to prevent detaching top unattached parent to\n      // early. This count is equals to the length of _DART_TEMPORARY_ATTACHED\n      // attribute. There could be other elements to serialize having the same\n      // top unattached parent.\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue + \"a\";\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          break;\n        }\n        if (top.parentNode == null) {\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, \"a\");\n          document.documentElement.appendChild(top);\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return id;\n  }\n\n  function deserializeElement(id) {\n    // TODO(vsm): Clear the attribute.\n    var list = document.querySelectorAll('[' + _DART_ID + '=\"' + id + '\"]');\n\n    if (list.length > 1) throw 'Non unique ID: ' + id;\n    if (list.length == 0) {\n      throw 'Element must be attached to the document: ' + id;\n    }\n    var e = list[0];\n    if (e !== document.documentElement) {\n      // detach temporary attached element\n      var top = e;\n      while (true) {\n        if (top.hasAttribute(_DART_TEMPORARY_ATTACHED)) {\n          var oldValue = top.getAttribute(_DART_TEMPORARY_ATTACHED);\n          var newValue = oldValue.substring(1);\n          top.setAttribute(_DART_TEMPORARY_ATTACHED, newValue);\n          // detach top only if no more elements have to be unserialized\n          if (top.getAttribute(_DART_TEMPORARY_ATTACHED).length === 0) {\n            top.removeAttribute(_DART_TEMPORARY_ATTACHED);\n            document.documentElement.removeChild(top);\n          }\n          break;\n        }\n        if (top.parentNode === document.documentElement) {\n          // e was already attached to dom\n          break;\n        }\n        top = top.parentNode;\n      }\n    }\n    return e;\n  }\n\n\n  // Type for remote proxies to Dart objects.\n  function DartProxy(id, sendPort) {\n    this.id = id;\n    this.port = sendPort;\n  }\n\n  // Serializes JS types to SendPortSync format:\n  // - primitives -> primitives\n  // - sendport -> sendport\n  // - DOM element -> [ 'domref', element-id ]\n  // - Function -> [ 'funcref', function-id, sendport ]\n  // - Object -> [ 'objref', object-id, sendport ]\n  function serialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Non-proxied objects are serialized.\n      return message;\n    } else if (message instanceof Element &&\n        (message.ownerDocument == null || message.ownerDocument == document)) {\n      return [ 'domref', serializeElement(message) ];\n    } else if (typeof(message) == 'function') {\n      if ('_dart_id' in message) {\n        // Remote function proxy.\n        var remoteId = message._dart_id;\n        var remoteSendPort = message._dart_port;\n        return [ 'funcref', remoteId, remoteSendPort ];\n      } else {\n        // Local function proxy.\n        return [ 'funcref',\n                 proxiedObjectTable.add(message),\n                 proxiedObjectTable.sendPort ];\n      }\n    } else if (message instanceof DartProxy) {\n      // Remote object proxy.\n      return [ 'objref', message.id, message.port ];\n    } else {\n      // Local object proxy.\n      return [ 'objref',\n               proxiedObjectTable.add(message),\n               proxiedObjectTable.sendPort ];\n    }\n  }\n\n  function deserialize(message) {\n    if (message == null) {\n      return null;  // Convert undefined to null.\n    } else if (typeof(message) == 'string' ||\n               typeof(message) == 'number' ||\n               typeof(message) == 'boolean') {\n      // Primitives are passed directly through.\n      return message;\n    } else if (message instanceof SendPortSync) {\n      // Serialized type.\n      return message;\n    }\n    var tag = message[0];\n    switch (tag) {\n      case 'funcref': return deserializeFunction(message);\n      case 'objref': return deserializeObject(message);\n      case 'domref': return deserializeElement(message[1]);\n    }\n    throw 'Unsupported serialized data: ' + message;\n  }\n\n  // Create a local function that forwards to the remote function.\n  function deserializeFunction(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local function.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote function.  Forward to its port.\n      var f = function () {\n        var depth = enterScope();\n        try {\n          var args = Array.prototype.slice.apply(arguments).map(serialize);\n          var result = port.callSync([id, '#call', args]);\n          if (result[0] == 'throws') throw deserialize(result[1]);\n          return deserialize(result[1]);\n        } finally {\n          exitScope(depth);\n        }\n      };\n      // Cache the remote id and port.\n      f._dart_id = id;\n      f._dart_port = port;\n      return f;\n    }\n  }\n\n  // Creates a DartProxy to forwards to the remote object.\n  function deserializeObject(message) {\n    var id = message[1];\n    var port = message[2];\n    // TODO(vsm): Add a more robust check for a local SendPortSync.\n    if (\"receivePort\" in port) {\n      // Local object.\n      return proxiedObjectTable.get(id);\n    } else {\n      // Remote object.\n      return new DartProxy(id, port);\n    }\n  }\n\n  // Remote handler to construct a new JavaScript object given its\n  // serialized constructor and arguments.\n  function construct(args) {\n    args = args.map(deserialize);\n    var constructor = args[0];\n    args = Array.prototype.slice.call(args, 1);\n\n    // Until 10 args, the 'new' operator is used. With more arguments we use a\n    // generic way that may not work, particulary when the constructor does not\n    // have an \"apply\" method.\n    var ret = null;\n    if (args.length === 0) {\n      ret = new constructor();\n    } else if (args.length === 1) {\n      ret = new constructor(args[0]);\n    } else if (args.length === 2) {\n      ret = new constructor(args[0], args[1]);\n    } else if (args.length === 3) {\n      ret = new constructor(args[0], args[1], args[2]);\n    } else if (args.length === 4) {\n      ret = new constructor(args[0], args[1], args[2], args[3]);\n    } else if (args.length === 5) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4]);\n    } else if (args.length === 6) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5]);\n    } else if (args.length === 7) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 8) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 9) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6]);\n    } else if (args.length === 10) {\n      ret = new constructor(args[0], args[1], args[2], args[3], args[4],\n                            args[5], args[6], args[7], args[8], args[9]);\n    } else {\n      // Dummy Type with correct constructor.\n      var Type = function(){};\n      Type.prototype = constructor.prototype;\n  \n      // Create a new instance\n      var instance = new Type();\n  \n      // Call the original constructor.\n      ret = constructor.apply(instance, args);\n      ret = Object(ret) === ret ? ret : instance;\n    }\n    return serialize(ret);\n  }\n\n  // Remote handler to return the top-level JavaScript context.\n  function context(data) {\n    return serialize(globalContext);\n  }\n\n  // Remote handler for debugging.\n  function debug() {\n    var live = proxiedObjectTable.count();\n    var total = proxiedObjectTable.total();\n    return 'JS objects Live : ' + live +\n           ' (out of ' + total + ' ever allocated).';\n  }\n\n  // Return true if two JavaScript proxies are equal (==).\n  function proxyEquals(args) {\n    return deserialize(args[0]) == deserialize(args[1]);\n  }\n\n  // Return true if a JavaScript proxy is instance of a given type (instanceof).\n  function proxyInstanceof(args) {\n    return deserialize(args[0]) instanceof deserialize(args[1]);\n  }\n\n  function proxyConvert(args) {\n    return serialize(deserializeDataTree(args));\n  }\n\n  function deserializeDataTree(data) {\n    var type = data[0];\n    var value = data[1];\n    if (type === 'map') {\n      var obj = {};\n      for (var i = 0; i < value.length; i++) {\n        obj[value[i][0]] = deserializeDataTree(value[i][1]);\n      }\n      return obj;\n    } else if (type === 'list') {\n      var list = [];\n      for (var i = 0; i < value.length; i++) {\n        list.push(deserializeDataTree(value[i]));\n      }\n      return list;\n    } else /* 'simple' */ {\n      return deserialize(value);\n    }\n  }\n\n  function makeGlobalPort(name, f) {\n    var port = new ReceivePortSync();\n    port.receive(f);\n    window.registerPort(name, port.toSendPort());\n  }\n\n  // Enters a new scope in the JavaScript context.\n  function enterJavaScriptScope() {\n    proxiedObjectTable.enterScope();\n  }\n\n  // Enters a new scope in both the JavaScript and Dart context.\n  var _dartEnterScopePort = null;\n  function enterScope() {\n    enterJavaScriptScope();\n    if (!_dartEnterScopePort) {\n      _dartEnterScopePort = window.lookupPort('js-dart-enter-scope');\n    }\n    return _dartEnterScopePort.callSync([]);\n  }\n\n  // Exits the current scope (and invalidate local IDs) in the JavaScript\n  // context.\n  function exitJavaScriptScope() {\n    proxiedObjectTable.exitScope();\n  }\n\n  // Exits the current scope in both the JavaScript and Dart context.\n  var _dartExitScopePort = null;\n  function exitScope(depth) {\n    exitJavaScriptScope();\n    if (!_dartExitScopePort) {\n      _dartExitScopePort = window.lookupPort('js-dart-exit-scope');\n    }\n    return _dartExitScopePort.callSync([ depth ]);\n  }\n\n  makeGlobalPort('dart-js-context', context);\n  makeGlobalPort('dart-js-create', construct);\n  makeGlobalPort('dart-js-debug', debug);\n  makeGlobalPort('dart-js-equals', proxyEquals);\n  makeGlobalPort('dart-js-instanceof', proxyInstanceof);\n  makeGlobalPort('dart-js-convert', proxyConvert);\n  makeGlobalPort('dart-js-enter-scope', enterJavaScriptScope);\n  makeGlobalPort('dart-js-exit-scope', exitJavaScriptScope);\n  makeGlobalPort('dart-js-globalize', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.globalize(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n  makeGlobalPort('dart-js-invalidate', function(data) {\n    if (data[0] == \"objref\") return proxiedObjectTable.invalidate(data[1]);\n    // TODO(vsm): Do we ever need to globalize functions?\n    throw 'Illegal type: ' + data[0];\n  });\n})();\n");
    $._jsPortSync = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-context"), "$isSendPortSync");
  }
  $._jsPortCreate = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-create"), "$isSendPortSync");
  $._jsPortDebug = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-debug"), "$isSendPortSync");
  $._jsPortEquals = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-equals"), "$isSendPortSync");
  $._jsPortInstanceof = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-instanceof"), "$isSendPortSync");
  $._jsPortConvert = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-convert"), "$isSendPortSync");
  $._jsEnterJavaScriptScope = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-enter-scope"), "$isSendPortSync");
  $._jsExitJavaScriptScope = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-exit-scope"), "$isSendPortSync");
  $._jsGlobalize = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-globalize"), "$isSendPortSync");
  $._jsInvalidate = $.propertyTypeCheck($.callTypeCheck(window, "$isWindow").lookupPort$1("dart-js-invalidate"), "$isSendPortSync");
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon());
  $._dartEnterDartScope = t1;
  t1 = $.ReceivePortSync$();
  t1.receive$1(new $._initialize_anon0());
  $._dartExitDartScope = t1;
  $.callTypeCheck(window, "$isWindow").registerPort$2("js-dart-enter-scope", $._dartEnterDartScope.toSendPort$0());
  $.callTypeCheck(window, "$isWindow").registerPort$2("js-dart-exit-scope", $._dartExitDartScope.toSendPort$0());
};

$.context = function() {
  if ($.boolConversionCheck($.$$eq($._depth(), 0)))
    throw $.$$throw("Cannot get JavaScript context out of scope.");
  return $.propertyTypeCheck($._deserialize($._jsPortSync.callSync$1([])), "$isProxy");
};

$._depth = function() {
  return $.length($.get$_proxiedObjectTable().get$_scopeIndices());
};

$.scoped = function(f) {
  var depth, t1;
  depth = $._enterScope();
  try {
    t1 = f.call$0();
    return t1;
  } finally {
    $._exitScope(depth);
  }
};

$._enterScope = function() {
  $._initialize();
  $.get$_proxiedObjectTable().enterScope$0();
  $._jsEnterJavaScriptScope.callSync$1([]);
  return $.length($.get$_proxiedObjectTable().get$_scopeIndices());
};

$._exitScope = function(depth) {
  $.assertHelper($.$$eq($.length($.get$_proxiedObjectTable().get$_scopeIndices()), depth));
  $._jsExitJavaScriptScope.callSync$1([]);
  $.get$_proxiedObjectTable().exitScope$0();
};

$.Callback$once = function(f) {
  var t1;
  $.functionTypeCheck(f);
  t1 = new $.Callback(null, null, null);
  t1.Callback$once$1(f);
  return t1;
};

$.Proxy_Proxy = function($constructor, arg1, arg2, arg3, arg4) {
  var t1, t2, t3, t4, arguments;
  t1 = $ === arg1;
  if (t1)
    arg1 = null;
  t2 = $ === arg2;
  if (t2)
    arg2 = null;
  t3 = $ === arg3;
  if (t3)
    arg3 = null;
  t4 = $ === arg4;
  if (t4)
    arg4 = null;
  $.propertyTypeCheck($constructor, "$isFunctionProxy");
  if (!t4)
    arguments = [arg1, arg2, arg3, arg4];
  else if (!t3)
    arguments = [arg1, arg2, arg3];
  else if (!t2)
    arguments = [arg1, arg2];
  else
    arguments = !t1 ? [arg1] : [];
  return $.Proxy_Proxy$withArgList($constructor, arguments);
};

$.Proxy_Proxy$withArgList = function($constructor, arguments) {
  var t1, t2;
  if ($.boolConversionCheck($.$$eq($.length($.get$_proxiedObjectTable().get$_scopeIndices()), 0)))
    throw $.$$throw("Cannot create Proxy out of scope.");
  t1 = [$constructor];
  $.CONSTANT0.addAll$1(t1, arguments);
  t2 = $.toList($.CONSTANT0.mappedBy$1(t1, $._serialize));
  return $._deserialize($._jsPortCreate.callSync$1(t2));
};

$.Proxy$_internal = function(_port, _id) {
  return new $.Proxy($.propertyTypeCheck(_port, "$isSendPortSync"), _id);
};

$.Proxy__forward = function(receiver, member, kind, args) {
  var result, t1;
  if ($.boolConversionCheck($.$$eq($.length($.get$_proxiedObjectTable().get$_scopeIndices()), 0)))
    throw $.$$throw("Cannot access a JavaScript proxy out of scope.");
  result = receiver._port.callSync$1([receiver._liblib2$_id, member, kind, $.toList($.mappedBy(args, $._serialize))]);
  t1 = $.getInterceptor$JSStringJSArray(result);
  switch (t1.$index(result, 0)) {
    case "return":
      return $._deserialize(t1.$index(result, 1));
    case "throws":
      throw $.$$throw($._deserialize(t1.$index(result, 1)));
    case "none":
      throw $.$$throw($.NoSuchMethodError$(receiver, member, args, $.makeLiteralMap([]), null));
    default:
      throw $.$$throw("Invalid return value");
  }
};

$.FunctionProxy$_internal = function(port, id) {
  return new $.FunctionProxy($.propertyTypeCheck(port, "$isSendPortSync"), id);
};

$._ProxiedObjectTable$ = function() {
  var t1, t2, t3, t4, t5;
  t1 = $.makeLiteralMap([]);
  t2 = $.ReceivePortSync$();
  t3 = $.List_List(0, $.String);
  $.setRuntimeTypeInfo(t3, [$.String]);
  t4 = $.List_List(0, $.$int);
  $.setRuntimeTypeInfo(t4, [$.$int]);
  t5 = $.Set_Set($.String);
  t4 = new $._ProxiedObjectTable("dart-ref", 0, 0, $.callTypeCheck(t1, "$isMap"), t2, $.propertyTypeCheck(t5, "$isSet"), t3, t4);
  t4._ProxiedObjectTable$0();
  return t4;
};

$._serialize = function(message) {
  var t1;
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!message.$isSendPortSync)
    return message;
  else {
    if (typeof message === "object" && message !== null && message.$isElement()) {
      t1 = message.ownerDocument;
      t1 = $.boolConversionCheck(t1 == null || $.boolConversionCheck($.$$eq(t1, $.callTypeCheck(document, "$isHtmlDocument"))));
    } else
      t1 = false;
    if ($.boolConversionCheck(t1))
      return ["domref", $._serializeElement(message)];
    else if (typeof message === "object" && message !== null && !!message.$isCallback)
      return message.get$_serialized();
    else if (typeof message === "object" && message !== null && !!message.$isProxy)
      return ["objref", message._liblib2$_id, message._port];
    else
      return ["objref", $.add($.get$_proxiedObjectTable(), message), $.get$_proxiedObjectTable().get$sendPort()];
  }
};

$._deserialize = function(message) {
  var t1, t2, t3;
  t1 = new $._deserialize_deserializeFunction();
  t2 = new $._deserialize_deserializeObject();
  t3 = $.getInterceptor(message);
  if (message == null)
    return;
  else if (typeof message === "string" || typeof message === "number" || typeof message === "boolean")
    return message;
  else if (typeof message === "object" && message !== null && !!message.$isSendPortSync)
    return message;
  switch (t3.$index(message, 0)) {
    case "funcref":
      return t1.call$1(message);
    case "objref":
      return t2.call$1(message);
    case "domref":
      return $._deserializeElement(t3.$index(message, 1));
  }
  throw $.$$throw("Unsupported serialized data: " + $.S(message));
};

$._serializeElement = function(e) {
  var id, t1, top, t2;
  $.callTypeCheck(e, "$isElement");
  if ($.boolConversionCheck(e.get$attributes().containsKey$1("data-dart_id")))
    id = $.$$index(e.get$attributes(), "data-dart_id");
  else {
    t1 = $._localNextElementId;
    $._localNextElementId = $.intTypeCheck($.$$add(t1, 1));
    id = "dart-" + $.S(t1);
    $.$$indexSet(e.get$attributes(), "data-dart_id", id);
  }
  t1 = $.callTypeCheck(document, "$isHtmlDocument").get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top = e; true;) {
      if ($.boolConversionCheck(top.get$attributes().containsKey$1("data-dart_temporary_attached"))) {
        t1 = $.concat($.$$index(top.get$attributes(), "data-dart_temporary_attached"), "a");
        $.$$indexSet(top.get$attributes(), "data-dart_temporary_attached", t1);
        break;
      }
      if (top.get$parent() == null) {
        $.$$indexSet(top.get$attributes(), "data-dart_temporary_attached", "a");
        $.add($.callTypeCheck(document, "$isHtmlDocument").get$documentElement().get$children(), top);
        break;
      }
      t1 = top.get$parent();
      t2 = $.callTypeCheck(document, "$isHtmlDocument").get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top = top.get$parent();
    }
  return id;
};

$._deserializeElement = function(id) {
  var t1, list, e, top, t2;
  t1 = "[data-dart_id=\"" + $.S(id) + "\"]";
  list = $.listTypeCheck($.callTypeCheck(document, "$isHtmlDocument").queryAll$1(t1));
  t1 = $.getInterceptor$JSStringJSArray(list);
  if ($.boolConversionCheck($.$$gt(t1.get$length(list), 1)))
    throw $.$$throw("Non unique ID: " + $.S(id));
  if ($.boolConversionCheck($.$$eq(t1.get$length(list), 0)))
    throw $.$$throw("Only elements attached to document can be serialized: " + $.S(id));
  e = t1.$index(list, 0);
  t1 = $.callTypeCheck(document, "$isHtmlDocument").get$documentElement();
  if (!(e == null ? t1 == null : e === t1))
    for (top = e; true;) {
      if ($.boolConversionCheck(top.get$attributes().containsKey$1("data-dart_temporary_attached"))) {
        t1 = $.substring0($.$$index(top.get$attributes(), "data-dart_temporary_attached"), 1);
        $.$$indexSet(top.get$attributes(), "data-dart_temporary_attached", t1);
        if ($.boolConversionCheck($.$$eq($.length($.$$index(top.get$attributes(), "data-dart_temporary_attached")), 0))) {
          $.remove(top.get$attributes(), "data-dart_temporary_attached");
          top.remove$0();
        }
        break;
      }
      t1 = top.get$parent();
      t2 = $.callTypeCheck(document, "$isHtmlDocument").get$documentElement();
      if (t1 == null ? t2 == null : t1 === t2)
        break;
      top = top.get$parent();
    }
  return $.callTypeCheck(e, "$isElement");
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.IsolateNatives__processWorkerMessage.$is_Reviver = true;
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.$$throw.$is_Predicate = true;
$.$$throw.$is_Transformation = true;
$.$$throw.$isErrorCallback = true;
$.$$throw.$is_ErrorHandler = true;
$.$$throw.$isEventListener = true;
$.$$throw.$is_FutureOnError = true;
$.$$throw.$is_FutureErrorTest = true;
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.DartError_toStringWrapper.$isVoidCallback = true;
$.DartError_toStringWrapper.$is_DoneHandler = true;
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInChrome.$is_FutureOnError = true;
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInSafari.$is_FutureOnError = true;
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInOpera.$is_FutureOnError = true;
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInFirefox.$is_FutureOnError = true;
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.typeNameInIE.$is_FutureOnError = true;
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.constructorNameFallback.$is_FutureOnError = true;
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullDataHandler.$isErrorCallback = true;
$._nullDataHandler.$is_ErrorHandler = true;
$._nullDataHandler.$isEventListener = true;
$._nullDataHandler.$is_FutureOnError = true;
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullErrorHandler.$is_ErrorHandler = true;
$._nullErrorHandler.$is_FutureOnError = true;
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$._nullDoneHandler.$isVoidCallback = true;
$._nullDoneHandler.$is_DoneHandler = true;
$.onGetAuthToken.call$1 = $.onGetAuthToken;
$.onGetAuthToken.$name = "onGetAuthToken";
$.onGetAuthToken.$isErrorCallback = true;
$.onGetAuthToken.$is_ErrorHandler = true;
$.onGetAuthToken.$isEventListener = true;
$.onGetAuthToken.$is_FutureOnError = true;
$.handleOpen.call$1 = $.handleOpen;
$.handleOpen.$name = "handleOpen";
$.handleOpen.$isEventListener = true;
$.handleUpdate.call$1 = $.handleUpdate;
$.handleUpdate.$name = "handleUpdate";
$.handleUpdate.$isEventListener = true;
$._serialize.call$1 = $._serialize;
$._serialize.$name = "_serialize";
$._serialize.$is_Predicate = true;
$._serialize.$is_Transformation = true;
$._serialize.$isErrorCallback = true;
$._serialize.$is_ErrorHandler = true;
$._serialize.$isEventListener = true;
$._serialize.$is_FutureOnError = true;
$._serialize.$is_FutureErrorTest = true;
$._deserialize.call$1 = $._deserialize;
$._deserialize.$name = "_deserialize";
$._deserialize.$is_Predicate = true;
$._deserialize.$is_Transformation = true;
$._deserialize.$isErrorCallback = true;
$._deserialize.$is_ErrorHandler = true;
$._deserialize.$isEventListener = true;
$._deserialize.$is_FutureOnError = true;
$._deserialize.$is_FutureErrorTest = true;
Isolate.$finishClasses($$);
$$ = {};
$.Gamepad = {builtin$cls: 'Gamepad', $isGamepad: true};
$.TextTrackCue = {builtin$cls: 'TextTrackCue', $isTextTrackCue: true};
$.Map = {builtin$cls: 'Map', $isMap: true};
$.PathSeg = {builtin$cls: 'PathSeg', $isPathSeg: true};
$.num = {builtin$cls: 'num', $isnum: true};
$.ElementInstance = {builtin$cls: 'ElementInstance', $isElementInstance: true};
$.List = {builtin$cls: 'List', $isList: true};
$.MediaStream = {builtin$cls: 'MediaStream', $isMediaStream: true};
$.Match = {builtin$cls: 'Match', $isMatch: true};
$.Set = {builtin$cls: 'Set'};
$.Touch = {builtin$cls: 'Touch', $isTouch: true};
$.DomMimeType = {builtin$cls: 'DomMimeType', $isDomMimeType: true};
$.ProgressEvent = {builtin$cls: 'ProgressEvent'};
$.String = {builtin$cls: 'String', $isString: true};
$.DomPlugin = {builtin$cls: 'DomPlugin', $isDomPlugin: true};
$.MouseEvent = {builtin$cls: 'MouseEvent'};
$.ClientRect = {builtin$cls: 'ClientRect', $isClientRect: true};
$.Element = {builtin$cls: 'Element', $isNode: true, $isElement: true};
$.SourceBuffer = {builtin$cls: 'SourceBuffer', $isSourceBuffer: true};
$.bool = {builtin$cls: 'bool'};
$._ManagerStub = {builtin$cls: '_ManagerStub', $is_ManagerStub: true};
$.SpeechGrammar = {builtin$cls: 'SpeechGrammar', $isSpeechGrammar: true};
$.Node = {builtin$cls: 'Node', $isNode: true};
$.Entry = {builtin$cls: 'Entry', $isEntry: true};
$.EntrySync = {builtin$cls: 'EntrySync', $isEntrySync: true};
$.SpeechInputResult = {builtin$cls: 'SpeechInputResult', $isSpeechInputResult: true};
$.Event = {builtin$cls: 'Event'};
$.SpeechRecognitionResult = {builtin$cls: 'SpeechRecognitionResult', $isSpeechRecognitionResult: true};
$.File = {builtin$cls: 'File', $isFile: true};
$.CssRule = {builtin$cls: 'CssRule', $isCssRule: true};
$.SendPort = {builtin$cls: 'SendPort'};
$.ReceivePort = {builtin$cls: 'ReceivePort', $isReceivePort: true};
$.CssValue = {builtin$cls: 'CssValue', $isCssValue: true};
$.Length = {builtin$cls: 'Length', $isLength: true};
$.StyleSheet = {builtin$cls: 'StyleSheet', $isStyleSheet: true};
$.Transform = {builtin$cls: 'Transform', $isTransform: true};
$.Future = {builtin$cls: 'Future'};
$.$int = {builtin$cls: '$int', $is$int: true, $isnum: true};
$.Number = {builtin$cls: 'Number', $isNumber: true};
$.TextTrack = {builtin$cls: 'TextTrack', $isTextTrack: true};
$._IsolateContext.$is_IsolateContext = true;
$._IsolateEvent.$is_IsolateEvent = true;
$.ReceivePortSync.$isReceivePortSync = true;
$._KeyValuePair.$is_KeyValuePair = true;
$.DoubleLinkedQueueEntry.$isDoubleLinkedQueueEntry = true;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT8 = Isolate.makeConstantList([]);
$.CONSTANT5 = new Isolate.$isolateProperties.EventStreamProvider("load");
$.CONSTANT0 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT1 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT3 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT2 = new Isolate.$isolateProperties.JSString();
$.CONSTANT6 = new Isolate.$isolateProperties.EventStreamProvider("click");
$.CONSTANT4 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT7 = new Isolate.$isolateProperties.Object();
$.lazyPort = null;
$._SPAWNED_SIGNAL = "spawned";
$.ReceivePortImpl__nextFreeId = 1;
$.JSInvocationMirror_METHOD = 0;
$.JSInvocationMirror_GETTER = 1;
$.JSInvocationMirror_SETTER = 2;
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._getTypeNameOf = null;
$._FutureImpl__INCOMPLETE = 0;
$._FutureImpl__VALUE = 1;
$._FutureImpl__ERROR = 2;
$._FutureImpl__UNHANDLED_ERROR = 4;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT3;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.BodyElement_loadEvent = Isolate.$isolateProperties.CONSTANT5;
$.Element_clickEvent = Isolate.$isolateProperties.CONSTANT6;
$.Element_loadEvent = Isolate.$isolateProperties.CONSTANT5;
$.FileReader_loadEvent = Isolate.$isolateProperties.CONSTANT5;
$.HttpRequest_loadEvent = Isolate.$isolateProperties.CONSTANT5;
$.HttpRequestUpload_loadEvent = Isolate.$isolateProperties.CONSTANT5;
$.Notification_clickEvent = Isolate.$isolateProperties.CONSTANT6;
$.ReceivePortSync__portMap = null;
$.ReceivePortSync__portIdCount = null;
$.ReceivePortSync__cachedIsolateId = null;
$.JsonParser_INSIDE_ARRAY = 1;
$.JsonParser_INSIDE_OBJECT = 2;
$.JsonParser_AFTER_COLON = 3;
$.JsonParser_ALLOW_STRING_MASK = 8;
$.JsonParser_ALLOW_VALUE_MASK = 4;
$.JsonParser_ALLOW_VALUE = 0;
$.JsonParser_STRING_ONLY = 4;
$.JsonParser_NO_VALUES = 12;
$.JsonParser_EMPTY = 0;
$.JsonParser_NON_EMPTY = 16;
$.JsonParser_VALUE_READ_BITS = 28;
$.JsonParser_STATE_INITIAL = 0;
$.JsonParser_STATE_END = 28;
$.JsonParser_STATE_ARRAY_EMPTY = 1;
$.JsonParser_STATE_ARRAY_VALUE = 29;
$.JsonParser_STATE_ARRAY_COMMA = 17;
$.JsonParser_STATE_OBJECT_EMPTY = 6;
$.JsonParser_STATE_OBJECT_KEY = 30;
$.JsonParser_STATE_OBJECT_COLON = 19;
$.JsonParser_STATE_OBJECT_VALUE = 31;
$.JsonParser_STATE_OBJECT_COMMA = 22;
$.JsonParser_BACKSPACE = 8;
$.JsonParser_TAB = 9;
$.JsonParser_NEWLINE = 10;
$.JsonParser_CARRIAGE_RETURN = 13;
$.JsonParser_FORM_FEED = 12;
$.JsonParser_SPACE = 32;
$.JsonParser_QUOTE = 34;
$.JsonParser_PLUS = 43;
$.JsonParser_COMMA = 44;
$.JsonParser_MINUS = 45;
$.JsonParser_DECIMALPOINT = 46;
$.JsonParser_SLASH = 47;
$.JsonParser_CHAR_0 = 48;
$.JsonParser_CHAR_9 = 57;
$.JsonParser_COLON = 58;
$.JsonParser_CHAR_E = 69;
$.JsonParser_LBRACKET = 91;
$.JsonParser_BACKSLASH = 92;
$.JsonParser_RBRACKET = 93;
$.JsonParser_CHAR_a = 97;
$.JsonParser_CHAR_b = 98;
$.JsonParser_CHAR_e = 101;
$.JsonParser_CHAR_f = 102;
$.JsonParser_CHAR_l = 108;
$.JsonParser_CHAR_n = 110;
$.JsonParser_CHAR_r = 114;
$.JsonParser_CHAR_s = 115;
$.JsonParser_CHAR_t = 116;
$.JsonParser_CHAR_u = 117;
$.JsonParser_LBRACE = 123;
$.JsonParser_RBRACE = 125;
$.ElementInstance_clickEvent = Isolate.$isolateProperties.CONSTANT6;
$.ElementInstance_loadEvent = Isolate.$isolateProperties.CONSTANT5;
$._token = null;
$._jsPortSync = null;
$._jsPortCreate = null;
$._jsPortDebug = null;
$._jsPortEquals = null;
$._jsPortInstanceof = null;
$._jsPortConvert = null;
$._jsEnterJavaScriptScope = null;
$._jsExitJavaScriptScope = null;
$._jsGlobalize = null;
$._jsInvalidate = null;
$._dartEnterDartScope = null;
$._dartExitDartScope = null;
$._localNextElementId = 0;
$._DART_ID = "data-dart_id";
$._DART_TEMPORARY_ATTACHED = "data-dart_temporary_attached";
$.length = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$length(receiver);
};
$.$$eq = function(receiver, a0) {
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$$gt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$gt(receiver, a0);
};
$.toString = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.add = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).add$1(receiver, a0);
};
$.replaceAll = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).replaceAll$2(receiver, a0, a1);
};
$.iterator = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$iterator(receiver);
};
$.$$add = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$add(receiver, a0);
};
$.$$indexSet = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).$indexSet(receiver, a0, a1);
};
$.addLast = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addLast$1(receiver, a0);
};
$.hashCode = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.remove = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).remove$1(receiver, a0);
};
$.removeRange = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).removeRange$2(receiver, a0, a1);
};
$.contains0 = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$contains(receiver);
};
$.removeLast = function(receiver) {
  return $.getInterceptor$JSArray(receiver).removeLast$0(receiver);
};
$.$$lt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$lt(receiver, a0);
};
$.substring = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).substring$2(receiver, a0, a1);
};
$.substring0 = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).substring$1(receiver, a0);
};
$.$$le = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$le(receiver, a0);
};
$.$$shl = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$shl(receiver, a0);
};
$.toList = function(receiver) {
  return $.getInterceptor$JSArray(receiver).toList$0(receiver);
};
$.$$sub = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$sub(receiver, a0);
};
$.indexOf = function(receiver, a0, a1) {
  return $.getInterceptor$JSStringJSArray(receiver).indexOf$2(receiver, a0, a1);
};
$.$$shr = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$shr(receiver, a0);
};
$.isEmpty = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$isEmpty(receiver);
};
$.$$tdiv = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$tdiv(receiver, a0);
};
$.$$ge = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$ge(receiver, a0);
};
$.getRange = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).getRange$2(receiver, a0, a1);
};
$.contains = function(receiver, a0) {
  return $.getInterceptor$JSStringJSArray(receiver).contains$1(receiver, a0);
};
$.toLowerCase = function(receiver) {
  return $.getInterceptor$JSString(receiver).toLowerCase$0(receiver);
};
$.$$index = function(receiver, a0) {
  return $.getInterceptor$JSStringJSArray(receiver).$index(receiver, a0);
};
$.$$xor = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$xor(receiver, a0);
};
$.mappedBy = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).mappedBy$1(receiver, a0);
};
$.allMatches = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).allMatches$1(receiver, a0);
};
$.$$or = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$or(receiver, a0);
};
$.last = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$last(receiver);
};
$.forEach = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).forEach$1(receiver, a0);
};
$.addAll = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addAll$1(receiver, a0);
};
$.removeMatching = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).removeMatching$1(receiver, a0);
};
$.length0 = function(receiver, value) {
  return $.getInterceptor$JSArray(receiver).set$length(receiver, value);
};
$.clear = function(receiver) {
  return $.getInterceptor$JSArray(receiver).clear$0(receiver);
};
$.$$and = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$and(receiver, a0);
};
$.$$mul = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$mul(receiver, a0);
};
$.where = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).where$1(receiver, a0);
};
$.concat = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).concat$1(receiver, a0);
};
$.charCodeAt = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).charCodeAt$1(receiver, a0);
};
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
}, function() {
  return $.globalThis;
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
}, function() {
  return $.globalWindow;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
}, function() {
  return $.globalWorker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.boolTypeCheck($.get$globalThis().postMessage !== (void 0));
}, function() {
  return $.globalPostMessageDefined;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.stringTypeCheck($.IsolateNatives_computeThisScript());
}, function() {
  return $.IsolateNatives_thisScript;
});
Isolate.$lazy($, "quoteRegExp", "quoteRegExp", "get$quoteRegExp", function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
}, function() {
  return $.quoteRegExp;
});
Isolate.$lazy($, "header", "header", "get$header", function() {
  return $.callTypeCheck($.query("#header"), "$isDivElement");
}, function() {
  return $.header;
});
Isolate.$lazy($, "nameDiv", "nameDiv", "get$nameDiv", function() {
  return $.callTypeCheck($.DivElement_DivElement(), "$isDivElement");
}, function() {
  return $.nameDiv;
});
Isolate.$lazy($, "mugshot", "mugshot", "get$mugshot", function() {
  return $.callTypeCheck($.DivElement_DivElement(), "$isDivElement");
}, function() {
  return $.mugshot;
});
Isolate.$lazy($, "app", "app", "get$app", function() {
  return $.callTypeCheck($.query("#app"), "$isDivElement");
}, function() {
  return $.app;
});
Isolate.$lazy($, "toolbar", "toolbar", "get$toolbar", function() {
  return $.callTypeCheck($.query("#toolbar"), "$isDivElement");
}, function() {
  return $.toolbar;
});
Isolate.$lazy($, "open", "open", "get$open", function() {
  return $.callTypeCheck($.ButtonElement_ButtonElement(), "$isButtonElement");
}, function() {
  return $.open;
});
Isolate.$lazy($, "update", "update", "get$update", function() {
  return $.callTypeCheck($.ButtonElement_ButtonElement(), "$isButtonElement");
}, function() {
  return $.update;
});
Isolate.$lazy($, "_proxiedObjectTable", "_proxiedObjectTable", "get$_proxiedObjectTable", function() {
  return $._ProxiedObjectTable$();
}, function() {
  return $._proxiedObjectTable;
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $is_ManagerStub: function() {
    return false;
  },
  $is_WorkerStub: function() {
    return false;
  },
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $isCollection: function() {
    return false;
  },
  $isIterable: function() {
    return false;
  },
  $isList: function() {
    return false;
  },
  $isMap: function() {
    return false;
  },
  $isApplicationCache: function() {
    return false;
  },
  $isArrayBuffer: function() {
    return false;
  },
  $isArrayBufferView: function() {
    return false;
  },
  $isBarInfo: function() {
    return false;
  },
  $isBatteryManager: function() {
    return false;
  },
  $isBlob: function() {
    return false;
  },
  $isBodyElement: function() {
    return false;
  },
  $isButtonElement: function() {
    return false;
  },
  $isCanvasElement: function() {
    return false;
  },
  $isClientRect: function() {
    return false;
  },
  $isClipboard: function() {
    return false;
  },
  $isCoordinates: function() {
    return false;
  },
  $isCrypto: function() {
    return false;
  },
  $isCssPrimitiveValue: function() {
    return false;
  },
  $isCssRule: function() {
    return false;
  },
  $isCssStyleDeclaration: function() {
    return false;
  },
  $isCssStyleSheet: function() {
    return false;
  },
  $isCssValue: function() {
    return false;
  },
  $isCustomEvent: function() {
    return false;
  },
  $isDataTransferItemList: function() {
    return false;
  },
  $isDirectoryEntry: function() {
    return false;
  },
  $isDirectoryEntrySync: function() {
    return false;
  },
  $isDivElement: function() {
    return false;
  },
  $isDocument: function() {
    return false;
  },
  $isDomError: function() {
    return false;
  },
  $isDomImplementation: function() {
    return false;
  },
  $isDomMimeType: function() {
    return false;
  },
  $isDomMimeTypeArray: function() {
    return false;
  },
  $isDomPlugin: function() {
    return false;
  },
  $isDomPluginArray: function() {
    return false;
  },
  $isDomSettableTokenList: function() {
    return false;
  },
  $isElement: function() {
    return false;
  },
  $isEntry: function() {
    return false;
  },
  $isEntrySync: function() {
    return false;
  },
  $isEvent: function() {
    return false;
  },
  $isEventTarget: function() {
    return false;
  },
  $isFile: function() {
    return false;
  },
  $isFileError: function() {
    return false;
  },
  $isFileList: function() {
    return false;
  },
  $isFileSystem: function() {
    return false;
  },
  $isFileSystemSync: function() {
    return false;
  },
  $isFloat32Array: function() {
    return false;
  },
  $isFormElement: function() {
    return false;
  },
  $isGamepad: function() {
    return false;
  },
  $isGeolocation: function() {
    return false;
  },
  $isHeadElement: function() {
    return false;
  },
  $isHistory: function() {
    return false;
  },
  $isHtmlCollection: function() {
    return false;
  },
  $isHtmlDocument: function() {
    return false;
  },
  $isHttpRequest: function() {
    return false;
  },
  $isHttpRequestUpload: function() {
    return false;
  },
  $isImageData: function() {
    return false;
  },
  $isImageElement: function() {
    return false;
  },
  $isJavaScriptCallFrame: function() {
    return false;
  },
  $isMediaController: function() {
    return false;
  },
  $isMediaElement: function() {
    return false;
  },
  $isMediaError: function() {
    return false;
  },
  $isMediaKeyError: function() {
    return false;
  },
  $isMediaList: function() {
    return false;
  },
  $isMediaStream: function() {
    return false;
  },
  $isMediaStreamTrack: function() {
    return false;
  },
  $isMemoryInfo: function() {
    return false;
  },
  $isMessagePort: function() {
    return false;
  },
  $isNamedNodeMap: function() {
    return false;
  },
  $isNavigator: function() {
    return false;
  },
  $isNode: function() {
    return false;
  },
  $isNodeFilter: function() {
    return false;
  },
  $isNotificationCenter: function() {
    return false;
  },
  $isPagePopupController: function() {
    return false;
  },
  $isPerformance: function() {
    return false;
  },
  $isPerformanceNavigation: function() {
    return false;
  },
  $isPerformanceTiming: function() {
    return false;
  },
  $isRgbColor: function() {
    return false;
  },
  $isRtcDataChannel: function() {
    return false;
  },
  $isRtcIceCandidate: function() {
    return false;
  },
  $isRtcSessionDescription: function() {
    return false;
  },
  $isRtcStatsElement: function() {
    return false;
  },
  $isScreen: function() {
    return false;
  },
  $isScriptProfileNode: function() {
    return false;
  },
  $isShadowRoot: function() {
    return false;
  },
  $isSourceBuffer: function() {
    return false;
  },
  $isSourceBufferList: function() {
    return false;
  },
  $isSpeechGrammar: function() {
    return false;
  },
  $isSpeechGrammarList: function() {
    return false;
  },
  $isSpeechInputResult: function() {
    return false;
  },
  $isSpeechRecognitionResult: function() {
    return false;
  },
  $isSqlResultSetRowList: function() {
    return false;
  },
  $isStorage: function() {
    return false;
  },
  $isStorageInfo: function() {
    return false;
  },
  $isStyleMedia: function() {
    return false;
  },
  $isStyleSheet: function() {
    return false;
  },
  $isTableCaptionElement: function() {
    return false;
  },
  $isTableSectionElement: function() {
    return false;
  },
  $isTextTrack: function() {
    return false;
  },
  $isTextTrackCue: function() {
    return false;
  },
  $isTextTrackCueList: function() {
    return false;
  },
  $isTextTrackList: function() {
    return false;
  },
  $isTimeRanges: function() {
    return false;
  },
  $isTouch: function() {
    return false;
  },
  $isTouchList: function() {
    return false;
  },
  $isUint8Array: function() {
    return false;
  },
  $isValidityState: function() {
    return false;
  },
  $isWindow: function() {
    return false;
  },
  $isWorkerContext: function() {
    return false;
  },
  $isWorkerLocation: function() {
    return false;
  },
  $isWorkerNavigator: function() {
    return false;
  },
  $isWindowBase: function() {
    return false;
  },
  $isDatabase: function() {
    return false;
  },
  $isKeyRange: function() {
    return false;
  },
  $isObjectStore: function() {
    return false;
  },
  $isRequest: function() {
    return false;
  },
  $isTransaction: function() {
    return false;
  },
  $isAngle: function() {
    return false;
  },
  $isAnimatedAngle: function() {
    return false;
  },
  $isAnimatedBoolean: function() {
    return false;
  },
  $isAnimatedEnumeration: function() {
    return false;
  },
  $isAnimatedInteger: function() {
    return false;
  },
  $isAnimatedLength: function() {
    return false;
  },
  $isAnimatedLengthList: function() {
    return false;
  },
  $isAnimatedNumber: function() {
    return false;
  },
  $isAnimatedNumberList: function() {
    return false;
  },
  $isAnimatedPreserveAspectRatio: function() {
    return false;
  },
  $isAnimatedRect: function() {
    return false;
  },
  $isAnimatedString: function() {
    return false;
  },
  $isAnimatedTransformList: function() {
    return false;
  },
  $isElementInstance: function() {
    return false;
  },
  $isLength: function() {
    return false;
  },
  $isLengthList: function() {
    return false;
  },
  $isMatrix: function() {
    return false;
  },
  $isNumber: function() {
    return false;
  },
  $isNumberList: function() {
    return false;
  },
  $isPathSeg: function() {
    return false;
  },
  $isPathSegList: function() {
    return false;
  },
  $isPoint: function() {
    return false;
  },
  $isPointList: function() {
    return false;
  },
  $isPreserveAspectRatio: function() {
    return false;
  },
  $isRect: function() {
    return false;
  },
  $isStringList: function() {
    return false;
  },
  $isSvgElement: function() {
    return false;
  },
  $isSvgSvgElement: function() {
    return false;
  },
  $isTransform: function() {
    return false;
  },
  $isTransformList: function() {
    return false;
  },
  $isUseElement: function() {
    return false;
  },
  $isViewSpec: function() {
    return false;
  },
  $isAudioBuffer: function() {
    return false;
  },
  $isAudioContext: function() {
    return false;
  },
  $isAudioDestinationNode: function() {
    return false;
  },
  $isAudioGain: function() {
    return false;
  },
  $isAudioListener: function() {
    return false;
  },
  $isAudioParam: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  },
  $is_WorkerStub: function() {
    return true;
  },
  $is_ManagerStub: function() {
    return true;
  }
});

$.$defineNativeClass("AbstractWorker", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLAnchorElement", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  },
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("DOMApplicationCache", {
  get$status: function() {
    return this.status;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isApplicationCache: function() {
    return true;
  }
});

$.$defineNativeClass("ArrayBuffer", {
  $isArrayBuffer: function() {
    return true;
  }
});

$.$defineNativeClass("ArrayBufferView", {
  $isArrayBufferView: function() {
    return true;
  }
});

$.$defineNativeClass("BarInfo", {
  $isBarInfo: function() {
    return true;
  }
});

$.$defineNativeClass("BatteryManager", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isBatteryManager: function() {
    return true;
  }
});

$.$defineNativeClass("Blob", {
  $isBlob: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$onLoad: function() {
    return $.propertyTypeCheck($.CONSTANT5.forTarget$1(this), "$isStream");
  },
  $isBodyElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLButtonElement", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  },
  set$value: function(v) {
    this.value = $.stringTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  },
  $isButtonElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLCanvasElement", {
  set$height: function(v) {
    this.height = $.intTypeCheck(v);
  },
  set$width: function(v) {
    this.width = $.intTypeCheck(v);
  },
  $isCanvasElement: function() {
    return true;
  }
});

$.$defineNativeClass("CharacterData", {
  get$length: function() {
    return this.length;
  },
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("ClientRect", {
  $isClientRect: function() {
    return true;
  }
});

$.$defineNativeClass("Clipboard", {
  $isClipboard: function() {
    return true;
  }
});

$.$defineNativeClass("Coordinates", {
  $isCoordinates: function() {
    return true;
  }
});

$.$defineNativeClass("Crypto", {
  $isCrypto: function() {
    return true;
  }
});

$.$defineNativeClass("CSSFontFaceRule", {
  get$style: function() {
    return this.style;
  }
});

$.$defineNativeClass("WebKitCSSKeyframeRule", {
  get$style: function() {
    return this.style;
  }
});

$.$defineNativeClass("WebKitCSSMatrix", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("CSSPageRule", {
  get$style: function() {
    return this.style;
  }
});

$.$defineNativeClass("CSSPrimitiveValue", {
  $isCssPrimitiveValue: function() {
    return true;
  }
});

$.$defineNativeClass("CSSRule", {
  $isCssRule: function() {
    return true;
  }
});

$.$defineNativeClass("CSSStyleDeclaration", {
  get$length: function() {
    return this.length;
  },
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return $.stringTypeCheck(!(propValue == null) ? propValue : "");
  },
  setProperty$3: function(propertyName, value, priority) {
    $.stringTypeCheck(propertyName);
    $.stringTypeCheck(value);
    this.setProperty(propertyName, value, $.stringTypeCheck(priority));
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  get$clear: function() {
    return $.stringTypeCheck(this.getPropertyValue$1("clear"));
  },
  clear$0: function() {
    return this.get$clear().call$0();
  },
  set$display: function(value) {
    this.setProperty$3("display", $.stringTypeCheck(value), "");
  },
  set$$float: function(value) {
    this.setProperty$3("float", $.stringTypeCheck(value), "");
  },
  set$height: function(value) {
    this.setProperty$3("height", $.stringTypeCheck(value), "");
  },
  set$marginLeft: function(value) {
    this.setProperty$3("margin-left", $.stringTypeCheck(value), "");
  },
  set$marginRight: function(value) {
    this.setProperty$3("margin-right", $.stringTypeCheck(value), "");
  },
  set$src: function(value) {
    this.setProperty$3("src", $.stringTypeCheck(value), "");
  },
  set$width: function(value) {
    this.setProperty$3("width", $.stringTypeCheck(value), "");
  },
  $isCssStyleDeclaration: function() {
    return true;
  }
});

$.$defineNativeClass("CSSStyleRule", {
  get$style: function() {
    return this.style;
  }
});

$.$defineNativeClass("CSSStyleSheet", {
  $isCssStyleSheet: function() {
    return true;
  }
});

$.$defineNativeClass("CSSValue", {
  $isCssValue: function() {
    return true;
  }
});

$.$defineNativeClass("CustomEvent", {
  get$detail: function() {
    return this.detail;
  },
  $$dom_initCustomEvent$4: function(typeArg, canBubbleArg, cancelableArg, detailArg) {
    return this.initCustomEvent(typeArg,canBubbleArg,cancelableArg,detailArg);
  },
  $isCustomEvent: function() {
    return true;
  }
});

$.$defineNativeClass("DataTransferItemList", {
  get$length: function() {
    return this.length;
  },
  add$2: function(data_OR_file, type) {
    return this.add(data_OR_file,$.stringTypeCheck(type));
  },
  add$1: function(data_OR_file) {
    return this.add(data_OR_file);
  },
  clear$0: function() {
    return this.clear();
  },
  $isDataTransferItemList: function() {
    return true;
  }
});

$.$defineNativeClass("DedicatedWorkerContext", {
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    messagePorts = $.listTypeCheck(t1 ? null : messagePorts);
    if (!t1) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  _postMessage_1$2: function(message, messagePorts) {
    return this.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(message) {
    return this.postMessage(message);
  }
});

$.$defineNativeClass("HTMLDetailsElement", {
  open$2: function(arg0, arg1) {
    return this.open.call$2(arg0, arg1);
  }
});

$.$defineNativeClass("DirectoryEntry", {
  $isDirectoryEntry: function() {
    return true;
  }
});

$.$defineNativeClass("DirectoryEntrySync", {
  $isDirectoryEntrySync: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLDivElement", {
  $isDivElement: function() {
    return true;
  }
});

$.$defineNativeClass("Document", {
  get$$$dom_body: function() {
    return this.body;
  },
  get$documentElement: function() {
    return this.documentElement;
  },
  $$dom_createElement$1: function(tagName) {
    return this.createElement(tagName);
  },
  $$dom_createEvent$1: function(eventType) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_createEvent$1")) {
      return this.createEvent(eventType);
    } else
      return Object.prototype.$$dom_createEvent$1.call(this, eventType);
  },
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById($.stringTypeCheck(elementId));
  },
  $$dom_getElementsByName$1: function(elementName) {
    return this.getElementsByName($.stringTypeCheck(elementName));
  },
  $$dom_getElementsByTagName$1: function(tagname) {
    return this.getElementsByTagName(tagname);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(selectors) {
    return this.querySelectorAll(selectors);
  },
  get$onClick: function() {
    return $.propertyTypeCheck($.CONSTANT6.forTarget$1(this), "$isStream");
  },
  get$onLoad: function() {
    return $.propertyTypeCheck($.CONSTANT5.forTarget$1(this), "$isStream");
  },
  query$1: function(selectors) {
    if ($.boolConversionCheck($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors)))
      return $.callTypeCheck(this.$$dom_getElementById$1($.CONSTANT2.substring$1(selectors, 1)), "$isElement");
    return $.callTypeCheck(this.$$dom_querySelector$1(selectors), "$isElement");
  },
  queryAll$1: function(selectors) {
    var mutableMatches, t1, len, copyOfMatches, i, t2;
    if ($.boolConversionCheck($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors))) {
      mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT2.substring$2(selectors, 7, selectors.length - 2));
      t1 = $.getInterceptor$JSStringJSArray(mutableMatches);
      len = t1.get$length(mutableMatches);
      $.intTypeCheck(len);
      if (len !== (len | 0))
        return this.queryAll$1$bailout(1, mutableMatches, t1, len);
      copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
      $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
      for (i = 0; i < len; ++i) {
        t2 = t1.$index(mutableMatches, i);
        if (i >= len)
          throw $.ioore(i);
        copyOfMatches[i] = t2;
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else if ($.boolConversionCheck($.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors))) {
      mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
      t1 = $.getInterceptor$JSStringJSArray(mutableMatches);
      len = t1.get$length(mutableMatches);
      $.intTypeCheck(len);
      if (len !== (len | 0))
        return this.queryAll$1$bailout(2, mutableMatches, t1, len);
      copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
      $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
      for (i = 0; i < len; ++i) {
        t2 = t1.$index(mutableMatches, i);
        if (i >= len)
          throw $.ioore(i);
        copyOfMatches[i] = t2;
      }
      return $._FrozenElementList$_wrap(copyOfMatches);
    } else
      return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
  },
  queryAll$1$bailout: function(state0, mutableMatches, t1, len) {
    switch (state0) {
      case 0:
      default:
        var copyOfMatches, i, t2;
        if (state0 === 1 || state0 === 0 && $.boolConversionCheck($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", true, false).hasMatch$1(selectors)))
          switch (state0) {
            case 0:
              mutableMatches = this.$$dom_getElementsByName$1($.CONSTANT2.substring$2(selectors, 7, selectors.length - 2));
              t1 = $.getInterceptor$JSStringJSArray(mutableMatches);
              len = t1.get$length(mutableMatches);
              $.intTypeCheck(len);
            case 1:
              state0 = 0;
              copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
              $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
              for (i = 0; $.$$lt(i, len); ++i) {
                t2 = t1.$index(mutableMatches, i);
                if (i !== (i | 0))
                  throw $.iae(i);
                if (i < 0 || i >= copyOfMatches.length)
                  throw $.ioore(i);
                copyOfMatches[i] = t2;
              }
              return $._FrozenElementList$_wrap(copyOfMatches);
          }
        else
          switch (state0) {
            case 0:
            case 2:
              if (state0 === 2 || state0 === 0 && $.boolConversionCheck($.RegExp_RegExp("^[*a-zA-Z0-9]+$", true, false).hasMatch$1(selectors)))
                switch (state0) {
                  case 0:
                    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                    t1 = $.getInterceptor$JSStringJSArray(mutableMatches);
                    len = t1.get$length(mutableMatches);
                    $.intTypeCheck(len);
                  case 2:
                    state0 = 0;
                    copyOfMatches = $.List_List$fixedLength(len, null, $.Element);
                    $.setRuntimeTypeInfo(copyOfMatches, [$.Element]);
                    for (i = 0; $.$$lt(i, len); ++i) {
                      t2 = t1.$index(mutableMatches, i);
                      if (i !== (i | 0))
                        throw $.iae(i);
                      if (i < 0 || i >= copyOfMatches.length)
                        throw $.ioore(i);
                      copyOfMatches[i] = t2;
                    }
                    return $._FrozenElementList$_wrap(copyOfMatches);
                }
              else
                return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
          }
    }
  },
  $isDocument: function() {
    return true;
  }
});

$.$defineNativeClass("DocumentFragment", {
  get$children: function() {
    if (this._children == null)
      this._children = $.FilteredElementList$(this);
    return $.listTypeCheck(this._children);
  },
  set$innerHtml: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$innerHtml")) {
      var e, nodes;
      $.stringTypeCheck(value);
      $.clear(this.get$nodes());
      e = $.Element_Element$tag("div");
      e.set$innerHtml(value);
      nodes = $.List_List$from(e.get$nodes());
      $.setRuntimeTypeInfo(nodes, []);
      $.addAll(this.get$nodes(), nodes);
    } else
      return Object.prototype.set$innerHtml.call(this, value);
  }
});

$.$defineNativeClass("DOMError", {
  $isDomError: function() {
    return true;
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("DOMImplementation", {
  $isDomImplementation: function() {
    return true;
  }
});

$.$defineNativeClass("MimeType", {
  $isDomMimeType: function() {
    return true;
  }
});

$.$defineNativeClass("MimeTypeArray", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isDomMimeType");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isDomMimeType");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.DomMimeType);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isDomMimeType"));
  },
  get$contains: function() {
    return new $.BoundClosure13(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.DomMimeType);
    $.setRuntimeTypeInfo(t1, [$.DomMimeType]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.DomMimeType), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isDomMimeType");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isDomMimeType");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isDomMimeType"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isDomMimeType");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isDomMimeTypeArray: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Plugin", {
  get$length: function() {
    return this.length;
  },
  $isDomPlugin: function() {
    return true;
  }
});

$.$defineNativeClass("PluginArray", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isDomPlugin");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isDomPlugin");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.DomPlugin);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isDomPlugin"));
  },
  get$contains: function() {
    return new $.BoundClosure14(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.DomPlugin);
    $.setRuntimeTypeInfo(t1, [$.DomPlugin]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.DomPlugin), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isDomPlugin");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isDomPlugin");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isDomPlugin"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isDomPlugin");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isDomPluginArray: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Selection", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("DOMSettableTokenList", {
  set$value: function(v) {
    this.value = $.stringTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  },
  $isDomSettableTokenList: function() {
    return true;
  }
});

$.$defineNativeClass("DOMStringList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.stringTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.String);
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.String);
    $.setRuntimeTypeInfo(t1, [$.String]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.String), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.stringTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.stringTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.stringTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.stringTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  contains$1: function(string) {
    return this.contains($.stringTypeCheck(string));
  },
  get$contains: function() {
    return new $.BoundClosure15(this, "contains$1");
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("DOMTokenList", {
  get$length: function() {
    return this.length;
  },
  contains$1: function(token) {
    return this.contains($.stringTypeCheck(token));
  },
  get$contains: function() {
    return new $.BoundClosure16(this, "contains$1");
  },
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {
  get$$$dom_children: function() {
    return this.children;
  },
  get$id: function() {
    return this.id;
  },
  set$innerHtml: function(v) {
    this.innerHTML = $.stringTypeCheck(v);
  },
  get$$$dom_lastElementChild: function() {
    return this.lastElementChild;
  },
  get$style: function() {
    return this.style;
  },
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  get$children: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(this);
    } else
      return Object.prototype.get$children.call(this);
  },
  set$children: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$children")) {
      var copy, children, t1;
      copy = $.List_List$from($.listTypeCheck(value));
      $.setRuntimeTypeInfo(copy, []);
      children = this.get$children();
      t1 = $.getInterceptor$JSArray(children);
      t1.clear$0(children);
      t1.addAll$1(children, copy);
    } else
      return Object.prototype.set$children.call(this, value);
  },
  $$dom_getAttribute$1: function(name) {
    return this.getAttribute(name);
  },
  $$dom_hasAttribute$1: function(name) {
    return this.hasAttribute(name);
  },
  $$dom_removeAttribute$1: function(name) {
    return this.removeAttribute(name);
  },
  $$dom_setAttribute$2: function(name, value) {
    return this.setAttribute(name,value);
  },
  get$onClick: function() {
    return $.propertyTypeCheck($.CONSTANT6.forTarget$1(this), "$isStream");
  },
  get$onLoad: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onLoad")) {
      return $.propertyTypeCheck($.CONSTANT5.forTarget$1(this), "$isStream");
    } else
      return Object.prototype.get$onLoad.call(this);
  },
  $isElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {
  set$height: function(v) {
    this.height = $.stringTypeCheck(v);
  },
  set$src: function(v) {
    this.src = $.stringTypeCheck(v);
  },
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  },
  set$width: function(v) {
    this.width = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("Entry", {
  remove$2: function(successCallback, errorCallback) {
    $.propertyTypeCheck(successCallback, "$isVoidCallback");
    $.propertyTypeCheck(errorCallback, "$isErrorCallback");
    return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
  },
  remove$1: function(successCallback) {
    successCallback = $.convertDartClosureToJS(successCallback, 0);
    return this.remove(successCallback);
  },
  $isEntry: function() {
    return true;
  }
});

$.$defineNativeClass("EntrySync", {
  remove$0: function() {
    return this.remove();
  },
  $isEntrySync: function() {
    return true;
  }
});

$.$defineNativeClass("Event", {
  $isEvent: function() {
    return true;
  }
});

$.$defineNativeClass("EventException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("EventSource", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("EventTarget", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.Events$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      $.stringTypeCheck(type);
      $.propertyTypeCheck(listener, "$isEventListener");
      $.boolTypeCheck(useCapture);
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      $.stringTypeCheck(type);
      $.propertyTypeCheck(listener, "$isEventListener");
      $.boolTypeCheck(useCapture);
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  },
  $isEventTarget: function() {
    return true;
  }
});

$.$defineNativeClass("File", {
  $isFile: function() {
    return true;
  }
});

$.$defineNativeClass("FileError", {
  $isFileError: function() {
    return true;
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("FileList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isFile");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isFile");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.File);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isFile"));
  },
  get$contains: function() {
    return new $.BoundClosure19(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.File);
    $.setRuntimeTypeInfo(t1, [$.File]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.File), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isFile");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isFile");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isFile"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isFile");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isFileList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("FileReader", {
  get$error: function() {
    return this.error;
  },
  get$result: function() {
    return this.result;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onLoad: function() {
    return $.propertyTypeCheck($.CONSTANT5.forTarget$1(this), "$isStream");
  }
});

$.$defineNativeClass("DOMFileSystem", {
  $isFileSystem: function() {
    return true;
  }
});

$.$defineNativeClass("DOMFileSystemSync", {
  $isFileSystemSync: function() {
    return true;
  }
});

$.$defineNativeClass("FileWriter", {
  get$error: function() {
    return this.error;
  },
  get$length: function() {
    return this.length;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("FileWriterSync", {
  get$length: function() {
    return this.length;
  }
});

$.$defineNativeClass("Float32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    this[$.intTypeCheck(index)] = $.numTypeCheck(value);
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.num);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.numTypeCheck(element));
  },
  get$contains: function() {
    return new $.BoundClosure20(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.num);
    $.setRuntimeTypeInfo(t1, [$.num]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.num), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.numTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.numTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.numTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.numTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isFloat32Array: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    this[$.intTypeCheck(index)] = $.numTypeCheck(value);
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.num);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.numTypeCheck(element));
  },
  get$contains: function() {
    return new $.BoundClosure21(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.num);
    $.setRuntimeTypeInfo(t1, [$.num]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.num), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.numTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.numTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.numTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.numTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLFormElement", {
  get$length: function() {
    return this.length;
  },
  reset$0: function() {
    return this.reset();
  },
  $isFormElement: function() {
    return true;
  }
});

$.$defineNativeClass("Gamepad", {
  get$id: function() {
    return this.id;
  },
  $isGamepad: function() {
    return true;
  }
});

$.$defineNativeClass("Geolocation", {
  $isGeolocation: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLHeadElement", {
  $isHeadElement: function() {
    return true;
  }
});

$.$defineNativeClass("History", {
  get$length: function() {
    return this.length;
  },
  $isHistory: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLAllCollection", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isNode");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Node);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isNode"));
  },
  get$contains: function() {
    return new $.BoundClosure22(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Node), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isNode"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isNode");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isNode");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Node);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isNode"));
  },
  get$contains: function() {
    return new $.BoundClosure23(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Node), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isNode"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isNode");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isHtmlCollection: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function() {
    return $.callTypeCheck($.document().get$$$dom_body(), "$isBodyElement");
  },
  $isHtmlDocument: function() {
    return true;
  }
});

$.$defineNativeClass("XMLHttpRequest", {
  get$responseText: function() {
    return this.responseText;
  },
  get$status: function() {
    return this.status;
  },
  get$statusText: function() {
    return this.statusText;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  open$5: function(method, url, async, user, password) {
    return this.open($.stringTypeCheck(method),$.stringTypeCheck(url),$.boolTypeCheck(async),$.stringTypeCheck(user),$.stringTypeCheck(password));
  },
  open$2: function(method, url) {
    return this.open(method, url);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  },
  send$0: function() {
    return this.send();
  },
  setRequestHeader$2: function(header, value) {
    return this.setRequestHeader(header,value);
  },
  get$onLoad: function() {
    return $.propertyTypeCheck($.CONSTANT5.forTarget$1(this), "$isStream");
  },
  $isHttpRequest: function() {
    return true;
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("XMLHttpRequestUpload", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onLoad: function() {
    return $.propertyTypeCheck($.CONSTANT5.forTarget$1(this), "$isStream");
  },
  $isHttpRequestUpload: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLIFrameElement", {
  set$height: function(v) {
    this.height = $.stringTypeCheck(v);
  },
  set$src: function(v) {
    this.src = $.stringTypeCheck(v);
  },
  set$width: function(v) {
    this.width = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("ImageData", {
  $isImageData: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLImageElement", {
  set$height: function(v) {
    this.height = $.intTypeCheck(v);
  },
  set$src: function(v) {
    this.src = $.stringTypeCheck(v);
  },
  set$width: function(v) {
    this.width = $.intTypeCheck(v);
  },
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  },
  $isImageElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLInputElement", {
  set$height: function(v) {
    this.height = $.intTypeCheck(v);
  },
  set$src: function(v) {
    this.src = $.stringTypeCheck(v);
  },
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  },
  set$value: function(v) {
    this.value = $.stringTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  },
  set$width: function(v) {
    this.width = $.intTypeCheck(v);
  },
  $isElement: function() {
    return true;
  },
  $isNode: function() {
    return true;
  },
  $isEventTarget: function() {
    return true;
  }
});

$.$defineNativeClass("Int16Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    this[$.intTypeCheck(index)] = $.intTypeCheck(value);
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.$int);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.intTypeCheck(element));
  },
  get$contains: function() {
    return new $.BoundClosure24(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.$int), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.intTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    this[$.intTypeCheck(index)] = $.intTypeCheck(value);
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.$int);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.intTypeCheck(element));
  },
  get$contains: function() {
    return new $.BoundClosure25(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.$int), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.intTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    this[$.intTypeCheck(index)] = $.intTypeCheck(value);
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.$int);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.intTypeCheck(element));
  },
  get$contains: function() {
    return new $.BoundClosure26(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.$int), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.intTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("JavaScriptCallFrame", {
  $isJavaScriptCallFrame: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLLIElement", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  },
  set$value: function(v) {
    this.value = $.intTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("HTMLLinkElement", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("LocalMediaStream", {
  $isEventTarget: function() {
    return true;
  }
});

$.$defineNativeClass("Location", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("MediaController", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isMediaController: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLMediaElement", {
  get$error: function() {
    return this.error;
  },
  set$src: function(v) {
    this.src = $.stringTypeCheck(v);
  },
  $isMediaElement: function() {
    return true;
  }
});

$.$defineNativeClass("MediaError", {
  $isMediaError: function() {
    return true;
  }
});

$.$defineNativeClass("MediaKeyError", {
  $isMediaKeyError: function() {
    return true;
  }
});

$.$defineNativeClass("MediaList", {
  get$length: function() {
    return this.length;
  },
  $isMediaList: function() {
    return true;
  }
});

$.$defineNativeClass("MediaSource", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStream", {
  get$id: function() {
    return this.id;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isMediaStream: function() {
    return true;
  }
});

$.$defineNativeClass("MediaStreamTrack", {
  get$id: function() {
    return this.id;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isMediaStreamTrack: function() {
    return true;
  }
});

$.$defineNativeClass("MemoryInfo", {
  $isMemoryInfo: function() {
    return true;
  }
});

$.$defineNativeClass("MessageEvent", {
  get$ports: function() {
    return this.ports;
  },
  get$source: function() {
    return $.callTypeCheck($._convertNativeToDart_Window(this.source), "$isWindowBase");
  }
});

$.$defineNativeClass("MessagePort", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    messagePorts = $.listTypeCheck(t1 ? null : messagePorts);
    if (!t1) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  _postMessage_1$2: function(message, messagePorts) {
    return this.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(message) {
    return this.postMessage(message);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isMessagePort: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLMeterElement", {
  set$value: function(v) {
    this.value = $.numTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isNode");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Node);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isNode"));
  },
  get$contains: function() {
    return new $.BoundClosure27(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Node), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isNode"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isNode");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isNamedNodeMap: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Navigator", {
  $isNavigator: function() {
    return true;
  }
});

$.$defineNativeClass("Node", {
  get$$$dom_attributes: function() {
    return this.attributes;
  },
  get$$$dom_childNodes: function() {
    return this.childNodes;
  },
  get$$$dom_localName: function() {
    return this.localName;
  },
  get$$$dom_namespaceUri: function() {
    return this.namespaceURI;
  },
  get$parent: function() {
    return this.parentElement;
  },
  set$text: function(v) {
    this.textContent = $.stringTypeCheck(v);
  },
  get$nodes: function() {
    return $._ChildNodeListLazy$(this);
  },
  remove$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$0")) {
      var t1 = this.parentNode;
      if (!(t1 == null))
        $.callTypeCheck(t1, "$isNode").$$dom_removeChild$1(this);
    } else
      return Object.prototype.remove$0.call(this);
  },
  replaceWith$1: function(otherNode) {
    var parent, exception;
    try {
      parent = $.callTypeCheck(this.parentNode, "$isNode");
      parent.$$dom_replaceChild$2(otherNode, this);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return this;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this.appendChild($.callTypeCheck(newChild, "$isNode"));
  },
  contains$1: function(other) {
    return this.contains($.callTypeCheck(other, "$isNode"));
  },
  get$contains: function() {
    return new $.BoundClosure29(this, "contains$1");
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild($.callTypeCheck(oldChild, "$isNode"));
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this.replaceChild($.callTypeCheck(newChild, "$isNode"),$.callTypeCheck(oldChild, "$isNode"));
  },
  $isNode: function() {
    return true;
  }
});

$.$defineNativeClass("NodeFilter", {
  $isNodeFilter: function() {
    return true;
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isNode");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Node);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isNode"));
  },
  get$contains: function() {
    return new $.BoundClosure30(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Node);
    $.setRuntimeTypeInfo(t1, [$.Node]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Node), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isNode");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isNode"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isNode");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Notification", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  cancel$0: function() {
    return this.cancel();
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onClick: function() {
    return $.propertyTypeCheck($.CONSTANT6.forTarget$1(this), "$isStream");
  }
});

$.$defineNativeClass("NotificationCenter", {
  $isNotificationCenter: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLOListElement", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("HTMLObjectElement", {
  set$height: function(v) {
    this.height = $.stringTypeCheck(v);
  },
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  },
  set$width: function(v) {
    this.width = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("HTMLOptionElement", {
  set$value: function(v) {
    this.value = $.stringTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("HTMLOutputElement", {
  set$value: function(v) {
    this.value = $.stringTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("PagePopupController", {
  $isPagePopupController: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLParamElement", {
  set$value: function(v) {
    this.value = $.stringTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("Performance", {
  $isPerformance: function() {
    return true;
  }
});

$.$defineNativeClass("PerformanceNavigation", {
  $isPerformanceNavigation: function() {
    return true;
  }
});

$.$defineNativeClass("PerformanceTiming", {
  $isPerformanceTiming: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLProgressElement", {
  set$value: function(v) {
    this.value = $.numTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("RadioNodeList", {
  set$value: function(v) {
    this.value = $.stringTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("Range", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("RangeException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("RGBColor", {
  $isRgbColor: function() {
    return true;
  }
});

$.$defineNativeClass("RTCDataChannel", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  },
  $isRtcDataChannel: function() {
    return true;
  }
});

$.$defineNativeClass("RTCIceCandidate", {
  $isRtcIceCandidate: function() {
    return true;
  }
});

$.$defineNativeClass("RTCPeerConnection", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("RTCSessionDescription", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  },
  $isRtcSessionDescription: function() {
    return true;
  }
});

$.$defineNativeClass("RTCStatsElement", {
  $isRtcStatsElement: function() {
    return true;
  }
});

$.$defineNativeClass("RTCStatsResponse", {
  result$0: function() {
    return this.result();
  },
  get$result: function() {
    return new $.BoundClosure31(this, "result$0");
  }
});

$.$defineNativeClass("Screen", {
  $isScreen: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLScriptElement", {
  set$src: function(v) {
    this.src = $.stringTypeCheck(v);
  },
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("ScriptProfileNode", {
  children$0: function() {
    return this.children();
  },
  get$children: function() {
    return new $.BoundClosure31(this, "children$0");
  },
  $isScriptProfileNode: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLSelectElement", {
  set$length: function(v) {
    this.length = $.intTypeCheck(v);
  },
  get$length: function() {
    return this.length;
  },
  set$value: function(v) {
    this.value = $.stringTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("ShadowRoot", {
  set$innerHtml: function(v) {
    this.innerHTML = $.stringTypeCheck(v);
  },
  $isShadowRoot: function() {
    return true;
  }
});

$.$defineNativeClass("SourceBuffer", {
  $isSourceBuffer: function() {
    return true;
  }
});

$.$defineNativeClass("SourceBufferList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isSourceBuffer");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isSourceBuffer");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.SourceBuffer);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isSourceBuffer"));
  },
  get$contains: function() {
    return new $.BoundClosure32(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.SourceBuffer);
    $.setRuntimeTypeInfo(t1, [$.SourceBuffer]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.SourceBuffer), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isSourceBuffer");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isSourceBuffer");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isSourceBuffer"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isSourceBuffer");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isSourceBufferList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLSourceElement", {
  set$src: function(v) {
    this.src = $.stringTypeCheck(v);
  },
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("SpeechGrammar", {
  set$src: function(v) {
    this.src = $.stringTypeCheck(v);
  },
  $isSpeechGrammar: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechGrammarList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isSpeechGrammar");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isSpeechGrammar");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.SpeechGrammar);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isSpeechGrammar"));
  },
  get$contains: function() {
    return new $.BoundClosure33(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.SpeechGrammar);
    $.setRuntimeTypeInfo(t1, [$.SpeechGrammar]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.SpeechGrammar), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isSpeechGrammar");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isSpeechGrammar");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isSpeechGrammar"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isSpeechGrammar");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isSpeechGrammarList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechInputResult", {
  $isSpeechInputResult: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechRecognition", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("SpeechRecognitionError", {
  get$error: function() {
    return this.error;
  }
});

$.$defineNativeClass("SpeechRecognitionEvent", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SpeechRecognitionResult", {
  get$length: function() {
    return this.length;
  },
  $isSpeechRecognitionResult: function() {
    return true;
  }
});

$.$defineNativeClass("SQLResultSetRowList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isMap");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isMap");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Map);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isMap"));
  },
  get$contains: function() {
    return new $.BoundClosure34(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Map);
    $.setRuntimeTypeInfo(t1, [$.Map]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Map), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isMap");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isMap");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isMap"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isMap");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isSqlResultSetRowList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1($.stringTypeCheck(key)) == null);
  },
  $index: function(key) {
    return $.stringTypeCheck(this.$$dom_getItem$1($.stringTypeCheck(key)));
  },
  $indexSet: function(key, value) {
    this.$$dom_setItem$2($.stringTypeCheck(key), $.stringTypeCheck(value));
  },
  remove$1: function(key) {
    var value;
    $.stringTypeCheck(key);
    value = this.$index(key);
    this.$$dom_removeItem$1(key);
    return $.stringTypeCheck(value);
  },
  clear$0: function() {
    return $.voidTypeCheck(this.$$dom_clear$0());
  },
  forEach$1: function(f) {
    var i, key;
    $.functionTypeCheck(f);
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.$index(key));
    }
  },
  get$keys: function() {
    var keys = [];
    this.forEach$1(new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function() {
    var values = [];
    this.forEach$1(new $.Storage_values_anon(values));
    return values;
  },
  get$length: function() {
    return $.intTypeCheck(this.length);
  },
  get$isEmpty: function() {
    return this.$$dom_key$1(0) == null;
  },
  $$dom_clear$0: function() {
    return this.clear();
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_removeItem$1: function(key) {
    return this.removeItem(key);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  $isStorage: function() {
    return true;
  },
  $isMap: function() {
    return true;
  }
});

$.$defineNativeClass("StorageInfo", {
  $isStorageInfo: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLStyleElement", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("StyleMedia", {
  $isStyleMedia: function() {
    return true;
  }
});

$.$defineNativeClass("StyleSheet", {
  $isStyleSheet: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTableCaptionElement", {
  $isTableCaptionElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTableSectionElement", {
  $isTableSectionElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTextAreaElement", {
  set$value: function(v) {
    this.value = $.stringTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("TextTrack", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isTextTrack: function() {
    return true;
  }
});

$.$defineNativeClass("TextTrackCue", {
  get$id: function() {
    return this.id;
  },
  set$text: function(v) {
    this.text = $.stringTypeCheck(v);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isTextTrackCue: function() {
    return true;
  }
});

$.$defineNativeClass("TextTrackCueList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isTextTrackCue");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isTextTrackCue");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.TextTrackCue);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isTextTrackCue"));
  },
  get$contains: function() {
    return new $.BoundClosure35(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.TextTrackCue);
    $.setRuntimeTypeInfo(t1, [$.TextTrackCue]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.TextTrackCue), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isTextTrackCue");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isTextTrackCue");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isTextTrackCue"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isTextTrackCue");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isTextTrackCueList: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
});

$.$defineNativeClass("TextTrackList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isTextTrack");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isTextTrack");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.TextTrack);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isTextTrack"));
  },
  get$contains: function() {
    return new $.BoundClosure36(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.TextTrack);
    $.setRuntimeTypeInfo(t1, [$.TextTrack]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.TextTrack), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isTextTrack");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isTextTrack");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isTextTrack"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isTextTrack");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isTextTrackList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("TimeRanges", {
  get$length: function() {
    return this.length;
  },
  $isTimeRanges: function() {
    return true;
  }
});

$.$defineNativeClass("Touch", {
  $isTouch: function() {
    return true;
  }
});

$.$defineNativeClass("TouchList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isTouch");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isTouch");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Touch);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isTouch"));
  },
  get$contains: function() {
    return new $.BoundClosure37(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Touch);
    $.setRuntimeTypeInfo(t1, [$.Touch]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Touch), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isTouch");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isTouch");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isTouch"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isTouch");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isTouchList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTrackElement", {
  set$src: function(v) {
    this.src = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("WebKitTransitionEvent", {
  propertyName$0: function() {
    return this.propertyName.call$0();
  }
});

$.$defineNativeClass("UIEvent", {
  get$detail: function() {
    return this.detail;
  }
});

$.$defineNativeClass("Uint16Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    this[$.intTypeCheck(index)] = $.intTypeCheck(value);
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.$int);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.intTypeCheck(element));
  },
  get$contains: function() {
    return new $.BoundClosure38(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.$int), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.intTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    this[$.intTypeCheck(index)] = $.intTypeCheck(value);
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.$int);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.intTypeCheck(element));
  },
  get$contains: function() {
    return new $.BoundClosure39(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.$int), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.intTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  $index: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return this[$.intTypeCheck(index)];
    } else
      return Object.prototype.$index.call(this, index);
  },
  $indexSet: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      this[$.intTypeCheck(index)] = $.intTypeCheck(value);
    } else
      return Object.prototype.$indexSet.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this, $.$int);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  contains$1: function(element) {
    if (Object.getPrototypeOf(this).hasOwnProperty("contains$1")) {
      return $.IterableMixinWorkaround_contains(this, $.intTypeCheck(element));
    } else
      return Object.prototype.contains$1.call(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure40(this, "contains$1");
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      $.functionTypeCheck(f);
      for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  mappedBy$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("mappedBy$1")) {
      return $.MappedList$(this, $.functionTypeCheck(f));
    } else
      return Object.prototype.mappedBy$1.call(this, f);
  },
  where$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("where$1")) {
      return $.WhereIterable$(this, $.functionTypeCheck(f));
    } else
      return Object.prototype.where$1.call(this, f);
  },
  toList$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$0")) {
      var t1 = $.List_List$from(this, $.$int);
      $.setRuntimeTypeInfo(t1, [$.$int]);
      return t1;
    } else
      return Object.prototype.toList$0.call(this);
  },
  toSet$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toSet$0")) {
      return $.propertyTypeCheck($.Set_Set$from(this, $.$int), "$isSet");
    } else
      return Object.prototype.toSet$0.call(this);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.boolTypeCheck($.$$eq($.length(this), 0));
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      $.intTypeCheck(value);
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      $.intTypeCheck(value);
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  addAll$1: function(iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, iterable);
  },
  set$length: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$length")) {
      $.intTypeCheck(value);
      throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
    } else
      return Object.prototype.set$length.call(this, value);
  },
  clear$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this);
  },
  indexOf$2: function(element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.length(this));
    } else
      return Object.prototype.indexOf$2.call(this, element, start);
  },
  get$last: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$last")) {
      var t1 = $.getInterceptor$JSStringJSArray(this);
      if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
        return $.intTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
      throw $.$$throw($.StateError$("No elements"));
    } else
      return Object.prototype.get$last.call(this);
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  remove$1: function(object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, object);
  },
  removeAll$1: function(elements) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeAll$1.call(this, elements);
  },
  removeMatching$1: function(test) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeMatching$1")) {
      $.functionTypeCheck(test);
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeMatching$1.call(this, test);
  },
  removeRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeRange$2")) {
      $.intTypeCheck(start);
      $.intTypeCheck(rangeLength);
      throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
    } else
      return Object.prototype.removeRange$2.call(this, start, rangeLength);
  },
  getRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("getRange$2")) {
      return $.Lists_getRange(this, start, rangeLength, []);
    } else
      return Object.prototype.getRange$2.call(this, start, rangeLength);
  },
  $isUint8Array: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    this[$.intTypeCheck(index)] = $.intTypeCheck(value);
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.$int);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.intTypeCheck(element));
  },
  get$contains: function() {
    return new $.BoundClosure41(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.$int);
    $.setRuntimeTypeInfo(t1, [$.$int]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.$int), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.intTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.intTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("ValidityState", {
  $isValidityState: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLVideoElement", {
  set$height: function(v) {
    this.height = $.intTypeCheck(v);
  },
  set$width: function(v) {
    this.width = $.intTypeCheck(v);
  }
});

$.$defineNativeClass("WebKitNamedFlow", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("WebSocket", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$2: function(code, reason) {
    return this.close($.intTypeCheck(code),$.stringTypeCheck(reason));
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(data) {
    return this.send(data);
  }
});

$.$defineNativeClass("DOMWindow", {
  get$status: function() {
    return this.status;
  },
  get$document: function() {
    return $.callTypeCheck(this.document, "$isDocument");
  },
  open$3: function(url, name, options) {
    $.stringTypeCheck(url);
    $.stringTypeCheck(name);
    $.stringTypeCheck(options);
    if (options == null)
      return $.callTypeCheck($._DOMWindowCrossFrame__createSafe($.callTypeCheck(this.open(url,name), "$isWindowBase")), "$isWindowBase");
    else
      return $.callTypeCheck($._DOMWindowCrossFrame__createSafe($.callTypeCheck(this.open(url,name,options), "$isWindowBase")), "$isWindowBase");
  },
  open$2: function(url, name) {
    return this.open$3(url, name, null);
  },
  lookupPort$1: function(name) {
    var port = $.parse($.$$index(this.get$document().get$documentElement().get$attributes(), "dart-port:" + name), null);
    return $.propertyTypeCheck($._JsDeserializer$().deserialize$1(port), "$isSendPortSync");
  },
  registerPort$2: function(name, port) {
    var serialized = $._JsSerializer$().traverse$1(port);
    $.$$indexSet(this.get$document().get$documentElement().get$attributes(), "dart-port:" + name, $._JsonStringifier_stringify(serialized));
  },
  get$on: function() {
    return $.WindowEvents$(this);
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  btoa$1: function(string) {
    return this.btoa(string);
  },
  close$0: function() {
    return this.close();
  },
  dispatchEvent$1: function(evt) {
    return this.dispatchEvent($.callTypeCheck(evt, "$isEvent"));
  },
  _postMessage_1$2: function(message, targetOrigin) {
    return this.postMessage(message,targetOrigin);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onClick: function() {
    return $.propertyTypeCheck($.CONSTANT6.forTarget$1(this), "$isStream");
  },
  get$onLoad: function() {
    return $.propertyTypeCheck($.CONSTANT5.forTarget$1(this), "$isStream");
  },
  $isWindow: function() {
    return true;
  },
  $isWindowBase: function() {
    return true;
  }
});

$.$defineNativeClass("Worker", {
  postMessage$2: function(message, messagePorts) {
    var t1 = $ === messagePorts;
    messagePorts = $.listTypeCheck(t1 ? null : messagePorts);
    if (!t1) {
      this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function(message) {
    return this.postMessage$2(message, $);
  },
  _postMessage_1$2: function(message, messagePorts) {
    return this.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(message) {
    return this.postMessage(message);
  },
  terminate$0: function() {
    return this.terminate();
  }
});

$.$defineNativeClass("WorkerContext", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isWorkerContext: function() {
    return true;
  }
});

$.$defineNativeClass("WorkerLocation", {
  toString$0: function() {
    return this.toString();
  },
  $isWorkerLocation: function() {
    return true;
  }
});

$.$defineNativeClass("WorkerNavigator", {
  $isWorkerNavigator: function() {
    return true;
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("XSLTProcessor", {
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("ClientRectList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isClientRect");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isClientRect");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.ClientRect);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isClientRect"));
  },
  get$contains: function() {
    return new $.BoundClosure42(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.ClientRect);
    $.setRuntimeTypeInfo(t1, [$.ClientRect]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.ClientRect), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isClientRect");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isClientRect");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isClientRect"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isClientRect");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("CSSRuleList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isCssRule");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isCssRule");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.CssRule);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isCssRule"));
  },
  get$contains: function() {
    return new $.BoundClosure43(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.CssRule);
    $.setRuntimeTypeInfo(t1, [$.CssRule]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.CssRule), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isCssRule");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isCssRule");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isCssRule"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isCssRule");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("CSSValueList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isCssValue");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isCssValue");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.CssValue);
  },
  contains$1: function(element) {
    return $.boolTypeCheck($.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isCssValue")));
  },
  get$contains: function() {
    return new $.BoundClosure44(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.CssValue);
    $.setRuntimeTypeInfo(t1, [$.CssValue]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.CssValue), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isCssValue");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isCssValue");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.intTypeCheck($.Lists_indexOf(this, $.callTypeCheck(element, "$isCssValue"), $.intTypeCheck(start), $.length(this)));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isCssValue");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.listTypeCheck($.Lists_getRange(this, start, rangeLength, []));
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
});

$.$defineNativeClass("EntryArray", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isEntry");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isEntry");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Entry);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isEntry"));
  },
  get$contains: function() {
    return new $.BoundClosure45(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Entry);
    $.setRuntimeTypeInfo(t1, [$.Entry]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Entry), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isEntry");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isEntry");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isEntry"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isEntry");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("EntryArraySync", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isEntrySync");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isEntrySync");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.EntrySync);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isEntrySync"));
  },
  get$contains: function() {
    return new $.BoundClosure46(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.EntrySync);
    $.setRuntimeTypeInfo(t1, [$.EntrySync]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.EntrySync), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isEntrySync");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isEntrySync");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isEntrySync"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isEntrySync");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("GamepadList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isGamepad");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isGamepad");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Gamepad);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isGamepad"));
  },
  get$contains: function() {
    return new $.BoundClosure47(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Gamepad);
    $.setRuntimeTypeInfo(t1, [$.Gamepad]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Gamepad), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isGamepad");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isGamepad");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isGamepad"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isGamepad");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("MediaStreamList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isMediaStream");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isMediaStream");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.MediaStream);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isMediaStream"));
  },
  get$contains: function() {
    return new $.BoundClosure48(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.MediaStream);
    $.setRuntimeTypeInfo(t1, [$.MediaStream]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.MediaStream), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isMediaStream");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isMediaStream");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isMediaStream"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isMediaStream");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechInputResultList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isSpeechInputResult");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isSpeechInputResult");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.SpeechInputResult);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isSpeechInputResult"));
  },
  get$contains: function() {
    return new $.BoundClosure49(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.SpeechInputResult);
    $.setRuntimeTypeInfo(t1, [$.SpeechInputResult]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.SpeechInputResult), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isSpeechInputResult");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isSpeechInputResult");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isSpeechInputResult"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isSpeechInputResult");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SpeechRecognitionResultList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isSpeechRecognitionResult");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isSpeechRecognitionResult");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.SpeechRecognitionResult);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isSpeechRecognitionResult"));
  },
  get$contains: function() {
    return new $.BoundClosure50(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.SpeechRecognitionResult);
    $.setRuntimeTypeInfo(t1, [$.SpeechRecognitionResult]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.SpeechRecognitionResult), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isSpeechRecognitionResult");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isSpeechRecognitionResult");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isSpeechRecognitionResult"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isSpeechRecognitionResult");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("StyleSheetList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isStyleSheet");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isStyleSheet");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.StyleSheet);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isStyleSheet"));
  },
  get$contains: function() {
    return new $.BoundClosure51(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.StyleSheet);
    $.setRuntimeTypeInfo(t1, [$.StyleSheet]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.StyleSheet), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isStyleSheet");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isStyleSheet");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isStyleSheet"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isStyleSheet");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("IDBCursor", {
  get$source: function() {
    return this.source;
  }
});

$.$defineNativeClass("IDBCursorWithValue", {
  get$value: function() {
    return this.value;
  }
});

$.$defineNativeClass("IDBDatabase", {
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isDatabase: function() {
    return true;
  }
});

$.$defineNativeClass("IDBFactory", {
  open$2: function(name, version) {
    return this.open($.stringTypeCheck(name),$.intTypeCheck(version));
  }
});

$.$defineNativeClass("IDBIndex", {
  get$1: function(key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (typeof key === "object" && key !== null && key.$isKeyRange() || key == null)
      return $.callTypeCheck(this._get_1$1(key), "$isRequest");
    if (!t1)
      return $.callTypeCheck(this._get_2$1(key), "$isRequest");
    throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
  },
  _get_1$1: function(key) {
    return this.get($.callTypeCheck(key, "$isKeyRange"));
  },
  _get_2$1: function(key) {
    return this.get(key);
  }
});

$.$defineNativeClass("IDBKeyRange", {
  $isKeyRange: function() {
    return true;
  }
});

$.$defineNativeClass("IDBObjectStore", {
  add$2: function(value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return $.callTypeCheck(this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key), "$isRequest");
    return $.callTypeCheck(this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value)), "$isRequest");
  },
  add$1: function(value) {
    return this.add$2(value, $);
  },
  _add_1$2: function(value, key) {
    return this.add(value,key);
  },
  _add_2$1: function(value) {
    return this.add(value);
  },
  clear$0: function() {
    return this.clear();
  },
  $isObjectStore: function() {
    return true;
  }
});

$.$defineNativeClass("IDBOpenDBRequest", {
  $isEventTarget: function() {
    return true;
  }
});

$.$defineNativeClass("IDBRequest", {
  get$error: function() {
    return this.error;
  },
  get$source: function() {
    return this.source;
  },
  get$result: function() {
    return $._convertNativeToDart_IDBAny(this.result);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isRequest: function() {
    return true;
  }
});

$.$defineNativeClass("IDBTransaction", {
  get$error: function() {
    return this.error;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    $.stringTypeCheck(type);
    $.propertyTypeCheck(listener, "$isEventListener");
    $.boolTypeCheck(useCapture);
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isTransaction: function() {
    return true;
  }
});

$.$defineNativeClass("IDBVersionChangeRequest", {
  $isEventTarget: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAngle", {
  set$value: function(v) {
    this.value = $.numTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  },
  $isAngle: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedAngle", {
  $isAnimatedAngle: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedBoolean", {
  $isAnimatedBoolean: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedEnumeration", {
  $isAnimatedEnumeration: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedInteger", {
  $isAnimatedInteger: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedLength", {
  $isAnimatedLength: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedLengthList", {
  $isAnimatedLengthList: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedNumber", {
  $isAnimatedNumber: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedNumberList", {
  $isAnimatedNumberList: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedPreserveAspectRatio", {
  $isAnimatedPreserveAspectRatio: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedRect", {
  $isAnimatedRect: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedString", {
  $isAnimatedString: function() {
    return true;
  }
});

$.$defineNativeClass("SVGAnimatedTransformList", {
  $isAnimatedTransformList: function() {
    return true;
  }
});

$.$defineNativeClass("SVGElementInstance", {
  get$onClick: function() {
    return $.propertyTypeCheck($.CONSTANT6.forTarget$1(this), "$isStream");
  },
  get$onLoad: function() {
    return $.propertyTypeCheck($.CONSTANT5.forTarget$1(this), "$isStream");
  },
  $isElementInstance: function() {
    return true;
  }
});

$.$defineNativeClass("SVGFEBlendElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEColorMatrixElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEComponentTransferElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFECompositeElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEDisplacementMapElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEDropShadowElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEFloodElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEGaussianBlurElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEImageElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEMergeElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEMorphologyElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFEOffsetElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFESpecularLightingElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFETileElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGFETurbulenceElement", {
  get$result: function() {
    return this.result;
  }
});

$.$defineNativeClass("SVGLength", {
  set$value: function(v) {
    this.value = $.numTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  },
  $isLength: function() {
    return true;
  }
});

$.$defineNativeClass("SVGLengthList", {
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isLength");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isLength");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Length);
  },
  get$length: function() {
    return $.intTypeCheck(this.numberOfItems);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isLength"));
  },
  get$contains: function() {
    return new $.BoundClosure53(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Length);
    $.setRuntimeTypeInfo(t1, [$.Length]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Length), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isLength");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isLength");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isLength"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isLength");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  $isLengthList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGMatrix", {
  $isMatrix: function() {
    return true;
  }
});

$.$defineNativeClass("SVGNumber", {
  set$value: function(v) {
    this.value = $.numTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  },
  $isNumber: function() {
    return true;
  }
});

$.$defineNativeClass("SVGNumberList", {
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isNumber");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isNumber");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Number);
  },
  get$length: function() {
    return $.intTypeCheck(this.numberOfItems);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isNumber"));
  },
  get$contains: function() {
    return new $.BoundClosure54(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Number);
    $.setRuntimeTypeInfo(t1, [$.Number]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Number), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isNumber");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isNumber");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isNumber"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isNumber");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  $isNumberList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPathSeg", {
  $isPathSeg: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPathSegList", {
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isPathSeg");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isPathSeg");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.PathSeg);
  },
  get$length: function() {
    return $.intTypeCheck(this.numberOfItems);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isPathSeg"));
  },
  get$contains: function() {
    return new $.BoundClosure55(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.PathSeg);
    $.setRuntimeTypeInfo(t1, [$.PathSeg]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.PathSeg), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isPathSeg");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isPathSeg");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isPathSeg"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isPathSeg");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  $isPathSegList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPoint", {
  $isPoint: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPointList", {
  clear$0: function() {
    return this.clear();
  },
  $isPointList: function() {
    return true;
  }
});

$.$defineNativeClass("SVGPreserveAspectRatio", {
  $isPreserveAspectRatio: function() {
    return true;
  }
});

$.$defineNativeClass("SVGRect", {
  set$height: function(v) {
    this.height = $.numTypeCheck(v);
  },
  set$width: function(v) {
    this.width = $.numTypeCheck(v);
  },
  $isRect: function() {
    return true;
  }
});

$.$defineNativeClass("SVGScriptElement", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("SVGStringList", {
  $index: function(index) {
    return this[$.intTypeCheck(index)];
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.stringTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.String);
  },
  get$length: function() {
    return $.intTypeCheck(this.numberOfItems);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.stringTypeCheck(element));
  },
  get$contains: function() {
    return new $.BoundClosure56(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.String);
    $.setRuntimeTypeInfo(t1, [$.String]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.String), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.stringTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.stringTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.stringTypeCheck(element), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.stringTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  $isStringList: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("SVGStyleElement", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("SVGElement", {
  get$children: function() {
    return $.FilteredElementList$(this);
  },
  set$children: function(value) {
    var children, t1;
    $.listTypeCheck(value);
    children = this.get$children();
    t1 = $.getInterceptor$JSArray(children);
    t1.clear$0(children);
    t1.addAll$1(children, value);
  },
  set$innerHtml: function(svg) {
    var container;
    $.stringTypeCheck(svg);
    container = $.Element_Element$tag("div");
    container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children($.$$index(container.get$children(), 0).get$children());
  },
  get$$$dom_children: function() {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function() {
    return this.id;
  },
  $isSvgElement: function() {
    return true;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {
  $isSvgSvgElement: function() {
    return true;
  }
});

$.$defineNativeClass("SVGTransform", {
  $isTransform: function() {
    return true;
  }
});

$.$defineNativeClass("SVGTransformList", {
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isTransform");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isTransform");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.Transform);
  },
  get$length: function() {
    return $.intTypeCheck(this.numberOfItems);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isTransform"));
  },
  get$contains: function() {
    return new $.BoundClosure57(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.Transform);
    $.setRuntimeTypeInfo(t1, [$.Transform]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.Transform), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isTransform");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isTransform");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isTransform"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isTransform");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  clear$0: function() {
    return this.clear();
  },
  $isTransformList: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
});

$.$defineNativeClass("SVGUseElement", {
  $isUseElement: function() {
    return true;
  }
});

$.$defineNativeClass("SVGViewSpec", {
  $isViewSpec: function() {
    return true;
  }
});

$.$defineNativeClass("SVGElementInstanceList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return $.callTypeCheck(this[$.intTypeCheck(index)], "$isElementInstance");
  },
  $indexSet: function(index, value) {
    $.intTypeCheck(index);
    $.callTypeCheck(value, "$isElementInstance");
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this, $.ElementInstance);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, $.callTypeCheck(element, "$isElementInstance"));
  },
  get$contains: function() {
    return new $.BoundClosure58(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = $.iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
    return;
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, $.functionTypeCheck(f));
  },
  where$1: function(f) {
    return $.WhereIterable$(this, $.functionTypeCheck(f));
  },
  toList$0: function() {
    var t1 = $.List_List$from(this, $.ElementInstance);
    $.setRuntimeTypeInfo(t1, [$.ElementInstance]);
    return t1;
  },
  toSet$0: function() {
    return $.propertyTypeCheck($.Set_Set$from(this, $.ElementInstance), "$isSet");
  },
  get$isEmpty: function() {
    return $.boolTypeCheck($.$$eq($.length(this), 0));
  },
  add$1: function(value) {
    $.callTypeCheck(value, "$isElementInstance");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    $.callTypeCheck(value, "$isElementInstance");
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    $.intTypeCheck(value);
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, $.callTypeCheck(element, "$isElementInstance"), $.intTypeCheck(start), $.length(this));
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.boolConversionCheck($.$$gt(t1.get$length(this), 0)))
      return $.callTypeCheck(this.$index($.$$sub(t1.get$length(this), 1)), "$isElementInstance");
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    $.functionTypeCheck(test);
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    $.intTypeCheck(start);
    $.intTypeCheck(rangeLength);
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("AudioBuffer", {
  get$length: function() {
    return this.length;
  },
  $isAudioBuffer: function() {
    return true;
  }
});

$.$defineNativeClass("AudioContext", {
  get$listener: function() {
    return this.listener;
  },
  $isAudioContext: function() {
    return true;
  }
});

$.$defineNativeClass("AudioDestinationNode", {
  $isAudioDestinationNode: function() {
    return true;
  }
});

$.$defineNativeClass("AudioGain", {
  $isAudioGain: function() {
    return true;
  }
});

$.$defineNativeClass("AudioListener", {
  $isAudioListener: function() {
    return true;
  }
});

$.$defineNativeClass("AudioParam", {
  set$value: function(v) {
    this.value = $.numTypeCheck(v);
  },
  get$value: function() {
    return this.value;
  },
  $isAudioParam: function() {
    return true;
  }
});

$.$defineNativeClass("BiquadFilterNode", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("OfflineAudioContext", {
  $isEventTarget: function() {
    return true;
  }
});

$.$defineNativeClass("OscillatorNode", {
  set$type: function(v) {
    this.type = $.stringTypeCheck(v);
  }
});

$.$defineNativeClass("ScriptProcessorNode", {
  $isEventTarget: function() {
    return true;
  }
});

// 261 dynamic classes.
// 442 classes
// 39 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1__CssValueList = "CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSMixFunctionValue", v2_MediaElement = "HTMLMediaElement|HTMLAudioElement|HTMLVideoElement", v3_SvgElement = "SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement", v4_UIEvent = "UIEvent|CompositionEvent|KeyboardEvent|MouseEvent|WheelEvent|TextEvent|TouchEvent|SVGZoomEvent", v5_Element = [v2_MediaElement, v3_SvgElement, "Element|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement"].join("|"), v6_CharacterData = "CharacterData|Text|CDATASection|Comment", v7_Document = "Document|HTMLDocument|SVGDocument", v8_DocumentFragment = "DocumentFragment|ShadowRoot", v9_Node = [v5_Element, v6_CharacterData, v7_Document, v8_DocumentFragment, "Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction"].join("|"), v10_AbstractWorker = "AbstractWorker|SharedWorker|Worker", v11_WorkerContext = "WorkerContext|DedicatedWorkerContext|SharedWorkerContext", v12_MediaStream = "MediaStream|LocalMediaStream", v13_Request = "IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest", v14_AudioContext = "AudioContext|OfflineAudioContext";
  $.dynamicSetMetadata([["StyleSheet", "StyleSheet|CSSStyleSheet"], ["UIEvent", v4_UIEvent], ["Uint8Array", v0_Uint8Array], ["WorkerContext", v11_WorkerContext], ["CSSValueList", v1__CssValueList], ["IDBCursor", "IDBCursor|IDBCursorWithValue"], ["IDBRequest", v13_Request], ["AbstractWorker", v10_AbstractWorker], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array"].join("|")], ["Blob", "Blob|File"], ["CharacterData", v6_CharacterData], ["CSSRule", "CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule"], ["CSSValue", [v1__CssValueList, "CSSValue|CSSPrimitiveValue|SVGColor|SVGPaint"].join("|")], ["SVGPathSeg", "SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegMovetoAbs|SVGPathSegMovetoRel"], ["Document", v7_Document], ["DocumentFragment", v8_DocumentFragment], ["DOMTokenList", "DOMTokenList|DOMSettableTokenList"], ["HTMLMediaElement", v2_MediaElement], ["SVGElement", v3_SvgElement], ["Element", v5_Element], ["Entry", "Entry|DirectoryEntry|FileEntry"], ["EntrySync", "EntrySync|DirectoryEntrySync|FileEntrySync"], ["Event", [v4_UIEvent, "Event|WebKitAnimationEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|ProgressEvent|XMLHttpRequestProgressEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|AudioProcessingEvent|OfflineAudioCompletionEvent"].join("|")], ["Node", v9_Node], ["MediaStream", v12_MediaStream], ["AudioContext", v14_AudioContext], ["EventTarget", [v9_Node, v10_AbstractWorker, v11_WorkerContext, v12_MediaStream, v13_Request, v14_AudioContext, "EventTarget|DOMApplicationCache|BatteryManager|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|MediaController|MediaSource|MediaStreamTrack|MessagePort|Notification|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|DOMWindow|IDBDatabase|IDBTransaction|SVGElementInstance"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["AudioParam", "AudioParam|AudioGain"], ["NodeList", "NodeList|RadioNodeList"]]);
})();

$.main.call$0 = $.main;

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, constructor, prototype) {
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = !!{}.__proto__;
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue, getter) {
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  function Isolate() {
    for (var staticName in isolateProperties) {
      if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
        this[staticName] = isolateProperties[staticName];
      }
    }
    // Use the newly created object as prototype. In Chrome this creates a
    // hidden class for the object and makes sure it is fast to access.
    function ForceEfficientMap() {}
    ForceEfficientMap.prototype = this;
    new ForceEfficientMap;
  }
  Isolate.prototype = oldIsolate.prototype;
  Isolate.prototype.constructor = Isolate;
  Isolate.$isolateProperties = isolateProperties;
  return Isolate;
};
}

//@ sourceMappingURL=dart_chrome_editor.dart.js.map